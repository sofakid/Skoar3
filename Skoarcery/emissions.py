from datetime import datetime
import sys
import abc

class Arg:

    def __init__(self, type, name):
        self.type = type
        self.name = name

class NIE(NotImplementedError):
    pass


class Tabby:

    def __init__(self):
        self.tab = 0

    def __iadd__(self, other):
        self.tab += other
        return self

    def __isub__(self, other):
        self.tab -= other
        if self.tab < 0:
            raise AssertionError("Tried to decrement tabby past 0")
        return self

    def __mul__(self, other):
        return self.tab * other

    def __rmul__(self, other):
        return self.tab * other

    def __eq__(self, other):
        return self.tab == other


class Tongue:

    __metaclass__ = abc.ABCMeta

    def __init__(self):
        self.tab = Tabby()
        self.ptab = 0
        self.fd = sys.stdout

    # ----------
    # properties
    # ----------
    @abc.abstractproperty
    def cmt_char(self):
        raise NIE

    @abc.abstractproperty
    def language(self):
        raise NIE

    @abc.abstractproperty
    def ext(self):
        raise NIE

    @abc.abstractproperty
    def this(self):
        raise NIE

    @abc.abstractproperty
    def null(self):
        raise NIE

    @abc.abstractproperty
    def true(self):
        raise NIE

    @abc.abstractproperty
    def false(self):
        raise NIE

    @property
    def tabby(self):
        if self.tab == 0:
            return ""

        return ("{:>" + str(self.tab * 4) + "}").format(" ")

    # -------
    # methods
    # -------
    @abc.abstractmethod
    def stmt(self, line, end="\n"):
        raise NIE

    @abc.abstractmethod
    def abstract_class(self, name, extends=None):
        raise NIE

    @abc.abstractmethod
    def class_(self, name, extends=None):
        raise NIE

    @abc.abstractmethod
    def classvar(self, prefix, name, val=None):
        raise NIE

    @abc.abstractmethod
    def attrvar(self, prefix, name, val=None):
        raise NIE

    @abc.abstractmethod
    def var(self, name, val=None):
        raise NIE

    @abc.abstractmethod
    def expand_args(self, *args, **kwargs):
        raise NIE

    @abc.abstractmethod
    def constructor(self, *args, **kwargs):
        raise NIE

    @abc.abstractmethod
    def function(self, name, *args, **kwargs):
        raise NIE

    @abc.abstractmethod
    def method(self, name, *args, **kwargs):
        raise NIE

    @abc.abstractmethod
    def static_method(self, name, *args, **kwargs):
        raise NIE

    @abc.abstractmethod
    def abstract_static_method(self, name, *args, **kwargs):
        raise NIE

    @abc.abstractmethod
    def if_(self, condition):
        raise NIE

    @abc.abstractmethod
    def else_(self):
        raise NIE

    @abc.abstractmethod
    def end_if(self):
        raise NIE

    @abc.abstractmethod
    def end(self):
        raise NIE

    @abc.abstractmethod
    def return_(self, val=""):
        raise NIE

    @abc.abstractmethod
    def throw(self, name, msg):
        raise NIE

    @abc.abstractmethod
    def find_regex(self, match, regex, buf, offs):
        raise NIE

    @abc.abstractmethod
    def print(self, s, end="\n"):
        raise NIE

    @abc.abstractmethod
    def try_(self):
        raise NIE

    @abc.abstractmethod
    def except_any(self):
        raise NIE

    @abc.abstractmethod
    def nop(self):
        raise NIE

    @abc.abstractmethod
    def dict_new(self, name):
        raise NIE

    @abc.abstractmethod
    def dict_set(self, name, str_key, value, end):
        raise NIE

    @abc.abstractmethod
    def v_dict_get(self, name, str_key):
        raise NIE

    # ------------------------------------
    # these v_guys return rather than code
    # ------------------------------------
    @abc.abstractmethod
    def v_regex_group_zero(self, match):
        raise NIE

    @abc.abstractmethod
    def v_length(self, x):
        raise NIE

    @abc.abstractmethod
    def v_new(self, cls, *args):
        raise NIE

    @abc.abstractmethod
    def v_attr(self, attr):
        raise NIE

    @abc.abstractmethod
    def v_def_regex(self, regex):
        raise NIE

    @abc.abstractmethod
    def v_match_regex(self, regex, buf, offs):
        raise NIE

    @abc.abstractmethod
    def v_match(self, match):
        raise NIE

    @abc.abstractmethod
    def v_static_accessor(self):
        raise NIE
    
    def v_str(self, s):
        return '"' + s + '"'

    def v_sym(self, s):
        return "'" + s + "'"

    @abc.abstractmethod
    def r_int(self):
        return ""

    @abc.abstractmethod
    def r_toke(self):
        return ""

    def raw(self, code):
        self._emit(code, end="")

    def file_header(self, filename, spell):
        self.cmt(box("{filename}{ext} - Generated by {spell} on {date} for {language}".format(
            filename=filename, ext=self.ext, spell=spell,
            date=str(datetime.now()).split(".")[0],
            language=self.language), "="))

    def cmt(self, words):
        pref = self.tabby + self.cmt_char + " "
        x = "\n" + pref
        words = pref + words.replace("\n", x)
        self._emit(words, end="\n")

    def cmt_hdr(self, text):
        self.cmt(box(text))

    def nl(self, n=1):
        for i in range(0, n):
            self._emit("", end="\n")

    def _emit(self, text, end=""):
        print(text, end=end, file=self.fd)

        if self.fd != sys.stdout:
            print(text, end=end)

def box(text, char="-"):
    n = len(text)

    line = ("{:" + char + ">" + str(n) + "}").format(char)

    return "{line}\n{text}\n{line}".format(line=line, text=text)

SC = None
PY = None
CPP = None
HPP = None
tongues = []


def init():
    global SC, PY, CPP, HPP, tongues

    from Skoarcery.emissions_sc import ScTongue
    from Skoarcery.emissions_py import PyTongue
    from Skoarcery.emissions_cpp import CppTongue

    
    SC = ScTongue()
    PY = PyTongue()
    CPP = CppTongue()
    HPP = CppTongue()

    tongues = [SC, PY, CPP, HPP]
