// =====================================================================================================================
// rdpp.cpp - Generated by Code_Parser_Cpp - Create Recursive Descent Predictive Parser on 2017-03-13 23:20:28 for C++14
// =====================================================================================================================
#include "rdpp.hpp"
#include "exception.hpp"
#include "lex.hpp"
#include "noad.hpp"

void SkoarParser::fail(SkoarNoadPtr noad) {
    toker->dump();
    throw new SkoarParseException(L"Fail", noad);
}

void SkoarParser::fail_too_deep(SkoarNoadPtr noad) {
    toker->dump();
    throw new SkoarParseException(L"Parse tree too deep!", noad);
}

void SkoarParser::toker_fail(SkoarError& e, SkoarNoadPtr noad) {
    toker->dump();
    throw new SkoarParseException(e.wwhat(), noad);
}

 SkoarParser::SkoarParser(SkoarToker * tokr) {

    deep = 0;
    toker = tokr;
    
}

 SkoarStats::SkoarStats() {
    tokeFreq[ESkoarToke::AlCoda] = 0.0f;
    tokeFreq[ESkoarToke::AlFine] = 0.0f;
    tokeFreq[ESkoarToke::AlSegno] = 0.0f;
    tokeFreq[ESkoarToke::ArgSpec] = 0.0f;
    tokeFreq[ESkoarToke::AssOp] = 0.0f;
    tokeFreq[ESkoarToke::Bars] = 0.0f;
    tokeFreq[ESkoarToke::BooleanOp] = 0.0f;
    tokeFreq[ESkoarToke::Caesura] = 0.0f;
    tokeFreq[ESkoarToke::Carrot] = 0.0f;
    tokeFreq[ESkoarToke::Choard] = 0.0f;
    tokeFreq[ESkoarToke::Coda] = 0.0f;
    tokeFreq[ESkoarToke::Comment] = 0.0f;
    tokeFreq[ESkoarToke::CondE] = 0.0f;
    tokeFreq[ESkoarToke::CondIf] = 0.0f;
    tokeFreq[ESkoarToke::CondS] = 0.0f;
    tokeFreq[ESkoarToke::Crap] = 0.0f;
    tokeFreq[ESkoarToke::Crotchets] = 0.0f;
    tokeFreq[ESkoarToke::DaCapo] = 0.0f;
    tokeFreq[ESkoarToke::DalSegno] = 0.0f;
    tokeFreq[ESkoarToke::Deref] = 0.0f;
    tokeFreq[ESkoarToke::DynFP] = 0.0f;
    tokeFreq[ESkoarToke::DynForte] = 0.0f;
    tokeFreq[ESkoarToke::DynPiano] = 0.0f;
    tokeFreq[ESkoarToke::DynSFZ] = 0.0f;
    tokeFreq[ESkoarToke::Eighths] = 0.0f;
    tokeFreq[ESkoarToke::Fairy] = 0.0f;
    tokeFreq[ESkoarToke::False] = 0.0f;
    tokeFreq[ESkoarToke::Fine] = 0.0f;
    tokeFreq[ESkoarToke::Float] = 0.0f;
    tokeFreq[ESkoarToke::Freq] = 0.0f;
    tokeFreq[ESkoarToke::HashLevel] = 0.0f;
    tokeFreq[ESkoarToke::Int] = 0.0f;
    tokeFreq[ESkoarToke::LWing] = 0.0f;
    tokeFreq[ESkoarToke::ListE] = 0.0f;
    tokeFreq[ESkoarToke::ListS] = 0.0f;
    tokeFreq[ESkoarToke::ListSep] = 0.0f;
    tokeFreq[ESkoarToke::Loco] = 0.0f;
    tokeFreq[ESkoarToke::LoopE] = 0.0f;
    tokeFreq[ESkoarToke::LoopS] = 0.0f;
    tokeFreq[ESkoarToke::LoopSep] = 0.0f;
    tokeFreq[ESkoarToke::MathOp] = 0.0f;
    tokeFreq[ESkoarToke::Meter] = 0.0f;
    tokeFreq[ESkoarToke::MsgName] = 0.0f;
    tokeFreq[ESkoarToke::MsgNameWithArgs] = 0.0f;
    tokeFreq[ESkoarToke::MsgOp] = 0.0f;
    tokeFreq[ESkoarToke::NamedNoat] = 0.0f;
    tokeFreq[ESkoarToke::Newline] = 0.0f;
    tokeFreq[ESkoarToke::Nosey] = 0.0f;
    tokeFreq[ESkoarToke::OctaveShift] = 0.0f;
    tokeFreq[ESkoarToke::OttavaA] = 0.0f;
    tokeFreq[ESkoarToke::OttavaB] = 0.0f;
    tokeFreq[ESkoarToke::PedalDown] = 0.0f;
    tokeFreq[ESkoarToke::PedalUp] = 0.0f;
    tokeFreq[ESkoarToke::Portamento] = 0.0f;
    tokeFreq[ESkoarToke::Quarters] = 0.0f;
    tokeFreq[ESkoarToke::Quavers] = 0.0f;
    tokeFreq[ESkoarToke::QuindicesimaA] = 0.0f;
    tokeFreq[ESkoarToke::QuindicesimaB] = 0.0f;
    tokeFreq[ESkoarToke::RWing] = 0.0f;
    tokeFreq[ESkoarToke::Rep] = 0.0f;
    tokeFreq[ESkoarToke::Segno] = 0.0f;
    tokeFreq[ESkoarToke::Semicolon] = 0.0f;
    tokeFreq[ESkoarToke::SkoarpionEnd] = 0.0f;
    tokeFreq[ESkoarToke::SkoarpionSep] = 0.0f;
    tokeFreq[ESkoarToke::SkoarpionStart] = 0.0f;
    tokeFreq[ESkoarToke::Slash] = 0.0f;
    tokeFreq[ESkoarToke::String] = 0.0f;
    tokeFreq[ESkoarToke::Symbol] = 0.0f;
    tokeFreq[ESkoarToke::SymbolName] = 0.0f;
    tokeFreq[ESkoarToke::Times] = 0.0f;
    tokeFreq[ESkoarToke::True] = 0.0f;
    tokeFreq[ESkoarToke::Tuplet] = 0.0f;
    tokeFreq[ESkoarToke::Voice] = 0.0f;
    tokeFreq[ESkoarToke::Volta] = 0.0f;

    desirables = new list<ESkoarToke::Kind>[118];

    // branches
    desirables[0] = {ESkoarToke::Voice, ESkoarToke::Newline, ESkoarToke::DynForte, ESkoarToke::Bars,
                      ESkoarToke::Quarters, ESkoarToke::LWing, ESkoarToke::Crap, ESkoarToke::Fine,
                      ESkoarToke::String, ESkoarToke::Int, ESkoarToke::CondS, ESkoarToke::HashLevel,
                      ESkoarToke::OttavaB, ESkoarToke::Float, ESkoarToke::OttavaA, ESkoarToke::ListS,
                      ESkoarToke::PedalUp, ESkoarToke::DaCapo, ESkoarToke::Crotchets, ESkoarToke::QuindicesimaA,
                      ESkoarToke::Fairy, ESkoarToke::Caesura, ESkoarToke::DynPiano, ESkoarToke::Slash,
                      ESkoarToke::Rep, ESkoarToke::Tuplet, ESkoarToke::Deref, ESkoarToke::Freq,
                      ESkoarToke::Coda, ESkoarToke::NamedNoat, ESkoarToke::False, ESkoarToke::Choard,
                      ESkoarToke::OctaveShift, ESkoarToke::Segno, ESkoarToke::Quavers, ESkoarToke::Volta,
                      ESkoarToke::QuindicesimaB, ESkoarToke::DalSegno, ESkoarToke::SkoarpionStart, ESkoarToke::Eighths,
                      ESkoarToke::Portamento, ESkoarToke::DynSFZ, ESkoarToke::Carrot, ESkoarToke::Loco,
                      ESkoarToke::PedalDown, ESkoarToke::Symbol, ESkoarToke::Comment, ESkoarToke::True,
                      ESkoarToke::Meter, ESkoarToke::LoopS, ESkoarToke::DynFP};

    // skoar
    desirables[1] = {ESkoarToke::Voice, ESkoarToke::Newline, ESkoarToke::DynForte, ESkoarToke::Bars,
                      ESkoarToke::Quarters, ESkoarToke::LWing, ESkoarToke::Crap, ESkoarToke::Fine,
                      ESkoarToke::String, ESkoarToke::Int, ESkoarToke::CondS, ESkoarToke::HashLevel,
                      ESkoarToke::OttavaB, ESkoarToke::Float, ESkoarToke::OttavaA, ESkoarToke::ListS,
                      ESkoarToke::PedalUp, ESkoarToke::DaCapo, ESkoarToke::Crotchets, ESkoarToke::QuindicesimaA,
                      ESkoarToke::Fairy, ESkoarToke::Caesura, ESkoarToke::DynPiano, ESkoarToke::Slash,
                      ESkoarToke::Rep, ESkoarToke::Tuplet, ESkoarToke::Deref, ESkoarToke::Freq,
                      ESkoarToke::Coda, ESkoarToke::NamedNoat, ESkoarToke::False, ESkoarToke::Choard,
                      ESkoarToke::OctaveShift, ESkoarToke::Segno, ESkoarToke::Quavers, ESkoarToke::Volta,
                      ESkoarToke::QuindicesimaB, ESkoarToke::DalSegno, ESkoarToke::SkoarpionStart, ESkoarToke::Eighths,
                      ESkoarToke::Portamento, ESkoarToke::DynSFZ, ESkoarToke::Carrot, ESkoarToke::Loco,
                      ESkoarToke::PedalDown, ESkoarToke::Symbol, ESkoarToke::Eof, ESkoarToke::Comment,
                      ESkoarToke::True, ESkoarToke::Meter, ESkoarToke::LoopS, ESkoarToke::DynFP};

    // branch
    desirables[2] = {ESkoarToke::Voice, ESkoarToke::Newline, ESkoarToke::DynForte, ESkoarToke::Bars,
                      ESkoarToke::Quarters, ESkoarToke::LWing, ESkoarToke::Crap, ESkoarToke::Fine,
                      ESkoarToke::String, ESkoarToke::Int, ESkoarToke::CondS, ESkoarToke::HashLevel,
                      ESkoarToke::OttavaB, ESkoarToke::Float, ESkoarToke::OttavaA, ESkoarToke::ListS,
                      ESkoarToke::PedalUp, ESkoarToke::DaCapo, ESkoarToke::Crotchets, ESkoarToke::QuindicesimaA,
                      ESkoarToke::Fairy, ESkoarToke::Caesura, ESkoarToke::DynPiano, ESkoarToke::Slash,
                      ESkoarToke::Rep, ESkoarToke::Tuplet, ESkoarToke::Deref, ESkoarToke::Freq,
                      ESkoarToke::Coda, ESkoarToke::NamedNoat, ESkoarToke::False, ESkoarToke::Choard,
                      ESkoarToke::OctaveShift, ESkoarToke::Segno, ESkoarToke::Quavers, ESkoarToke::Volta,
                      ESkoarToke::QuindicesimaB, ESkoarToke::DalSegno, ESkoarToke::SkoarpionStart, ESkoarToke::Eighths,
                      ESkoarToke::Portamento, ESkoarToke::DynSFZ, ESkoarToke::Carrot, ESkoarToke::Loco,
                      ESkoarToke::PedalDown, ESkoarToke::Symbol, ESkoarToke::Comment, ESkoarToke::True,
                      ESkoarToke::Meter, ESkoarToke::LoopS, ESkoarToke::DynFP};

    // optional_voice
    desirables[3] = {ESkoarToke::Voice};

    // phrases
    desirables[4] = {ESkoarToke::DynForte, ESkoarToke::Bars, ESkoarToke::Quarters, ESkoarToke::LWing,
                      ESkoarToke::Crap, ESkoarToke::Fine, ESkoarToke::String, ESkoarToke::Int,
                      ESkoarToke::CondS, ESkoarToke::HashLevel, ESkoarToke::OttavaB, ESkoarToke::Float,
                      ESkoarToke::OttavaA, ESkoarToke::ListS, ESkoarToke::PedalUp, ESkoarToke::DaCapo,
                      ESkoarToke::Crotchets, ESkoarToke::QuindicesimaA, ESkoarToke::Fairy, ESkoarToke::Caesura,
                      ESkoarToke::DynPiano, ESkoarToke::Slash, ESkoarToke::Rep, ESkoarToke::Tuplet,
                      ESkoarToke::Deref, ESkoarToke::Freq, ESkoarToke::Coda, ESkoarToke::NamedNoat,
                      ESkoarToke::False, ESkoarToke::Choard, ESkoarToke::OctaveShift, ESkoarToke::Segno,
                      ESkoarToke::Quavers, ESkoarToke::Volta, ESkoarToke::QuindicesimaB, ESkoarToke::DalSegno,
                      ESkoarToke::SkoarpionStart, ESkoarToke::Eighths, ESkoarToke::Portamento, ESkoarToke::DynSFZ,
                      ESkoarToke::Carrot, ESkoarToke::Loco, ESkoarToke::PedalDown, ESkoarToke::Symbol,
                      ESkoarToke::Comment, ESkoarToke::True, ESkoarToke::Meter, ESkoarToke::LoopS,
                      ESkoarToke::DynFP};

    // phrasey
    desirables[5] = {ESkoarToke::Comment};
    desirables[6] = {ESkoarToke::Fine, ESkoarToke::Coda, ESkoarToke::Segno, ESkoarToke::Bars,
                      ESkoarToke::Volta};
    desirables[7] = {ESkoarToke::Meter};
    desirables[8] = {ESkoarToke::DynForte, ESkoarToke::LWing, ESkoarToke::Crap, ESkoarToke::String,
                      ESkoarToke::Int, ESkoarToke::CondS, ESkoarToke::HashLevel, ESkoarToke::OttavaB,
                      ESkoarToke::Float, ESkoarToke::OttavaA, ESkoarToke::ListS, ESkoarToke::PedalUp,
                      ESkoarToke::QuindicesimaA, ESkoarToke::Fairy, ESkoarToke::Caesura, ESkoarToke::DynPiano,
                      ESkoarToke::Rep, ESkoarToke::Tuplet, ESkoarToke::Deref, ESkoarToke::Freq,
                      ESkoarToke::NamedNoat, ESkoarToke::False, ESkoarToke::Choard, ESkoarToke::OctaveShift,
                      ESkoarToke::QuindicesimaB, ESkoarToke::SkoarpionStart, ESkoarToke::Portamento, ESkoarToke::DynSFZ,
                      ESkoarToke::Carrot, ESkoarToke::Loco, ESkoarToke::PedalDown, ESkoarToke::Symbol,
                      ESkoarToke::True, ESkoarToke::LoopS, ESkoarToke::DynFP};
    desirables[9] = {ESkoarToke::DaCapo, ESkoarToke::DalSegno};
    desirables[10] = {ESkoarToke::Crotchets, ESkoarToke::Eighths, ESkoarToke::Quavers, ESkoarToke::Slash,
                      ESkoarToke::Quarters};

    // marker
    desirables[11] = {ESkoarToke::Segno};
    desirables[12] = {ESkoarToke::Fine};
    desirables[13] = {ESkoarToke::Coda};
    desirables[14] = {ESkoarToke::Volta};
    desirables[15] = {ESkoarToke::Bars};

    // expr
    desirables[16] = {ESkoarToke::DynForte, ESkoarToke::LWing, ESkoarToke::Crap, ESkoarToke::String,
                      ESkoarToke::Int, ESkoarToke::CondS, ESkoarToke::HashLevel, ESkoarToke::OttavaB,
                      ESkoarToke::Float, ESkoarToke::OttavaA, ESkoarToke::ListS, ESkoarToke::PedalUp,
                      ESkoarToke::QuindicesimaA, ESkoarToke::Fairy, ESkoarToke::Caesura, ESkoarToke::DynPiano,
                      ESkoarToke::Rep, ESkoarToke::Tuplet, ESkoarToke::Deref, ESkoarToke::Freq,
                      ESkoarToke::NamedNoat, ESkoarToke::False, ESkoarToke::Choard, ESkoarToke::OctaveShift,
                      ESkoarToke::QuindicesimaB, ESkoarToke::SkoarpionStart, ESkoarToke::Portamento, ESkoarToke::DynSFZ,
                      ESkoarToke::Carrot, ESkoarToke::Loco, ESkoarToke::PedalDown, ESkoarToke::Symbol,
                      ESkoarToke::True, ESkoarToke::LoopS, ESkoarToke::DynFP};

    // dal_goto
    desirables[17] = {ESkoarToke::DaCapo};
    desirables[18] = {ESkoarToke::DalSegno};

    // beat
    desirables[19] = {ESkoarToke::Crotchets};
    desirables[20] = {ESkoarToke::Quavers};
    desirables[21] = {ESkoarToke::Quarters};
    desirables[22] = {ESkoarToke::Eighths};
    desirables[23] = {ESkoarToke::Slash};

    // skrp_sig
    desirables[24] = {ESkoarToke::ArgSpec};
    desirables[25] = {ESkoarToke::SymbolName};

    // skrp_suffix
    desirables[26] = {ESkoarToke::Voice, ESkoarToke::Newline, ESkoarToke::DynForte, ESkoarToke::Bars,
                      ESkoarToke::Quarters, ESkoarToke::LWing, ESkoarToke::Crap, ESkoarToke::Fine,
                      ESkoarToke::String, ESkoarToke::Int, ESkoarToke::CondS, ESkoarToke::HashLevel,
                      ESkoarToke::OttavaB, ESkoarToke::Float, ESkoarToke::OttavaA, ESkoarToke::ListS,
                      ESkoarToke::PedalUp, ESkoarToke::DaCapo, ESkoarToke::Crotchets, ESkoarToke::SkoarpionEnd,
                      ESkoarToke::QuindicesimaA, ESkoarToke::Fairy, ESkoarToke::Caesura, ESkoarToke::DynPiano,
                      ESkoarToke::Slash, ESkoarToke::Rep, ESkoarToke::Tuplet, ESkoarToke::Deref,
                      ESkoarToke::Freq, ESkoarToke::Coda, ESkoarToke::NamedNoat, ESkoarToke::False,
                      ESkoarToke::Choard, ESkoarToke::OctaveShift, ESkoarToke::Segno, ESkoarToke::Quavers,
                      ESkoarToke::Volta, ESkoarToke::QuindicesimaB, ESkoarToke::DalSegno, ESkoarToke::SkoarpionStart,
                      ESkoarToke::Eighths, ESkoarToke::Portamento, ESkoarToke::DynSFZ, ESkoarToke::Carrot,
                      ESkoarToke::Loco, ESkoarToke::PedalDown, ESkoarToke::Symbol, ESkoarToke::Comment,
                      ESkoarToke::True, ESkoarToke::Meter, ESkoarToke::LoopS, ESkoarToke::DynFP};

    // skoarpion
    desirables[27] = {ESkoarToke::SkoarpionStart};

    // opt_arg_spec
    desirables[28] = {ESkoarToke::ArgSpec};

    // skrp_lines
    desirables[29] = {ESkoarToke::Voice, ESkoarToke::Newline, ESkoarToke::DynForte, ESkoarToke::Bars,
                      ESkoarToke::Quarters, ESkoarToke::LWing, ESkoarToke::Crap, ESkoarToke::Fine,
                      ESkoarToke::String, ESkoarToke::Int, ESkoarToke::CondS, ESkoarToke::HashLevel,
                      ESkoarToke::OttavaB, ESkoarToke::Float, ESkoarToke::OttavaA, ESkoarToke::ListS,
                      ESkoarToke::PedalUp, ESkoarToke::DaCapo, ESkoarToke::Crotchets, ESkoarToke::SkoarpionEnd,
                      ESkoarToke::QuindicesimaA, ESkoarToke::Fairy, ESkoarToke::Caesura, ESkoarToke::DynPiano,
                      ESkoarToke::Slash, ESkoarToke::Rep, ESkoarToke::Tuplet, ESkoarToke::Deref,
                      ESkoarToke::Freq, ESkoarToke::Coda, ESkoarToke::NamedNoat, ESkoarToke::False,
                      ESkoarToke::Choard, ESkoarToke::OctaveShift, ESkoarToke::Segno, ESkoarToke::Quavers,
                      ESkoarToke::Volta, ESkoarToke::QuindicesimaB, ESkoarToke::DalSegno, ESkoarToke::SkoarpionStart,
                      ESkoarToke::Eighths, ESkoarToke::Portamento, ESkoarToke::DynSFZ, ESkoarToke::Carrot,
                      ESkoarToke::Loco, ESkoarToke::PedalDown, ESkoarToke::Symbol, ESkoarToke::Comment,
                      ESkoarToke::True, ESkoarToke::Meter, ESkoarToke::LoopS, ESkoarToke::DynFP};

    // skrp_moar_lines
    desirables[30] = {ESkoarToke::Newline};

    // listy_suffix
    desirables[31] = {ESkoarToke::DynForte, ESkoarToke::LWing, ESkoarToke::Crap, ESkoarToke::String,
                      ESkoarToke::Int, ESkoarToke::CondS, ESkoarToke::HashLevel, ESkoarToke::OttavaB,
                      ESkoarToke::Float, ESkoarToke::OttavaA, ESkoarToke::ListS, ESkoarToke::PedalUp,
                      ESkoarToke::QuindicesimaA, ESkoarToke::Fairy, ESkoarToke::Caesura, ESkoarToke::DynPiano,
                      ESkoarToke::Rep, ESkoarToke::Tuplet, ESkoarToke::Deref, ESkoarToke::Freq,
                      ESkoarToke::NamedNoat, ESkoarToke::False, ESkoarToke::Choard, ESkoarToke::OctaveShift,
                      ESkoarToke::QuindicesimaB, ESkoarToke::SkoarpionStart, ESkoarToke::Portamento, ESkoarToke::DynSFZ,
                      ESkoarToke::Carrot, ESkoarToke::Loco, ESkoarToke::PedalDown, ESkoarToke::Symbol,
                      ESkoarToke::True, ESkoarToke::LoopS, ESkoarToke::DynFP};
    desirables[32] = {ESkoarToke::ListE};

    // listy
    desirables[33] = {ESkoarToke::ListS};

    // listy_entries
    desirables[34] = {ESkoarToke::DynForte, ESkoarToke::LWing, ESkoarToke::Crap, ESkoarToke::String,
                      ESkoarToke::Int, ESkoarToke::CondS, ESkoarToke::HashLevel, ESkoarToke::OttavaB,
                      ESkoarToke::Float, ESkoarToke::OttavaA, ESkoarToke::ListS, ESkoarToke::PedalUp,
                      ESkoarToke::QuindicesimaA, ESkoarToke::Fairy, ESkoarToke::Caesura, ESkoarToke::DynPiano,
                      ESkoarToke::Rep, ESkoarToke::Tuplet, ESkoarToke::Deref, ESkoarToke::Freq,
                      ESkoarToke::NamedNoat, ESkoarToke::False, ESkoarToke::Choard, ESkoarToke::OctaveShift,
                      ESkoarToke::QuindicesimaB, ESkoarToke::SkoarpionStart, ESkoarToke::Portamento, ESkoarToke::DynSFZ,
                      ESkoarToke::Carrot, ESkoarToke::Loco, ESkoarToke::PedalDown, ESkoarToke::Symbol,
                      ESkoarToke::True, ESkoarToke::LoopS, ESkoarToke::DynFP};

    // moar_listy_entries
    desirables[35] = {ESkoarToke::ListSep};
    desirables[36] = {ESkoarToke::Newline};

    // coda
    desirables[37] = {ESkoarToke::Coda};

    // optional_al_coda
    desirables[38] = {ESkoarToke::AlCoda};

    // al_x
    desirables[39] = {ESkoarToke::AlCoda};
    desirables[40] = {ESkoarToke::AlSegno};
    desirables[41] = {ESkoarToke::AlFine};

    // dynamic
    desirables[42] = {ESkoarToke::DynPiano};
    desirables[43] = {ESkoarToke::DynForte};
    desirables[44] = {ESkoarToke::DynSFZ};
    desirables[45] = {ESkoarToke::DynFP};

    // musical_keyword
    desirables[46] = {ESkoarToke::DynFP, ESkoarToke::DynSFZ, ESkoarToke::DynForte, ESkoarToke::DynPiano};
    desirables[47] = {ESkoarToke::Loco, ESkoarToke::QuindicesimaA, ESkoarToke::OttavaA, ESkoarToke::OctaveShift,
                      ESkoarToke::QuindicesimaB, ESkoarToke::OttavaB};
    desirables[48] = {ESkoarToke::PedalDown, ESkoarToke::PedalUp};
    desirables[49] = {ESkoarToke::Portamento, ESkoarToke::Carrot, ESkoarToke::Rep};

    // ottavas
    desirables[50] = {ESkoarToke::OctaveShift};
    desirables[51] = {ESkoarToke::OttavaA};
    desirables[52] = {ESkoarToke::OttavaB};
    desirables[53] = {ESkoarToke::QuindicesimaA};
    desirables[54] = {ESkoarToke::QuindicesimaB};
    desirables[55] = {ESkoarToke::Loco};

    // pedally
    desirables[56] = {ESkoarToke::PedalDown};
    desirables[57] = {ESkoarToke::PedalUp};

    // musical_keyword_misc
    desirables[58] = {ESkoarToke::Rep};
    desirables[59] = {ESkoarToke::Portamento};
    desirables[60] = {ESkoarToke::Carrot};

    // cthulhu
    desirables[61] = {ESkoarToke::LWing};

    // nouny
    desirables[62] = {ESkoarToke::LWing};
    desirables[63] = {ESkoarToke::CondS};
    desirables[64] = {ESkoarToke::LoopS};
    desirables[65] = {ESkoarToke::Float, ESkoarToke::Tuplet, ESkoarToke::Freq, ESkoarToke::NamedNoat,
                      ESkoarToke::Crap, ESkoarToke::String, ESkoarToke::Fairy, ESkoarToke::Int,
                      ESkoarToke::False, ESkoarToke::Choard, ESkoarToke::Caesura, ESkoarToke::Symbol,
                      ESkoarToke::HashLevel, ESkoarToke::True};
    desirables[66] = {ESkoarToke::OttavaA, ESkoarToke::Portamento, ESkoarToke::DynSFZ, ESkoarToke::DynForte,
                      ESkoarToke::PedalUp, ESkoarToke::Carrot, ESkoarToke::Loco, ESkoarToke::QuindicesimaA,
                      ESkoarToke::PedalDown, ESkoarToke::DynPiano, ESkoarToke::OctaveShift, ESkoarToke::Rep,
                      ESkoarToke::QuindicesimaB, ESkoarToke::OttavaB, ESkoarToke::DynFP};
    desirables[67] = {ESkoarToke::ListS};
    desirables[68] = {ESkoarToke::Deref};
    desirables[69] = {ESkoarToke::SkoarpionStart};

    // conditional
    desirables[70] = {ESkoarToke::CondS};

    // loop
    desirables[71] = {ESkoarToke::LoopS};

    // nouny_literal
    desirables[72] = {ESkoarToke::Tuplet};
    desirables[73] = {ESkoarToke::Caesura};
    desirables[74] = {ESkoarToke::Freq};
    desirables[75] = {ESkoarToke::Int};
    desirables[76] = {ESkoarToke::Float};
    desirables[77] = {ESkoarToke::String};
    desirables[78] = {ESkoarToke::Choard};
    desirables[79] = {ESkoarToke::NamedNoat};
    desirables[80] = {ESkoarToke::Symbol};
    desirables[81] = {ESkoarToke::Fairy};
    desirables[82] = {ESkoarToke::HashLevel};
    desirables[83] = {ESkoarToke::False};
    desirables[84] = {ESkoarToke::True};
    desirables[85] = {ESkoarToke::Crap};

    // deref
    desirables[86] = {ESkoarToke::Deref};

    // deref_prime
    desirables[87] = {ESkoarToke::MsgNameWithArgs};
    desirables[88] = {ESkoarToke::MsgName};

    // msgable
    desirables[89] = {ESkoarToke::DynForte, ESkoarToke::LWing, ESkoarToke::Crap, ESkoarToke::String,
                      ESkoarToke::Int, ESkoarToke::CondS, ESkoarToke::HashLevel, ESkoarToke::OttavaB,
                      ESkoarToke::Float, ESkoarToke::OttavaA, ESkoarToke::ListS, ESkoarToke::PedalUp,
                      ESkoarToke::QuindicesimaA, ESkoarToke::Fairy, ESkoarToke::Caesura, ESkoarToke::DynPiano,
                      ESkoarToke::Rep, ESkoarToke::Tuplet, ESkoarToke::Deref, ESkoarToke::Freq,
                      ESkoarToke::NamedNoat, ESkoarToke::False, ESkoarToke::Choard, ESkoarToke::OctaveShift,
                      ESkoarToke::QuindicesimaB, ESkoarToke::SkoarpionStart, ESkoarToke::Portamento, ESkoarToke::DynSFZ,
                      ESkoarToke::Carrot, ESkoarToke::Loco, ESkoarToke::PedalDown, ESkoarToke::Symbol,
                      ESkoarToke::True, ESkoarToke::LoopS, ESkoarToke::DynFP};

    // expr_prime
    desirables[90] = {ESkoarToke::AssOp};
    desirables[91] = {ESkoarToke::MathOp};
    desirables[92] = {ESkoarToke::BooleanOp};
    desirables[93] = {ESkoarToke::Times};

    // assignment
    desirables[94] = {ESkoarToke::AssOp};

    // math
    desirables[95] = {ESkoarToke::MathOp};

    // boolean
    desirables[96] = {ESkoarToke::BooleanOp};

    // times
    desirables[97] = {ESkoarToke::Times};

    // settable
    desirables[98] = {ESkoarToke::Caesura};
    desirables[99] = {ESkoarToke::Symbol};
    desirables[100] = {ESkoarToke::ListS};
    desirables[101] = {ESkoarToke::Quarters};
    desirables[102] = {ESkoarToke::Eighths};
    desirables[103] = {ESkoarToke::Fairy};

    // msg_chain_node
    desirables[104] = {ESkoarToke::MsgOp};

    // msg
    desirables[105] = {ESkoarToke::MsgNameWithArgs};
    desirables[106] = {ESkoarToke::MsgName};
    desirables[107] = {ESkoarToke::ListS};
    desirables[108] = {ESkoarToke::LoopS};

    // cthulhu_prime
    desirables[109] = {ESkoarToke::DynForte, ESkoarToke::LWing, ESkoarToke::Crap, ESkoarToke::String,
                      ESkoarToke::Int, ESkoarToke::CondS, ESkoarToke::HashLevel, ESkoarToke::OttavaB,
                      ESkoarToke::Float, ESkoarToke::OttavaA, ESkoarToke::ListS, ESkoarToke::PedalUp,
                      ESkoarToke::QuindicesimaA, ESkoarToke::Fairy, ESkoarToke::Caesura, ESkoarToke::DynPiano,
                      ESkoarToke::Rep, ESkoarToke::Tuplet, ESkoarToke::Deref, ESkoarToke::Freq,
                      ESkoarToke::NamedNoat, ESkoarToke::False, ESkoarToke::Choard, ESkoarToke::OctaveShift,
                      ESkoarToke::QuindicesimaB, ESkoarToke::SkoarpionStart, ESkoarToke::Portamento, ESkoarToke::DynSFZ,
                      ESkoarToke::Carrot, ESkoarToke::Loco, ESkoarToke::PedalDown, ESkoarToke::Symbol,
                      ESkoarToke::True, ESkoarToke::LoopS, ESkoarToke::DynFP};
    desirables[110] = {ESkoarToke::Nosey};

    // cond_ifs
    desirables[111] = {ESkoarToke::Voice, ESkoarToke::DynForte, ESkoarToke::LWing, ESkoarToke::Crap,
                      ESkoarToke::String, ESkoarToke::Int, ESkoarToke::CondS, ESkoarToke::HashLevel,
                      ESkoarToke::OttavaB, ESkoarToke::Float, ESkoarToke::OttavaA, ESkoarToke::ListS,
                      ESkoarToke::PedalUp, ESkoarToke::QuindicesimaA, ESkoarToke::Fairy, ESkoarToke::Caesura,
                      ESkoarToke::DynPiano, ESkoarToke::Rep, ESkoarToke::Tuplet, ESkoarToke::Deref,
                      ESkoarToke::Freq, ESkoarToke::NamedNoat, ESkoarToke::False, ESkoarToke::Choard,
                      ESkoarToke::OctaveShift, ESkoarToke::QuindicesimaB, ESkoarToke::SkoarpionStart, ESkoarToke::Portamento,
                      ESkoarToke::DynSFZ, ESkoarToke::Carrot, ESkoarToke::Loco, ESkoarToke::PedalDown,
                      ESkoarToke::Symbol, ESkoarToke::True, ESkoarToke::LoopS, ESkoarToke::DynFP};

    // cond_if
    desirables[112] = {ESkoarToke::Voice, ESkoarToke::DynForte, ESkoarToke::LWing, ESkoarToke::Crap,
                      ESkoarToke::String, ESkoarToke::Int, ESkoarToke::CondS, ESkoarToke::HashLevel,
                      ESkoarToke::OttavaB, ESkoarToke::Float, ESkoarToke::OttavaA, ESkoarToke::ListS,
                      ESkoarToke::PedalUp, ESkoarToke::QuindicesimaA, ESkoarToke::Fairy, ESkoarToke::Caesura,
                      ESkoarToke::DynPiano, ESkoarToke::Rep, ESkoarToke::Tuplet, ESkoarToke::Deref,
                      ESkoarToke::Freq, ESkoarToke::NamedNoat, ESkoarToke::False, ESkoarToke::Choard,
                      ESkoarToke::OctaveShift, ESkoarToke::QuindicesimaB, ESkoarToke::SkoarpionStart, ESkoarToke::Portamento,
                      ESkoarToke::DynSFZ, ESkoarToke::Carrot, ESkoarToke::Loco, ESkoarToke::PedalDown,
                      ESkoarToke::Symbol, ESkoarToke::True, ESkoarToke::LoopS, ESkoarToke::DynFP};

    // cond_ifs_suffix
    desirables[113] = {ESkoarToke::Newline};

    // if_body
    desirables[114] = {ESkoarToke::Newline, ESkoarToke::DynForte, ESkoarToke::Bars, ESkoarToke::Quarters,
                      ESkoarToke::LWing, ESkoarToke::Crap, ESkoarToke::Fine, ESkoarToke::String,
                      ESkoarToke::Int, ESkoarToke::CondS, ESkoarToke::HashLevel, ESkoarToke::OttavaB,
                      ESkoarToke::Float, ESkoarToke::OttavaA, ESkoarToke::ListS, ESkoarToke::CondE,
                      ESkoarToke::PedalUp, ESkoarToke::DaCapo, ESkoarToke::Crotchets, ESkoarToke::QuindicesimaA,
                      ESkoarToke::Fairy, ESkoarToke::Caesura, ESkoarToke::DynPiano, ESkoarToke::CondIf,
                      ESkoarToke::Slash, ESkoarToke::Rep, ESkoarToke::Tuplet, ESkoarToke::Deref,
                      ESkoarToke::Freq, ESkoarToke::Coda, ESkoarToke::NamedNoat, ESkoarToke::False,
                      ESkoarToke::Choard, ESkoarToke::OctaveShift, ESkoarToke::Segno, ESkoarToke::Quavers,
                      ESkoarToke::Volta, ESkoarToke::QuindicesimaB, ESkoarToke::DalSegno, ESkoarToke::SkoarpionStart,
                      ESkoarToke::Eighths, ESkoarToke::Portamento, ESkoarToke::DynSFZ, ESkoarToke::Carrot,
                      ESkoarToke::Loco, ESkoarToke::PedalDown, ESkoarToke::Symbol, ESkoarToke::Comment,
                      ESkoarToke::True, ESkoarToke::Meter, ESkoarToke::LoopS, ESkoarToke::DynFP};

    // cond_else
    desirables[115] = {ESkoarToke::CondIf};

    // loop_body
    desirables[116] = {ESkoarToke::DynForte, ESkoarToke::Bars, ESkoarToke::Quarters, ESkoarToke::LWing,
                      ESkoarToke::Crap, ESkoarToke::Fine, ESkoarToke::String, ESkoarToke::Int,
                      ESkoarToke::CondS, ESkoarToke::LoopE, ESkoarToke::HashLevel, ESkoarToke::OttavaB,
                      ESkoarToke::Float, ESkoarToke::OttavaA, ESkoarToke::ListS, ESkoarToke::LoopSep,
                      ESkoarToke::PedalUp, ESkoarToke::DaCapo, ESkoarToke::Crotchets, ESkoarToke::QuindicesimaA,
                      ESkoarToke::Fairy, ESkoarToke::Caesura, ESkoarToke::DynPiano, ESkoarToke::Slash,
                      ESkoarToke::Rep, ESkoarToke::Tuplet, ESkoarToke::Deref, ESkoarToke::Freq,
                      ESkoarToke::Coda, ESkoarToke::NamedNoat, ESkoarToke::False, ESkoarToke::Choard,
                      ESkoarToke::OctaveShift, ESkoarToke::Segno, ESkoarToke::Quavers, ESkoarToke::Volta,
                      ESkoarToke::QuindicesimaB, ESkoarToke::DalSegno, ESkoarToke::SkoarpionStart, ESkoarToke::Eighths,
                      ESkoarToke::Portamento, ESkoarToke::DynSFZ, ESkoarToke::Carrot, ESkoarToke::Loco,
                      ESkoarToke::PedalDown, ESkoarToke::Symbol, ESkoarToke::Comment, ESkoarToke::True,
                      ESkoarToke::Meter, ESkoarToke::LoopS, ESkoarToke::DynFP};

    // loop_condition
    desirables[117] = {ESkoarToke::LoopSep};
}


static SkoarStats skoarStats;

bool localCmp(const ESkoarToke::Kind &a, const ESkoarToke::Kind &b) {
    return skoarStats.tokeFreq[a] > skoarStats.tokeFreq[b]; 
}
    
void localSortDesirables() {
    for (int i = 0; i < 118; ++i) {
        skoarStats.desirables[i].sort(localCmp);    
    }
}

SkoarNoadPtr SkoarParser::branches(SkoarNoadPtr parent) {
    SkoarNoadPtr noad = parent;
    list<ESkoarToke::Kind>* desires = nullptr;

    if (++deep > 1000) {
        this->fail_too_deep(parent);
    }

    // branches -> branch branches
    desires = &skoarStats.desirables[0];
    if (toker->sees(desires) != nullptr) {
        SkoarNoadPtr toke_noad;
        noad->add_noad(this->branch(noad));
        this->branches(noad);
        --deep;
        return noad;
    }

    // <e>
    --deep;
    return noad;
}

SkoarNoadPtr SkoarParser::skoar(SkoarNoadPtr parent) {
    SkoarNoadPtr noad = SkoarNoad::New<ESkoarNoad::skoar>(wstring(L"skoar"), parent);
    list<ESkoarToke::Kind>* desires = nullptr;

    if (++deep > 1000) {
        this->fail_too_deep(parent);
    }

    try {
        // skoar -> branches
        desires = &skoarStats.desirables[1];
        if (toker->sees(desires) != nullptr) {
            SkoarNoadPtr toke_noad;
            this->branches(noad);
            --deep;
            return noad;
        }

        // Error State
        this->fail(noad);
        return nullptr;

    }
    catch (SkoarError &e) {
        this->toker_fail(e, noad);
    }
    return nullptr;
}

SkoarNoadPtr SkoarParser::branch(SkoarNoadPtr parent) {
    SkoarNoadPtr noad = SkoarNoad::New<ESkoarNoad::branch>(wstring(L"branch"), parent);
    list<ESkoarToke::Kind>* desires = nullptr;

    if (++deep > 1000) {
        this->fail_too_deep(parent);
    }

    // branch -> optional_voice phrases Newline
    desires = &skoarStats.desirables[2];
    if (toker->sees(desires) != nullptr) {
        SkoarNoadPtr toke_noad;
        this->optional_voice(noad);
        this->phrases(noad);
        skoarStats.tokeFreq[ESkoarToke::Newline] += 0.1f;
        toke_noad = SkoarNoad::New(wstring(L"Toke_Newline"), noad, toker->burn(ESkoarToke::Newline));
        noad->add_noad(toke_noad);
        --deep;
        return noad;
    }

    // Error State
    this->fail(noad);
    return nullptr;
}

SkoarNoadPtr SkoarParser::optional_voice(SkoarNoadPtr parent) {
    SkoarNoadPtr noad = parent;
    list<ESkoarToke::Kind>* desires = nullptr;

    if (++deep > 1000) {
        this->fail_too_deep(parent);
    }

    // optional_voice -> Voice
    desires = &skoarStats.desirables[3];
    if (toker->sees(desires) != nullptr) {
        SkoarNoadPtr toke_noad;
        skoarStats.tokeFreq[ESkoarToke::Voice] += 0.1f;
        toke_noad = SkoarNoad::New(wstring(L"Toke_Voice"), noad, toker->burn(ESkoarToke::Voice));
        noad->add_noad(toke_noad);
        --deep;
        return noad;
    }

    // <e>
    --deep;
    return noad;
}

SkoarNoadPtr SkoarParser::phrases(SkoarNoadPtr parent) {
    SkoarNoadPtr noad = parent;
    list<ESkoarToke::Kind>* desires = nullptr;

    if (++deep > 1000) {
        this->fail_too_deep(parent);
    }

    // phrases -> phrasey phrases
    desires = &skoarStats.desirables[4];
    if (toker->sees(desires) != nullptr) {
        SkoarNoadPtr toke_noad;
        this->phrasey(noad);
        this->phrases(noad);
        --deep;
        return noad;
    }

    // <e>
    --deep;
    return noad;
}

SkoarNoadPtr SkoarParser::phrasey(SkoarNoadPtr parent) {
    SkoarNoadPtr noad = parent;
    list<ESkoarToke::Kind>* desires = nullptr;

    if (++deep > 1000) {
        this->fail_too_deep(parent);
    }

    // phrasey -> Comment
    desires = &skoarStats.desirables[5];
    if (toker->sees(desires) != nullptr) {
        SkoarNoadPtr toke_noad;
        skoarStats.tokeFreq[ESkoarToke::Comment] += 0.1f;
        toke_noad = SkoarNoad::New(wstring(L"Toke_Comment"), noad, toker->burn(ESkoarToke::Comment));
        noad->add_noad(toke_noad);
        --deep;
        return noad;
    }

    // phrasey -> marker
    desires = &skoarStats.desirables[6];
    if (toker->sees(desires) != nullptr) {
        SkoarNoadPtr toke_noad;
        noad->add_noad(this->marker(noad));
        --deep;
        return noad;
    }

    // phrasey -> Meter
    desires = &skoarStats.desirables[7];
    if (toker->sees(desires) != nullptr) {
        SkoarNoadPtr toke_noad;
        skoarStats.tokeFreq[ESkoarToke::Meter] += 0.1f;
        toke_noad = SkoarNoad::New(wstring(L"Toke_Meter"), noad, toker->burn(ESkoarToke::Meter));
        noad->add_noad(toke_noad);
        --deep;
        return noad;
    }

    // phrasey -> expr
    desires = &skoarStats.desirables[8];
    if (toker->sees(desires) != nullptr) {
        SkoarNoadPtr toke_noad;
        noad->add_noad(this->expr(noad));
        --deep;
        return noad;
    }

    // phrasey -> dal_goto
    desires = &skoarStats.desirables[9];
    if (toker->sees(desires) != nullptr) {
        SkoarNoadPtr toke_noad;
        noad->add_noad(this->dal_goto(noad));
        --deep;
        return noad;
    }

    // phrasey -> beat
    desires = &skoarStats.desirables[10];
    if (toker->sees(desires) != nullptr) {
        SkoarNoadPtr toke_noad;
        noad->add_noad(this->beat(noad));
        --deep;
        return noad;
    }

    // Error State
    this->fail(noad);
    return nullptr;
}

SkoarNoadPtr SkoarParser::marker(SkoarNoadPtr parent) {
    SkoarNoadPtr noad = SkoarNoad::New<ESkoarNoad::marker>(wstring(L"marker"), parent);
    list<ESkoarToke::Kind>* desires = nullptr;

    if (++deep > 1000) {
        this->fail_too_deep(parent);
    }

    // marker -> Segno
    desires = &skoarStats.desirables[11];
    if (toker->sees(desires) != nullptr) {
        SkoarNoadPtr toke_noad;
        skoarStats.tokeFreq[ESkoarToke::Segno] += 0.1f;
        toke_noad = SkoarNoad::New(wstring(L"Toke_Segno"), noad, toker->burn(ESkoarToke::Segno));
        noad->add_noad(toke_noad);
        --deep;
        return noad;
    }

    // marker -> Fine
    desires = &skoarStats.desirables[12];
    if (toker->sees(desires) != nullptr) {
        SkoarNoadPtr toke_noad;
        skoarStats.tokeFreq[ESkoarToke::Fine] += 0.1f;
        toke_noad = SkoarNoad::New(wstring(L"Toke_Fine"), noad, toker->burn(ESkoarToke::Fine));
        noad->add_noad(toke_noad);
        --deep;
        return noad;
    }

    // marker -> coda
    desires = &skoarStats.desirables[13];
    if (toker->sees(desires) != nullptr) {
        SkoarNoadPtr toke_noad;
        noad->add_noad(this->coda(noad));
        --deep;
        return noad;
    }

    // marker -> Volta
    desires = &skoarStats.desirables[14];
    if (toker->sees(desires) != nullptr) {
        SkoarNoadPtr toke_noad;
        skoarStats.tokeFreq[ESkoarToke::Volta] += 0.1f;
        toke_noad = SkoarNoad::New(wstring(L"Toke_Volta"), noad, toker->burn(ESkoarToke::Volta));
        noad->add_noad(toke_noad);
        --deep;
        return noad;
    }

    // marker -> Bars
    desires = &skoarStats.desirables[15];
    if (toker->sees(desires) != nullptr) {
        SkoarNoadPtr toke_noad;
        skoarStats.tokeFreq[ESkoarToke::Bars] += 0.1f;
        toke_noad = SkoarNoad::New(wstring(L"Toke_Bars"), noad, toker->burn(ESkoarToke::Bars));
        noad->add_noad(toke_noad);
        --deep;
        return noad;
    }

    // Error State
    this->fail(noad);
    return nullptr;
}

SkoarNoadPtr SkoarParser::expr(SkoarNoadPtr parent) {
    SkoarNoadPtr noad = SkoarNoad::New<ESkoarNoad::expr>(wstring(L"expr"), parent);
    list<ESkoarToke::Kind>* desires = nullptr;

    if (++deep > 1000) {
        this->fail_too_deep(parent);
    }

    // expr -> msgable expr_prime
    desires = &skoarStats.desirables[16];
    if (toker->sees(desires) != nullptr) {
        SkoarNoadPtr toke_noad;
        noad->add_noad(this->msgable(noad));
        noad->add_noad(this->expr_prime(noad));
        --deep;
        return noad;
    }

    // Error State
    this->fail(noad);
    return nullptr;
}

SkoarNoadPtr SkoarParser::dal_goto(SkoarNoadPtr parent) {
    SkoarNoadPtr noad = SkoarNoad::New<ESkoarNoad::dal_goto>(wstring(L"dal_goto"), parent);
    list<ESkoarToke::Kind>* desires = nullptr;

    if (++deep > 1000) {
        this->fail_too_deep(parent);
    }

    // dal_goto -> DaCapo al_x
    desires = &skoarStats.desirables[17];
    if (toker->sees(desires) != nullptr) {
        SkoarNoadPtr toke_noad;
        skoarStats.tokeFreq[ESkoarToke::DaCapo] += 0.1f;
        toke_noad = SkoarNoad::New(wstring(L"Toke_DaCapo"), noad, toker->burn(ESkoarToke::DaCapo));
        noad->add_noad(toke_noad);
        noad->add_noad(this->al_x(noad));
        --deep;
        return noad;
    }

    // dal_goto -> DalSegno al_x
    desires = &skoarStats.desirables[18];
    if (toker->sees(desires) != nullptr) {
        SkoarNoadPtr toke_noad;
        skoarStats.tokeFreq[ESkoarToke::DalSegno] += 0.1f;
        toke_noad = SkoarNoad::New(wstring(L"Toke_DalSegno"), noad, toker->burn(ESkoarToke::DalSegno));
        noad->add_noad(toke_noad);
        noad->add_noad(this->al_x(noad));
        --deep;
        return noad;
    }

    // Error State
    this->fail(noad);
    return nullptr;
}

SkoarNoadPtr SkoarParser::beat(SkoarNoadPtr parent) {
    SkoarNoadPtr noad = SkoarNoad::New<ESkoarNoad::beat>(wstring(L"beat"), parent);
    list<ESkoarToke::Kind>* desires = nullptr;

    if (++deep > 1000) {
        this->fail_too_deep(parent);
    }

    // beat -> Crotchets
    desires = &skoarStats.desirables[19];
    if (toker->sees(desires) != nullptr) {
        SkoarNoadPtr toke_noad;
        skoarStats.tokeFreq[ESkoarToke::Crotchets] += 0.1f;
        toke_noad = SkoarNoad::New(wstring(L"Toke_Crotchets"), noad, toker->burn(ESkoarToke::Crotchets));
        noad->add_noad(toke_noad);
        --deep;
        return noad;
    }

    // beat -> Quavers
    desires = &skoarStats.desirables[20];
    if (toker->sees(desires) != nullptr) {
        SkoarNoadPtr toke_noad;
        skoarStats.tokeFreq[ESkoarToke::Quavers] += 0.1f;
        toke_noad = SkoarNoad::New(wstring(L"Toke_Quavers"), noad, toker->burn(ESkoarToke::Quavers));
        noad->add_noad(toke_noad);
        --deep;
        return noad;
    }

    // beat -> Quarters
    desires = &skoarStats.desirables[21];
    if (toker->sees(desires) != nullptr) {
        SkoarNoadPtr toke_noad;
        skoarStats.tokeFreq[ESkoarToke::Quarters] += 0.1f;
        toke_noad = SkoarNoad::New(wstring(L"Toke_Quarters"), noad, toker->burn(ESkoarToke::Quarters));
        noad->add_noad(toke_noad);
        --deep;
        return noad;
    }

    // beat -> Eighths
    desires = &skoarStats.desirables[22];
    if (toker->sees(desires) != nullptr) {
        SkoarNoadPtr toke_noad;
        skoarStats.tokeFreq[ESkoarToke::Eighths] += 0.1f;
        toke_noad = SkoarNoad::New(wstring(L"Toke_Eighths"), noad, toker->burn(ESkoarToke::Eighths));
        noad->add_noad(toke_noad);
        --deep;
        return noad;
    }

    // beat -> Slash
    desires = &skoarStats.desirables[23];
    if (toker->sees(desires) != nullptr) {
        SkoarNoadPtr toke_noad;
        skoarStats.tokeFreq[ESkoarToke::Slash] += 0.1f;
        toke_noad = SkoarNoad::New(wstring(L"Toke_Slash"), noad, toker->burn(ESkoarToke::Slash));
        noad->add_noad(toke_noad);
        --deep;
        return noad;
    }

    // Error State
    this->fail(noad);
    return nullptr;
}

SkoarNoadPtr SkoarParser::skrp_sig(SkoarNoadPtr parent) {
    SkoarNoadPtr noad = SkoarNoad::New<ESkoarNoad::skrp_sig>(wstring(L"skrp_sig"), parent);
    list<ESkoarToke::Kind>* desires = nullptr;

    if (++deep > 1000) {
        this->fail_too_deep(parent);
    }

    // skrp_sig -> ArgSpec SkoarpionSep
    desires = &skoarStats.desirables[24];
    if (toker->sees(desires) != nullptr) {
        SkoarNoadPtr toke_noad;
        skoarStats.tokeFreq[ESkoarToke::ArgSpec] += 0.1f;
        toke_noad = SkoarNoad::New(wstring(L"Toke_ArgSpec"), noad, toker->burn(ESkoarToke::ArgSpec));
        noad->add_noad(toke_noad);
        skoarStats.tokeFreq[ESkoarToke::SkoarpionSep] += 0.1f;
        toke_noad = SkoarNoad::New(wstring(L"Toke_SkoarpionSep"), noad, toker->burn(ESkoarToke::SkoarpionSep));
        noad->add_noad(toke_noad);
        --deep;
        return noad;
    }

    // skrp_sig -> SymbolName opt_arg_spec SkoarpionSep
    desires = &skoarStats.desirables[25];
    if (toker->sees(desires) != nullptr) {
        SkoarNoadPtr toke_noad;
        skoarStats.tokeFreq[ESkoarToke::SymbolName] += 0.1f;
        toke_noad = SkoarNoad::New(wstring(L"Toke_SymbolName"), noad, toker->burn(ESkoarToke::SymbolName));
        noad->add_noad(toke_noad);
        noad->add_noad(this->opt_arg_spec(noad));
        skoarStats.tokeFreq[ESkoarToke::SkoarpionSep] += 0.1f;
        toke_noad = SkoarNoad::New(wstring(L"Toke_SkoarpionSep"), noad, toker->burn(ESkoarToke::SkoarpionSep));
        noad->add_noad(toke_noad);
        --deep;
        return noad;
    }

    // <e>
    --deep;
    return noad;
}

SkoarNoadPtr SkoarParser::skrp_suffix(SkoarNoadPtr parent) {
    SkoarNoadPtr noad = SkoarNoad::New<ESkoarNoad::skrp_suffix>(wstring(L"skrp_suffix"), parent);
    list<ESkoarToke::Kind>* desires = nullptr;

    if (++deep > 1000) {
        this->fail_too_deep(parent);
    }

    // skrp_suffix -> skrp_lines SkoarpionEnd
    desires = &skoarStats.desirables[26];
    if (toker->sees(desires) != nullptr) {
        SkoarNoadPtr toke_noad;
        this->skrp_lines(noad);
        skoarStats.tokeFreq[ESkoarToke::SkoarpionEnd] += 0.1f;
        toke_noad = SkoarNoad::New(wstring(L"Toke_SkoarpionEnd"), noad, toker->burn(ESkoarToke::SkoarpionEnd));
        noad->add_noad(toke_noad);
        --deep;
        return noad;
    }

    // Error State
    this->fail(noad);
    return nullptr;
}

SkoarNoadPtr SkoarParser::skoarpion(SkoarNoadPtr parent) {
    SkoarNoadPtr noad = SkoarNoad::New<ESkoarNoad::skoarpion>(wstring(L"skoarpion"), parent);
    list<ESkoarToke::Kind>* desires = nullptr;

    if (++deep > 1000) {
        this->fail_too_deep(parent);
    }

    // skoarpion -> SkoarpionStart skrp_sig skrp_suffix
    desires = &skoarStats.desirables[27];
    if (toker->sees(desires) != nullptr) {
        SkoarNoadPtr toke_noad;
        skoarStats.tokeFreq[ESkoarToke::SkoarpionStart] += 0.1f;
        toke_noad = SkoarNoad::New(wstring(L"Toke_SkoarpionStart"), noad, toker->burn(ESkoarToke::SkoarpionStart));
        noad->add_noad(toke_noad);
        noad->add_noad(this->skrp_sig(noad));
        noad->add_noad(this->skrp_suffix(noad));
        --deep;
        return noad;
    }

    // Error State
    this->fail(noad);
    return nullptr;
}

SkoarNoadPtr SkoarParser::opt_arg_spec(SkoarNoadPtr parent) {
    SkoarNoadPtr noad = SkoarNoad::New<ESkoarNoad::opt_arg_spec>(wstring(L"opt_arg_spec"), parent);
    list<ESkoarToke::Kind>* desires = nullptr;

    if (++deep > 1000) {
        this->fail_too_deep(parent);
    }

    // opt_arg_spec -> ArgSpec
    desires = &skoarStats.desirables[28];
    if (toker->sees(desires) != nullptr) {
        SkoarNoadPtr toke_noad;
        skoarStats.tokeFreq[ESkoarToke::ArgSpec] += 0.1f;
        toke_noad = SkoarNoad::New(wstring(L"Toke_ArgSpec"), noad, toker->burn(ESkoarToke::ArgSpec));
        noad->add_noad(toke_noad);
        --deep;
        return noad;
    }

    // <e>
    --deep;
    return noad;
}

SkoarNoadPtr SkoarParser::skrp_lines(SkoarNoadPtr parent) {
    SkoarNoadPtr noad = parent;
    list<ESkoarToke::Kind>* desires = nullptr;

    if (++deep > 1000) {
        this->fail_too_deep(parent);
    }

    // skrp_lines -> optional_voice phrases skrp_moar_lines
    desires = &skoarStats.desirables[29];
    if (toker->sees(desires) != nullptr) {
        SkoarNoadPtr toke_noad;
        this->optional_voice(noad);
        this->phrases(noad);
        this->skrp_moar_lines(noad);
        --deep;
        return noad;
    }

    // Error State
    this->fail(noad);
    return nullptr;
}

SkoarNoadPtr SkoarParser::skrp_moar_lines(SkoarNoadPtr parent) {
    SkoarNoadPtr noad = parent;
    list<ESkoarToke::Kind>* desires = nullptr;

    if (++deep > 1000) {
        this->fail_too_deep(parent);
    }

    // skrp_moar_lines -> Newline skrp_lines
    desires = &skoarStats.desirables[30];
    if (toker->sees(desires) != nullptr) {
        SkoarNoadPtr toke_noad;
        skoarStats.tokeFreq[ESkoarToke::Newline] += 0.1f;
        toke_noad = SkoarNoad::New(wstring(L"Toke_Newline"), noad, toker->burn(ESkoarToke::Newline));
        noad->add_noad(toke_noad);
        this->skrp_lines(noad);
        --deep;
        return noad;
    }

    // <e>
    --deep;
    return noad;
}

SkoarNoadPtr SkoarParser::listy_suffix(SkoarNoadPtr parent) {
    SkoarNoadPtr noad = parent;
    list<ESkoarToke::Kind>* desires = nullptr;

    if (++deep > 1000) {
        this->fail_too_deep(parent);
    }

    // listy_suffix -> listy_entries ListE
    desires = &skoarStats.desirables[31];
    if (toker->sees(desires) != nullptr) {
        SkoarNoadPtr toke_noad;
        this->listy_entries(noad);
        skoarStats.tokeFreq[ESkoarToke::ListE] += 0.1f;
        toke_noad = SkoarNoad::New(wstring(L"Toke_ListE"), noad, toker->burn(ESkoarToke::ListE));
        noad->add_noad(toke_noad);
        --deep;
        return noad;
    }

    // listy_suffix -> ListE
    desires = &skoarStats.desirables[32];
    if (toker->sees(desires) != nullptr) {
        SkoarNoadPtr toke_noad;
        skoarStats.tokeFreq[ESkoarToke::ListE] += 0.1f;
        toke_noad = SkoarNoad::New(wstring(L"Toke_ListE"), noad, toker->burn(ESkoarToke::ListE));
        noad->add_noad(toke_noad);
        --deep;
        return noad;
    }

    // Error State
    this->fail(noad);
    return nullptr;
}

SkoarNoadPtr SkoarParser::listy(SkoarNoadPtr parent) {
    SkoarNoadPtr noad = SkoarNoad::New<ESkoarNoad::listy>(wstring(L"listy"), parent);
    list<ESkoarToke::Kind>* desires = nullptr;

    if (++deep > 1000) {
        this->fail_too_deep(parent);
    }

    // listy -> ListS listy_suffix
    desires = &skoarStats.desirables[33];
    if (toker->sees(desires) != nullptr) {
        SkoarNoadPtr toke_noad;
        skoarStats.tokeFreq[ESkoarToke::ListS] += 0.1f;
        toke_noad = SkoarNoad::New(wstring(L"Toke_ListS"), noad, toker->burn(ESkoarToke::ListS));
        noad->add_noad(toke_noad);
        this->listy_suffix(noad);
        --deep;
        return noad;
    }

    // Error State
    this->fail(noad);
    return nullptr;
}

SkoarNoadPtr SkoarParser::listy_entries(SkoarNoadPtr parent) {
    SkoarNoadPtr noad = parent;
    list<ESkoarToke::Kind>* desires = nullptr;

    if (++deep > 1000) {
        this->fail_too_deep(parent);
    }

    // listy_entries -> expr moar_listy_entries
    desires = &skoarStats.desirables[34];
    if (toker->sees(desires) != nullptr) {
        SkoarNoadPtr toke_noad;
        noad->add_noad(this->expr(noad));
        this->moar_listy_entries(noad);
        --deep;
        return noad;
    }

    // Error State
    this->fail(noad);
    return nullptr;
}

SkoarNoadPtr SkoarParser::moar_listy_entries(SkoarNoadPtr parent) {
    SkoarNoadPtr noad = parent;
    list<ESkoarToke::Kind>* desires = nullptr;

    if (++deep > 1000) {
        this->fail_too_deep(parent);
    }

    // moar_listy_entries -> ListSep listy_entries
    desires = &skoarStats.desirables[35];
    if (toker->sees(desires) != nullptr) {
        SkoarNoadPtr toke_noad;
        skoarStats.tokeFreq[ESkoarToke::ListSep] += 0.1f;
        toke_noad = SkoarNoad::New(wstring(L"Toke_ListSep"), noad, toker->burn(ESkoarToke::ListSep));
        noad->add_noad(toke_noad);
        this->listy_entries(noad);
        --deep;
        return noad;
    }

    // moar_listy_entries -> Newline
    desires = &skoarStats.desirables[36];
    if (toker->sees(desires) != nullptr) {
        SkoarNoadPtr toke_noad;
        skoarStats.tokeFreq[ESkoarToke::Newline] += 0.1f;
        toke_noad = SkoarNoad::New(wstring(L"Toke_Newline"), noad, toker->burn(ESkoarToke::Newline));
        noad->add_noad(toke_noad);
        --deep;
        return noad;
    }

    // <e>
    --deep;
    return noad;
}

SkoarNoadPtr SkoarParser::coda(SkoarNoadPtr parent) {
    SkoarNoadPtr noad = SkoarNoad::New<ESkoarNoad::coda>(wstring(L"coda"), parent);
    list<ESkoarToke::Kind>* desires = nullptr;

    if (++deep > 1000) {
        this->fail_too_deep(parent);
    }

    // coda -> Coda optional_al_coda
    desires = &skoarStats.desirables[37];
    if (toker->sees(desires) != nullptr) {
        SkoarNoadPtr toke_noad;
        skoarStats.tokeFreq[ESkoarToke::Coda] += 0.1f;
        toke_noad = SkoarNoad::New(wstring(L"Toke_Coda"), noad, toker->burn(ESkoarToke::Coda));
        noad->add_noad(toke_noad);
        noad->add_noad(this->optional_al_coda(noad));
        --deep;
        return noad;
    }

    // Error State
    this->fail(noad);
    return nullptr;
}

SkoarNoadPtr SkoarParser::optional_al_coda(SkoarNoadPtr parent) {
    SkoarNoadPtr noad = SkoarNoad::New<ESkoarNoad::optional_al_coda>(wstring(L"optional_al_coda"), parent);
    list<ESkoarToke::Kind>* desires = nullptr;

    if (++deep > 1000) {
        this->fail_too_deep(parent);
    }

    // optional_al_coda -> AlCoda
    desires = &skoarStats.desirables[38];
    if (toker->sees(desires) != nullptr) {
        SkoarNoadPtr toke_noad;
        skoarStats.tokeFreq[ESkoarToke::AlCoda] += 0.1f;
        toke_noad = SkoarNoad::New(wstring(L"Toke_AlCoda"), noad, toker->burn(ESkoarToke::AlCoda));
        noad->add_noad(toke_noad);
        --deep;
        return noad;
    }

    // <e>
    --deep;
    return noad;
}

SkoarNoadPtr SkoarParser::al_x(SkoarNoadPtr parent) {
    SkoarNoadPtr noad = SkoarNoad::New<ESkoarNoad::al_x>(wstring(L"al_x"), parent);
    list<ESkoarToke::Kind>* desires = nullptr;

    if (++deep > 1000) {
        this->fail_too_deep(parent);
    }

    // al_x -> AlCoda
    desires = &skoarStats.desirables[39];
    if (toker->sees(desires) != nullptr) {
        SkoarNoadPtr toke_noad;
        skoarStats.tokeFreq[ESkoarToke::AlCoda] += 0.1f;
        toke_noad = SkoarNoad::New(wstring(L"Toke_AlCoda"), noad, toker->burn(ESkoarToke::AlCoda));
        noad->add_noad(toke_noad);
        --deep;
        return noad;
    }

    // al_x -> AlSegno
    desires = &skoarStats.desirables[40];
    if (toker->sees(desires) != nullptr) {
        SkoarNoadPtr toke_noad;
        skoarStats.tokeFreq[ESkoarToke::AlSegno] += 0.1f;
        toke_noad = SkoarNoad::New(wstring(L"Toke_AlSegno"), noad, toker->burn(ESkoarToke::AlSegno));
        noad->add_noad(toke_noad);
        --deep;
        return noad;
    }

    // al_x -> AlFine
    desires = &skoarStats.desirables[41];
    if (toker->sees(desires) != nullptr) {
        SkoarNoadPtr toke_noad;
        skoarStats.tokeFreq[ESkoarToke::AlFine] += 0.1f;
        toke_noad = SkoarNoad::New(wstring(L"Toke_AlFine"), noad, toker->burn(ESkoarToke::AlFine));
        noad->add_noad(toke_noad);
        --deep;
        return noad;
    }

    // <e>
    --deep;
    return noad;
}

SkoarNoadPtr SkoarParser::dynamic(SkoarNoadPtr parent) {
    SkoarNoadPtr noad = SkoarNoad::New<ESkoarNoad::dynamic>(wstring(L"dynamic"), parent);
    list<ESkoarToke::Kind>* desires = nullptr;

    if (++deep > 1000) {
        this->fail_too_deep(parent);
    }

    // dynamic -> DynPiano
    desires = &skoarStats.desirables[42];
    if (toker->sees(desires) != nullptr) {
        SkoarNoadPtr toke_noad;
        skoarStats.tokeFreq[ESkoarToke::DynPiano] += 0.1f;
        toke_noad = SkoarNoad::New(wstring(L"Toke_DynPiano"), noad, toker->burn(ESkoarToke::DynPiano));
        noad->add_noad(toke_noad);
        --deep;
        return noad;
    }

    // dynamic -> DynForte
    desires = &skoarStats.desirables[43];
    if (toker->sees(desires) != nullptr) {
        SkoarNoadPtr toke_noad;
        skoarStats.tokeFreq[ESkoarToke::DynForte] += 0.1f;
        toke_noad = SkoarNoad::New(wstring(L"Toke_DynForte"), noad, toker->burn(ESkoarToke::DynForte));
        noad->add_noad(toke_noad);
        --deep;
        return noad;
    }

    // dynamic -> DynSFZ
    desires = &skoarStats.desirables[44];
    if (toker->sees(desires) != nullptr) {
        SkoarNoadPtr toke_noad;
        skoarStats.tokeFreq[ESkoarToke::DynSFZ] += 0.1f;
        toke_noad = SkoarNoad::New(wstring(L"Toke_DynSFZ"), noad, toker->burn(ESkoarToke::DynSFZ));
        noad->add_noad(toke_noad);
        --deep;
        return noad;
    }

    // dynamic -> DynFP
    desires = &skoarStats.desirables[45];
    if (toker->sees(desires) != nullptr) {
        SkoarNoadPtr toke_noad;
        skoarStats.tokeFreq[ESkoarToke::DynFP] += 0.1f;
        toke_noad = SkoarNoad::New(wstring(L"Toke_DynFP"), noad, toker->burn(ESkoarToke::DynFP));
        noad->add_noad(toke_noad);
        --deep;
        return noad;
    }

    // Error State
    this->fail(noad);
    return nullptr;
}

SkoarNoadPtr SkoarParser::musical_keyword(SkoarNoadPtr parent) {
    SkoarNoadPtr noad = SkoarNoad::New<ESkoarNoad::musical_keyword>(wstring(L"musical_keyword"), parent);
    list<ESkoarToke::Kind>* desires = nullptr;

    if (++deep > 1000) {
        this->fail_too_deep(parent);
    }

    // musical_keyword -> dynamic
    desires = &skoarStats.desirables[46];
    if (toker->sees(desires) != nullptr) {
        SkoarNoadPtr toke_noad;
        noad->add_noad(this->dynamic(noad));
        --deep;
        return noad;
    }

    // musical_keyword -> ottavas
    desires = &skoarStats.desirables[47];
    if (toker->sees(desires) != nullptr) {
        SkoarNoadPtr toke_noad;
        noad->add_noad(this->ottavas(noad));
        --deep;
        return noad;
    }

    // musical_keyword -> pedally
    desires = &skoarStats.desirables[48];
    if (toker->sees(desires) != nullptr) {
        SkoarNoadPtr toke_noad;
        noad->add_noad(this->pedally(noad));
        --deep;
        return noad;
    }

    // musical_keyword -> musical_keyword_misc
    desires = &skoarStats.desirables[49];
    if (toker->sees(desires) != nullptr) {
        SkoarNoadPtr toke_noad;
        noad->add_noad(this->musical_keyword_misc(noad));
        --deep;
        return noad;
    }

    // Error State
    this->fail(noad);
    return nullptr;
}

SkoarNoadPtr SkoarParser::ottavas(SkoarNoadPtr parent) {
    SkoarNoadPtr noad = SkoarNoad::New<ESkoarNoad::ottavas>(wstring(L"ottavas"), parent);
    list<ESkoarToke::Kind>* desires = nullptr;

    if (++deep > 1000) {
        this->fail_too_deep(parent);
    }

    // ottavas -> OctaveShift
    desires = &skoarStats.desirables[50];
    if (toker->sees(desires) != nullptr) {
        SkoarNoadPtr toke_noad;
        skoarStats.tokeFreq[ESkoarToke::OctaveShift] += 0.1f;
        toke_noad = SkoarNoad::New(wstring(L"Toke_OctaveShift"), noad, toker->burn(ESkoarToke::OctaveShift));
        noad->add_noad(toke_noad);
        --deep;
        return noad;
    }

    // ottavas -> OttavaA
    desires = &skoarStats.desirables[51];
    if (toker->sees(desires) != nullptr) {
        SkoarNoadPtr toke_noad;
        skoarStats.tokeFreq[ESkoarToke::OttavaA] += 0.1f;
        toke_noad = SkoarNoad::New(wstring(L"Toke_OttavaA"), noad, toker->burn(ESkoarToke::OttavaA));
        noad->add_noad(toke_noad);
        --deep;
        return noad;
    }

    // ottavas -> OttavaB
    desires = &skoarStats.desirables[52];
    if (toker->sees(desires) != nullptr) {
        SkoarNoadPtr toke_noad;
        skoarStats.tokeFreq[ESkoarToke::OttavaB] += 0.1f;
        toke_noad = SkoarNoad::New(wstring(L"Toke_OttavaB"), noad, toker->burn(ESkoarToke::OttavaB));
        noad->add_noad(toke_noad);
        --deep;
        return noad;
    }

    // ottavas -> QuindicesimaA
    desires = &skoarStats.desirables[53];
    if (toker->sees(desires) != nullptr) {
        SkoarNoadPtr toke_noad;
        skoarStats.tokeFreq[ESkoarToke::QuindicesimaA] += 0.1f;
        toke_noad = SkoarNoad::New(wstring(L"Toke_QuindicesimaA"), noad, toker->burn(ESkoarToke::QuindicesimaA));
        noad->add_noad(toke_noad);
        --deep;
        return noad;
    }

    // ottavas -> QuindicesimaB
    desires = &skoarStats.desirables[54];
    if (toker->sees(desires) != nullptr) {
        SkoarNoadPtr toke_noad;
        skoarStats.tokeFreq[ESkoarToke::QuindicesimaB] += 0.1f;
        toke_noad = SkoarNoad::New(wstring(L"Toke_QuindicesimaB"), noad, toker->burn(ESkoarToke::QuindicesimaB));
        noad->add_noad(toke_noad);
        --deep;
        return noad;
    }

    // ottavas -> Loco
    desires = &skoarStats.desirables[55];
    if (toker->sees(desires) != nullptr) {
        SkoarNoadPtr toke_noad;
        skoarStats.tokeFreq[ESkoarToke::Loco] += 0.1f;
        toke_noad = SkoarNoad::New(wstring(L"Toke_Loco"), noad, toker->burn(ESkoarToke::Loco));
        noad->add_noad(toke_noad);
        --deep;
        return noad;
    }

    // Error State
    this->fail(noad);
    return nullptr;
}

SkoarNoadPtr SkoarParser::pedally(SkoarNoadPtr parent) {
    SkoarNoadPtr noad = SkoarNoad::New<ESkoarNoad::pedally>(wstring(L"pedally"), parent);
    list<ESkoarToke::Kind>* desires = nullptr;

    if (++deep > 1000) {
        this->fail_too_deep(parent);
    }

    // pedally -> PedalDown
    desires = &skoarStats.desirables[56];
    if (toker->sees(desires) != nullptr) {
        SkoarNoadPtr toke_noad;
        skoarStats.tokeFreq[ESkoarToke::PedalDown] += 0.1f;
        toke_noad = SkoarNoad::New(wstring(L"Toke_PedalDown"), noad, toker->burn(ESkoarToke::PedalDown));
        noad->add_noad(toke_noad);
        --deep;
        return noad;
    }

    // pedally -> PedalUp
    desires = &skoarStats.desirables[57];
    if (toker->sees(desires) != nullptr) {
        SkoarNoadPtr toke_noad;
        skoarStats.tokeFreq[ESkoarToke::PedalUp] += 0.1f;
        toke_noad = SkoarNoad::New(wstring(L"Toke_PedalUp"), noad, toker->burn(ESkoarToke::PedalUp));
        noad->add_noad(toke_noad);
        --deep;
        return noad;
    }

    // Error State
    this->fail(noad);
    return nullptr;
}

SkoarNoadPtr SkoarParser::musical_keyword_misc(SkoarNoadPtr parent) {
    SkoarNoadPtr noad = SkoarNoad::New<ESkoarNoad::musical_keyword_misc>(wstring(L"musical_keyword_misc"), parent);
    list<ESkoarToke::Kind>* desires = nullptr;

    if (++deep > 1000) {
        this->fail_too_deep(parent);
    }

    // musical_keyword_misc -> Rep
    desires = &skoarStats.desirables[58];
    if (toker->sees(desires) != nullptr) {
        SkoarNoadPtr toke_noad;
        skoarStats.tokeFreq[ESkoarToke::Rep] += 0.1f;
        toke_noad = SkoarNoad::New(wstring(L"Toke_Rep"), noad, toker->burn(ESkoarToke::Rep));
        noad->add_noad(toke_noad);
        --deep;
        return noad;
    }

    // musical_keyword_misc -> Portamento
    desires = &skoarStats.desirables[59];
    if (toker->sees(desires) != nullptr) {
        SkoarNoadPtr toke_noad;
        skoarStats.tokeFreq[ESkoarToke::Portamento] += 0.1f;
        toke_noad = SkoarNoad::New(wstring(L"Toke_Portamento"), noad, toker->burn(ESkoarToke::Portamento));
        noad->add_noad(toke_noad);
        --deep;
        return noad;
    }

    // musical_keyword_misc -> Carrot
    desires = &skoarStats.desirables[60];
    if (toker->sees(desires) != nullptr) {
        SkoarNoadPtr toke_noad;
        skoarStats.tokeFreq[ESkoarToke::Carrot] += 0.1f;
        toke_noad = SkoarNoad::New(wstring(L"Toke_Carrot"), noad, toker->burn(ESkoarToke::Carrot));
        noad->add_noad(toke_noad);
        --deep;
        return noad;
    }

    // Error State
    this->fail(noad);
    return nullptr;
}

SkoarNoadPtr SkoarParser::cthulhu(SkoarNoadPtr parent) {
    SkoarNoadPtr noad = SkoarNoad::New<ESkoarNoad::cthulhu>(wstring(L"cthulhu"), parent);
    list<ESkoarToke::Kind>* desires = nullptr;

    if (++deep > 1000) {
        this->fail_too_deep(parent);
    }

    // cthulhu -> LWing Semicolon cthulhu_prime
    desires = &skoarStats.desirables[61];
    if (toker->sees(desires) != nullptr) {
        SkoarNoadPtr toke_noad;
        skoarStats.tokeFreq[ESkoarToke::LWing] += 0.1f;
        toke_noad = SkoarNoad::New(wstring(L"Toke_LWing"), noad, toker->burn(ESkoarToke::LWing));
        noad->add_noad(toke_noad);
        skoarStats.tokeFreq[ESkoarToke::Semicolon] += 0.1f;
        toke_noad = SkoarNoad::New(wstring(L"Toke_Semicolon"), noad, toker->burn(ESkoarToke::Semicolon));
        noad->add_noad(toke_noad);
        this->cthulhu_prime(noad);
        --deep;
        return noad;
    }

    // Error State
    this->fail(noad);
    return nullptr;
}

SkoarNoadPtr SkoarParser::nouny(SkoarNoadPtr parent) {
    SkoarNoadPtr noad = SkoarNoad::New<ESkoarNoad::nouny>(wstring(L"nouny"), parent);
    list<ESkoarToke::Kind>* desires = nullptr;

    if (++deep > 1000) {
        this->fail_too_deep(parent);
    }

    // nouny -> cthulhu
    desires = &skoarStats.desirables[62];
    if (toker->sees(desires) != nullptr) {
        SkoarNoadPtr toke_noad;
        noad->add_noad(this->cthulhu(noad));
        --deep;
        return noad;
    }

    // nouny -> conditional
    desires = &skoarStats.desirables[63];
    if (toker->sees(desires) != nullptr) {
        SkoarNoadPtr toke_noad;
        noad->add_noad(this->conditional(noad));
        --deep;
        return noad;
    }

    // nouny -> loop
    desires = &skoarStats.desirables[64];
    if (toker->sees(desires) != nullptr) {
        SkoarNoadPtr toke_noad;
        noad->add_noad(this->loop(noad));
        --deep;
        return noad;
    }

    // nouny -> nouny_literal
    desires = &skoarStats.desirables[65];
    if (toker->sees(desires) != nullptr) {
        SkoarNoadPtr toke_noad;
        this->nouny_literal(noad);
        --deep;
        return noad;
    }

    // nouny -> musical_keyword
    desires = &skoarStats.desirables[66];
    if (toker->sees(desires) != nullptr) {
        SkoarNoadPtr toke_noad;
        noad->add_noad(this->musical_keyword(noad));
        --deep;
        return noad;
    }

    // nouny -> listy
    desires = &skoarStats.desirables[67];
    if (toker->sees(desires) != nullptr) {
        SkoarNoadPtr toke_noad;
        noad->add_noad(this->listy(noad));
        --deep;
        return noad;
    }

    // nouny -> deref
    desires = &skoarStats.desirables[68];
    if (toker->sees(desires) != nullptr) {
        SkoarNoadPtr toke_noad;
        noad->add_noad(this->deref(noad));
        --deep;
        return noad;
    }

    // nouny -> skoarpion
    desires = &skoarStats.desirables[69];
    if (toker->sees(desires) != nullptr) {
        SkoarNoadPtr toke_noad;
        noad->add_noad(this->skoarpion(noad));
        --deep;
        return noad;
    }

    // Error State
    this->fail(noad);
    return nullptr;
}

SkoarNoadPtr SkoarParser::conditional(SkoarNoadPtr parent) {
    SkoarNoadPtr noad = SkoarNoad::New<ESkoarNoad::conditional>(wstring(L"conditional"), parent);
    list<ESkoarToke::Kind>* desires = nullptr;

    if (++deep > 1000) {
        this->fail_too_deep(parent);
    }

    // conditional -> CondS cond_ifs CondE
    desires = &skoarStats.desirables[70];
    if (toker->sees(desires) != nullptr) {
        SkoarNoadPtr toke_noad;
        skoarStats.tokeFreq[ESkoarToke::CondS] += 0.1f;
        toke_noad = SkoarNoad::New(wstring(L"Toke_CondS"), noad, toker->burn(ESkoarToke::CondS));
        noad->add_noad(toke_noad);
        this->cond_ifs(noad);
        skoarStats.tokeFreq[ESkoarToke::CondE] += 0.1f;
        toke_noad = SkoarNoad::New(wstring(L"Toke_CondE"), noad, toker->burn(ESkoarToke::CondE));
        noad->add_noad(toke_noad);
        --deep;
        return noad;
    }

    // Error State
    this->fail(noad);
    return nullptr;
}

SkoarNoadPtr SkoarParser::loop(SkoarNoadPtr parent) {
    SkoarNoadPtr noad = SkoarNoad::New<ESkoarNoad::loop>(wstring(L"loop"), parent);
    list<ESkoarToke::Kind>* desires = nullptr;

    if (++deep > 1000) {
        this->fail_too_deep(parent);
    }

    // loop -> LoopS loop_body loop_condition LoopE
    desires = &skoarStats.desirables[71];
    if (toker->sees(desires) != nullptr) {
        SkoarNoadPtr toke_noad;
        skoarStats.tokeFreq[ESkoarToke::LoopS] += 0.1f;
        toke_noad = SkoarNoad::New(wstring(L"Toke_LoopS"), noad, toker->burn(ESkoarToke::LoopS));
        noad->add_noad(toke_noad);
        noad->add_noad(this->loop_body(noad));
        noad->add_noad(this->loop_condition(noad));
        skoarStats.tokeFreq[ESkoarToke::LoopE] += 0.1f;
        toke_noad = SkoarNoad::New(wstring(L"Toke_LoopE"), noad, toker->burn(ESkoarToke::LoopE));
        noad->add_noad(toke_noad);
        --deep;
        return noad;
    }

    // Error State
    this->fail(noad);
    return nullptr;
}

SkoarNoadPtr SkoarParser::nouny_literal(SkoarNoadPtr parent) {
    SkoarNoadPtr noad = parent;
    list<ESkoarToke::Kind>* desires = nullptr;

    if (++deep > 1000) {
        this->fail_too_deep(parent);
    }

    // nouny_literal -> Tuplet
    desires = &skoarStats.desirables[72];
    if (toker->sees(desires) != nullptr) {
        SkoarNoadPtr toke_noad;
        skoarStats.tokeFreq[ESkoarToke::Tuplet] += 0.1f;
        toke_noad = SkoarNoad::New(wstring(L"Toke_Tuplet"), noad, toker->burn(ESkoarToke::Tuplet));
        noad->add_noad(toke_noad);
        --deep;
        return noad;
    }

    // nouny_literal -> Caesura
    desires = &skoarStats.desirables[73];
    if (toker->sees(desires) != nullptr) {
        SkoarNoadPtr toke_noad;
        skoarStats.tokeFreq[ESkoarToke::Caesura] += 0.1f;
        toke_noad = SkoarNoad::New(wstring(L"Toke_Caesura"), noad, toker->burn(ESkoarToke::Caesura));
        noad->add_noad(toke_noad);
        --deep;
        return noad;
    }

    // nouny_literal -> Freq
    desires = &skoarStats.desirables[74];
    if (toker->sees(desires) != nullptr) {
        SkoarNoadPtr toke_noad;
        skoarStats.tokeFreq[ESkoarToke::Freq] += 0.1f;
        toke_noad = SkoarNoad::New(wstring(L"Toke_Freq"), noad, toker->burn(ESkoarToke::Freq));
        noad->add_noad(toke_noad);
        --deep;
        return noad;
    }

    // nouny_literal -> Int
    desires = &skoarStats.desirables[75];
    if (toker->sees(desires) != nullptr) {
        SkoarNoadPtr toke_noad;
        skoarStats.tokeFreq[ESkoarToke::Int] += 0.1f;
        toke_noad = SkoarNoad::New(wstring(L"Toke_Int"), noad, toker->burn(ESkoarToke::Int));
        noad->add_noad(toke_noad);
        --deep;
        return noad;
    }

    // nouny_literal -> Float
    desires = &skoarStats.desirables[76];
    if (toker->sees(desires) != nullptr) {
        SkoarNoadPtr toke_noad;
        skoarStats.tokeFreq[ESkoarToke::Float] += 0.1f;
        toke_noad = SkoarNoad::New(wstring(L"Toke_Float"), noad, toker->burn(ESkoarToke::Float));
        noad->add_noad(toke_noad);
        --deep;
        return noad;
    }

    // nouny_literal -> String
    desires = &skoarStats.desirables[77];
    if (toker->sees(desires) != nullptr) {
        SkoarNoadPtr toke_noad;
        skoarStats.tokeFreq[ESkoarToke::String] += 0.1f;
        toke_noad = SkoarNoad::New(wstring(L"Toke_String"), noad, toker->burn(ESkoarToke::String));
        noad->add_noad(toke_noad);
        --deep;
        return noad;
    }

    // nouny_literal -> Choard
    desires = &skoarStats.desirables[78];
    if (toker->sees(desires) != nullptr) {
        SkoarNoadPtr toke_noad;
        skoarStats.tokeFreq[ESkoarToke::Choard] += 0.1f;
        toke_noad = SkoarNoad::New(wstring(L"Toke_Choard"), noad, toker->burn(ESkoarToke::Choard));
        noad->add_noad(toke_noad);
        --deep;
        return noad;
    }

    // nouny_literal -> NamedNoat
    desires = &skoarStats.desirables[79];
    if (toker->sees(desires) != nullptr) {
        SkoarNoadPtr toke_noad;
        skoarStats.tokeFreq[ESkoarToke::NamedNoat] += 0.1f;
        toke_noad = SkoarNoad::New(wstring(L"Toke_NamedNoat"), noad, toker->burn(ESkoarToke::NamedNoat));
        noad->add_noad(toke_noad);
        --deep;
        return noad;
    }

    // nouny_literal -> Symbol
    desires = &skoarStats.desirables[80];
    if (toker->sees(desires) != nullptr) {
        SkoarNoadPtr toke_noad;
        skoarStats.tokeFreq[ESkoarToke::Symbol] += 0.1f;
        toke_noad = SkoarNoad::New(wstring(L"Toke_Symbol"), noad, toker->burn(ESkoarToke::Symbol));
        noad->add_noad(toke_noad);
        --deep;
        return noad;
    }

    // nouny_literal -> Fairy
    desires = &skoarStats.desirables[81];
    if (toker->sees(desires) != nullptr) {
        SkoarNoadPtr toke_noad;
        skoarStats.tokeFreq[ESkoarToke::Fairy] += 0.1f;
        toke_noad = SkoarNoad::New(wstring(L"Toke_Fairy"), noad, toker->burn(ESkoarToke::Fairy));
        noad->add_noad(toke_noad);
        --deep;
        return noad;
    }

    // nouny_literal -> HashLevel
    desires = &skoarStats.desirables[82];
    if (toker->sees(desires) != nullptr) {
        SkoarNoadPtr toke_noad;
        skoarStats.tokeFreq[ESkoarToke::HashLevel] += 0.1f;
        toke_noad = SkoarNoad::New(wstring(L"Toke_HashLevel"), noad, toker->burn(ESkoarToke::HashLevel));
        noad->add_noad(toke_noad);
        --deep;
        return noad;
    }

    // nouny_literal -> False
    desires = &skoarStats.desirables[83];
    if (toker->sees(desires) != nullptr) {
        SkoarNoadPtr toke_noad;
        skoarStats.tokeFreq[ESkoarToke::False] += 0.1f;
        toke_noad = SkoarNoad::New(wstring(L"Toke_False"), noad, toker->burn(ESkoarToke::False));
        noad->add_noad(toke_noad);
        --deep;
        return noad;
    }

    // nouny_literal -> True
    desires = &skoarStats.desirables[84];
    if (toker->sees(desires) != nullptr) {
        SkoarNoadPtr toke_noad;
        skoarStats.tokeFreq[ESkoarToke::True] += 0.1f;
        toke_noad = SkoarNoad::New(wstring(L"Toke_True"), noad, toker->burn(ESkoarToke::True));
        noad->add_noad(toke_noad);
        --deep;
        return noad;
    }

    // nouny_literal -> Crap
    desires = &skoarStats.desirables[85];
    if (toker->sees(desires) != nullptr) {
        SkoarNoadPtr toke_noad;
        skoarStats.tokeFreq[ESkoarToke::Crap] += 0.1f;
        toke_noad = SkoarNoad::New(wstring(L"Toke_Crap"), noad, toker->burn(ESkoarToke::Crap));
        noad->add_noad(toke_noad);
        --deep;
        return noad;
    }

    // Error State
    this->fail(noad);
    return nullptr;
}

SkoarNoadPtr SkoarParser::deref(SkoarNoadPtr parent) {
    SkoarNoadPtr noad = SkoarNoad::New<ESkoarNoad::deref>(wstring(L"deref"), parent);
    list<ESkoarToke::Kind>* desires = nullptr;

    if (++deep > 1000) {
        this->fail_too_deep(parent);
    }

    // deref -> Deref deref_prime
    desires = &skoarStats.desirables[86];
    if (toker->sees(desires) != nullptr) {
        SkoarNoadPtr toke_noad;
        skoarStats.tokeFreq[ESkoarToke::Deref] += 0.1f;
        toke_noad = SkoarNoad::New(wstring(L"Toke_Deref"), noad, toker->burn(ESkoarToke::Deref));
        noad->add_noad(toke_noad);
        this->deref_prime(noad);
        --deep;
        return noad;
    }

    // Error State
    this->fail(noad);
    return nullptr;
}

SkoarNoadPtr SkoarParser::deref_prime(SkoarNoadPtr parent) {
    SkoarNoadPtr noad = parent;
    list<ESkoarToke::Kind>* desires = nullptr;

    if (++deep > 1000) {
        this->fail_too_deep(parent);
    }

    // deref_prime -> MsgNameWithArgs listy_suffix
    desires = &skoarStats.desirables[87];
    if (toker->sees(desires) != nullptr) {
        SkoarNoadPtr toke_noad;
        skoarStats.tokeFreq[ESkoarToke::MsgNameWithArgs] += 0.1f;
        toke_noad = SkoarNoad::New(wstring(L"Toke_MsgNameWithArgs"), noad, toker->burn(ESkoarToke::MsgNameWithArgs));
        noad->add_noad(toke_noad);
        this->listy_suffix(noad);
        --deep;
        return noad;
    }

    // deref_prime -> MsgName
    desires = &skoarStats.desirables[88];
    if (toker->sees(desires) != nullptr) {
        SkoarNoadPtr toke_noad;
        skoarStats.tokeFreq[ESkoarToke::MsgName] += 0.1f;
        toke_noad = SkoarNoad::New(wstring(L"Toke_MsgName"), noad, toker->burn(ESkoarToke::MsgName));
        noad->add_noad(toke_noad);
        --deep;
        return noad;
    }

    // Error State
    this->fail(noad);
    return nullptr;
}

SkoarNoadPtr SkoarParser::msgable(SkoarNoadPtr parent) {
    SkoarNoadPtr noad = SkoarNoad::New<ESkoarNoad::msgable>(wstring(L"msgable"), parent);
    list<ESkoarToke::Kind>* desires = nullptr;

    if (++deep > 1000) {
        this->fail_too_deep(parent);
    }

    // msgable -> nouny msg_chain_node
    desires = &skoarStats.desirables[89];
    if (toker->sees(desires) != nullptr) {
        SkoarNoadPtr toke_noad;
        noad->add_noad(this->nouny(noad));
        this->msg_chain_node(noad);
        --deep;
        return noad;
    }

    // Error State
    this->fail(noad);
    return nullptr;
}

SkoarNoadPtr SkoarParser::expr_prime(SkoarNoadPtr parent) {
    SkoarNoadPtr noad = SkoarNoad::New<ESkoarNoad::expr_prime>(wstring(L"expr_prime"), parent);
    list<ESkoarToke::Kind>* desires = nullptr;

    if (++deep > 1000) {
        this->fail_too_deep(parent);
    }

    // expr_prime -> assignment expr_prime
    desires = &skoarStats.desirables[90];
    if (toker->sees(desires) != nullptr) {
        SkoarNoadPtr toke_noad;
        noad->add_noad(this->assignment(noad));
        noad->add_noad(this->expr_prime(noad));
        --deep;
        return noad;
    }

    // expr_prime -> math expr_prime
    desires = &skoarStats.desirables[91];
    if (toker->sees(desires) != nullptr) {
        SkoarNoadPtr toke_noad;
        noad->add_noad(this->math(noad));
        noad->add_noad(this->expr_prime(noad));
        --deep;
        return noad;
    }

    // expr_prime -> boolean
    desires = &skoarStats.desirables[92];
    if (toker->sees(desires) != nullptr) {
        SkoarNoadPtr toke_noad;
        noad->add_noad(this->boolean(noad));
        --deep;
        return noad;
    }

    // expr_prime -> times
    desires = &skoarStats.desirables[93];
    if (toker->sees(desires) != nullptr) {
        SkoarNoadPtr toke_noad;
        noad->add_noad(this->times(noad));
        --deep;
        return noad;
    }

    // <e>
    --deep;
    return noad;
}

SkoarNoadPtr SkoarParser::assignment(SkoarNoadPtr parent) {
    SkoarNoadPtr noad = SkoarNoad::New<ESkoarNoad::assignment>(wstring(L"assignment"), parent);
    list<ESkoarToke::Kind>* desires = nullptr;

    if (++deep > 1000) {
        this->fail_too_deep(parent);
    }

    // assignment -> AssOp settable
    desires = &skoarStats.desirables[94];
    if (toker->sees(desires) != nullptr) {
        SkoarNoadPtr toke_noad;
        skoarStats.tokeFreq[ESkoarToke::AssOp] += 0.1f;
        toke_noad = SkoarNoad::New(wstring(L"Toke_AssOp"), noad, toker->burn(ESkoarToke::AssOp));
        noad->add_noad(toke_noad);
        this->settable(noad);
        --deep;
        return noad;
    }

    // Error State
    this->fail(noad);
    return nullptr;
}

SkoarNoadPtr SkoarParser::math(SkoarNoadPtr parent) {
    SkoarNoadPtr noad = SkoarNoad::New<ESkoarNoad::math>(wstring(L"math"), parent);
    list<ESkoarToke::Kind>* desires = nullptr;

    if (++deep > 1000) {
        this->fail_too_deep(parent);
    }

    // math -> MathOp msgable
    desires = &skoarStats.desirables[95];
    if (toker->sees(desires) != nullptr) {
        SkoarNoadPtr toke_noad;
        skoarStats.tokeFreq[ESkoarToke::MathOp] += 0.1f;
        toke_noad = SkoarNoad::New(wstring(L"Toke_MathOp"), noad, toker->burn(ESkoarToke::MathOp));
        noad->add_noad(toke_noad);
        noad->add_noad(this->msgable(noad));
        --deep;
        return noad;
    }

    // Error State
    this->fail(noad);
    return nullptr;
}

SkoarNoadPtr SkoarParser::boolean(SkoarNoadPtr parent) {
    SkoarNoadPtr noad = SkoarNoad::New<ESkoarNoad::boolean>(wstring(L"boolean"), parent);
    list<ESkoarToke::Kind>* desires = nullptr;

    if (++deep > 1000) {
        this->fail_too_deep(parent);
    }

    // boolean -> BooleanOp expr
    desires = &skoarStats.desirables[96];
    if (toker->sees(desires) != nullptr) {
        SkoarNoadPtr toke_noad;
        skoarStats.tokeFreq[ESkoarToke::BooleanOp] += 0.1f;
        toke_noad = SkoarNoad::New(wstring(L"Toke_BooleanOp"), noad, toker->burn(ESkoarToke::BooleanOp));
        noad->add_noad(toke_noad);
        noad->add_noad(this->expr(noad));
        --deep;
        return noad;
    }

    // Error State
    this->fail(noad);
    return nullptr;
}

SkoarNoadPtr SkoarParser::times(SkoarNoadPtr parent) {
    SkoarNoadPtr noad = SkoarNoad::New<ESkoarNoad::times>(wstring(L"times"), parent);
    list<ESkoarToke::Kind>* desires = nullptr;

    if (++deep > 1000) {
        this->fail_too_deep(parent);
    }

    // times -> Times
    desires = &skoarStats.desirables[97];
    if (toker->sees(desires) != nullptr) {
        SkoarNoadPtr toke_noad;
        skoarStats.tokeFreq[ESkoarToke::Times] += 0.1f;
        toke_noad = SkoarNoad::New(wstring(L"Toke_Times"), noad, toker->burn(ESkoarToke::Times));
        noad->add_noad(toke_noad);
        --deep;
        return noad;
    }

    // Error State
    this->fail(noad);
    return nullptr;
}

SkoarNoadPtr SkoarParser::settable(SkoarNoadPtr parent) {
    SkoarNoadPtr noad = parent;
    list<ESkoarToke::Kind>* desires = nullptr;

    if (++deep > 1000) {
        this->fail_too_deep(parent);
    }

    // settable -> Caesura
    desires = &skoarStats.desirables[98];
    if (toker->sees(desires) != nullptr) {
        SkoarNoadPtr toke_noad;
        skoarStats.tokeFreq[ESkoarToke::Caesura] += 0.1f;
        toke_noad = SkoarNoad::New(wstring(L"Toke_Caesura"), noad, toker->burn(ESkoarToke::Caesura));
        noad->add_noad(toke_noad);
        --deep;
        return noad;
    }

    // settable -> Symbol
    desires = &skoarStats.desirables[99];
    if (toker->sees(desires) != nullptr) {
        SkoarNoadPtr toke_noad;
        skoarStats.tokeFreq[ESkoarToke::Symbol] += 0.1f;
        toke_noad = SkoarNoad::New(wstring(L"Toke_Symbol"), noad, toker->burn(ESkoarToke::Symbol));
        noad->add_noad(toke_noad);
        --deep;
        return noad;
    }

    // settable -> listy
    desires = &skoarStats.desirables[100];
    if (toker->sees(desires) != nullptr) {
        SkoarNoadPtr toke_noad;
        noad->add_noad(this->listy(noad));
        --deep;
        return noad;
    }

    // settable -> Quarters
    desires = &skoarStats.desirables[101];
    if (toker->sees(desires) != nullptr) {
        SkoarNoadPtr toke_noad;
        skoarStats.tokeFreq[ESkoarToke::Quarters] += 0.1f;
        toke_noad = SkoarNoad::New(wstring(L"Toke_Quarters"), noad, toker->burn(ESkoarToke::Quarters));
        noad->add_noad(toke_noad);
        --deep;
        return noad;
    }

    // settable -> Eighths
    desires = &skoarStats.desirables[102];
    if (toker->sees(desires) != nullptr) {
        SkoarNoadPtr toke_noad;
        skoarStats.tokeFreq[ESkoarToke::Eighths] += 0.1f;
        toke_noad = SkoarNoad::New(wstring(L"Toke_Eighths"), noad, toker->burn(ESkoarToke::Eighths));
        noad->add_noad(toke_noad);
        --deep;
        return noad;
    }

    // settable -> Fairy
    desires = &skoarStats.desirables[103];
    if (toker->sees(desires) != nullptr) {
        SkoarNoadPtr toke_noad;
        skoarStats.tokeFreq[ESkoarToke::Fairy] += 0.1f;
        toke_noad = SkoarNoad::New(wstring(L"Toke_Fairy"), noad, toker->burn(ESkoarToke::Fairy));
        noad->add_noad(toke_noad);
        --deep;
        return noad;
    }

    // Error State
    this->fail(noad);
    return nullptr;
}

SkoarNoadPtr SkoarParser::msg_chain_node(SkoarNoadPtr parent) {
    SkoarNoadPtr noad = parent;
    list<ESkoarToke::Kind>* desires = nullptr;

    if (++deep > 1000) {
        this->fail_too_deep(parent);
    }

    // msg_chain_node -> MsgOp msg msg_chain_node
    desires = &skoarStats.desirables[104];
    if (toker->sees(desires) != nullptr) {
        SkoarNoadPtr toke_noad;
        skoarStats.tokeFreq[ESkoarToke::MsgOp] += 0.1f;
        toke_noad = SkoarNoad::New(wstring(L"Toke_MsgOp"), noad, toker->burn(ESkoarToke::MsgOp));
        noad->add_noad(toke_noad);
        noad->add_noad(this->msg(noad));
        this->msg_chain_node(noad);
        --deep;
        return noad;
    }

    // <e>
    --deep;
    return noad;
}

SkoarNoadPtr SkoarParser::msg(SkoarNoadPtr parent) {
    SkoarNoadPtr noad = SkoarNoad::New<ESkoarNoad::msg>(wstring(L"msg"), parent);
    list<ESkoarToke::Kind>* desires = nullptr;

    if (++deep > 1000) {
        this->fail_too_deep(parent);
    }

    // msg -> MsgNameWithArgs listy_suffix
    desires = &skoarStats.desirables[105];
    if (toker->sees(desires) != nullptr) {
        SkoarNoadPtr toke_noad;
        skoarStats.tokeFreq[ESkoarToke::MsgNameWithArgs] += 0.1f;
        toke_noad = SkoarNoad::New(wstring(L"Toke_MsgNameWithArgs"), noad, toker->burn(ESkoarToke::MsgNameWithArgs));
        noad->add_noad(toke_noad);
        this->listy_suffix(noad);
        --deep;
        return noad;
    }

    // msg -> MsgName
    desires = &skoarStats.desirables[106];
    if (toker->sees(desires) != nullptr) {
        SkoarNoadPtr toke_noad;
        skoarStats.tokeFreq[ESkoarToke::MsgName] += 0.1f;
        toke_noad = SkoarNoad::New(wstring(L"Toke_MsgName"), noad, toker->burn(ESkoarToke::MsgName));
        noad->add_noad(toke_noad);
        --deep;
        return noad;
    }

    // msg -> listy
    desires = &skoarStats.desirables[107];
    if (toker->sees(desires) != nullptr) {
        SkoarNoadPtr toke_noad;
        noad->add_noad(this->listy(noad));
        --deep;
        return noad;
    }

    // msg -> loop
    desires = &skoarStats.desirables[108];
    if (toker->sees(desires) != nullptr) {
        SkoarNoadPtr toke_noad;
        noad->add_noad(this->loop(noad));
        --deep;
        return noad;
    }

    // Error State
    this->fail(noad);
    return nullptr;
}

SkoarNoadPtr SkoarParser::cthulhu_prime(SkoarNoadPtr parent) {
    SkoarNoadPtr noad = parent;
    list<ESkoarToke::Kind>* desires = nullptr;

    if (++deep > 1000) {
        this->fail_too_deep(parent);
    }

    // cthulhu_prime -> expr Semicolon RWing
    desires = &skoarStats.desirables[109];
    if (toker->sees(desires) != nullptr) {
        SkoarNoadPtr toke_noad;
        noad->add_noad(this->expr(noad));
        skoarStats.tokeFreq[ESkoarToke::Semicolon] += 0.1f;
        toke_noad = SkoarNoad::New(wstring(L"Toke_Semicolon"), noad, toker->burn(ESkoarToke::Semicolon));
        noad->add_noad(toke_noad);
        skoarStats.tokeFreq[ESkoarToke::RWing] += 0.1f;
        toke_noad = SkoarNoad::New(wstring(L"Toke_RWing"), noad, toker->burn(ESkoarToke::RWing));
        noad->add_noad(toke_noad);
        --deep;
        return noad;
    }

    // cthulhu_prime -> Nosey Semicolon RWing
    desires = &skoarStats.desirables[110];
    if (toker->sees(desires) != nullptr) {
        SkoarNoadPtr toke_noad;
        skoarStats.tokeFreq[ESkoarToke::Nosey] += 0.1f;
        toke_noad = SkoarNoad::New(wstring(L"Toke_Nosey"), noad, toker->burn(ESkoarToke::Nosey));
        noad->add_noad(toke_noad);
        skoarStats.tokeFreq[ESkoarToke::Semicolon] += 0.1f;
        toke_noad = SkoarNoad::New(wstring(L"Toke_Semicolon"), noad, toker->burn(ESkoarToke::Semicolon));
        noad->add_noad(toke_noad);
        skoarStats.tokeFreq[ESkoarToke::RWing] += 0.1f;
        toke_noad = SkoarNoad::New(wstring(L"Toke_RWing"), noad, toker->burn(ESkoarToke::RWing));
        noad->add_noad(toke_noad);
        --deep;
        return noad;
    }

    // Error State
    this->fail(noad);
    return nullptr;
}

SkoarNoadPtr SkoarParser::cond_ifs(SkoarNoadPtr parent) {
    SkoarNoadPtr noad = parent;
    list<ESkoarToke::Kind>* desires = nullptr;

    if (++deep > 1000) {
        this->fail_too_deep(parent);
    }

    // cond_ifs -> cond_if cond_ifs_suffix
    desires = &skoarStats.desirables[111];
    if (toker->sees(desires) != nullptr) {
        SkoarNoadPtr toke_noad;
        noad->add_noad(this->cond_if(noad));
        this->cond_ifs_suffix(noad);
        --deep;
        return noad;
    }

    // Error State
    this->fail(noad);
    return nullptr;
}

SkoarNoadPtr SkoarParser::cond_if(SkoarNoadPtr parent) {
    SkoarNoadPtr noad = SkoarNoad::New<ESkoarNoad::cond_if>(wstring(L"cond_if"), parent);
    list<ESkoarToke::Kind>* desires = nullptr;

    if (++deep > 1000) {
        this->fail_too_deep(parent);
    }

    // cond_if -> optional_voice expr CondIf if_body cond_else
    desires = &skoarStats.desirables[112];
    if (toker->sees(desires) != nullptr) {
        SkoarNoadPtr toke_noad;
        this->optional_voice(noad);
        noad->add_noad(this->expr(noad));
        skoarStats.tokeFreq[ESkoarToke::CondIf] += 0.1f;
        toke_noad = SkoarNoad::New(wstring(L"Toke_CondIf"), noad, toker->burn(ESkoarToke::CondIf));
        noad->add_noad(toke_noad);
        noad->add_noad(this->if_body(noad));
        this->cond_else(noad);
        --deep;
        return noad;
    }

    // Error State
    this->fail(noad);
    return nullptr;
}

SkoarNoadPtr SkoarParser::cond_ifs_suffix(SkoarNoadPtr parent) {
    SkoarNoadPtr noad = parent;
    list<ESkoarToke::Kind>* desires = nullptr;

    if (++deep > 1000) {
        this->fail_too_deep(parent);
    }

    // cond_ifs_suffix -> Newline cond_ifs
    desires = &skoarStats.desirables[113];
    if (toker->sees(desires) != nullptr) {
        SkoarNoadPtr toke_noad;
        skoarStats.tokeFreq[ESkoarToke::Newline] += 0.1f;
        toke_noad = SkoarNoad::New(wstring(L"Toke_Newline"), noad, toker->burn(ESkoarToke::Newline));
        noad->add_noad(toke_noad);
        this->cond_ifs(noad);
        --deep;
        return noad;
    }

    // <e>
    --deep;
    return noad;
}

SkoarNoadPtr SkoarParser::if_body(SkoarNoadPtr parent) {
    SkoarNoadPtr noad = SkoarNoad::New<ESkoarNoad::if_body>(wstring(L"if_body"), parent);
    list<ESkoarToke::Kind>* desires = nullptr;

    if (++deep > 1000) {
        this->fail_too_deep(parent);
    }

    // if_body -> phrases
    desires = &skoarStats.desirables[114];
    if (toker->sees(desires) != nullptr) {
        SkoarNoadPtr toke_noad;
        this->phrases(noad);
        --deep;
        return noad;
    }

    // Error State
    this->fail(noad);
    return nullptr;
}

SkoarNoadPtr SkoarParser::cond_else(SkoarNoadPtr parent) {
    SkoarNoadPtr noad = parent;
    list<ESkoarToke::Kind>* desires = nullptr;

    if (++deep > 1000) {
        this->fail_too_deep(parent);
    }

    // cond_else -> CondIf if_body
    desires = &skoarStats.desirables[115];
    if (toker->sees(desires) != nullptr) {
        SkoarNoadPtr toke_noad;
        skoarStats.tokeFreq[ESkoarToke::CondIf] += 0.1f;
        toke_noad = SkoarNoad::New(wstring(L"Toke_CondIf"), noad, toker->burn(ESkoarToke::CondIf));
        noad->add_noad(toke_noad);
        noad->add_noad(this->if_body(noad));
        --deep;
        return noad;
    }

    // <e>
    --deep;
    return noad;
}

SkoarNoadPtr SkoarParser::loop_body(SkoarNoadPtr parent) {
    SkoarNoadPtr noad = SkoarNoad::New<ESkoarNoad::loop_body>(wstring(L"loop_body"), parent);
    list<ESkoarToke::Kind>* desires = nullptr;

    if (++deep > 1000) {
        this->fail_too_deep(parent);
    }

    // loop_body -> phrases
    desires = &skoarStats.desirables[116];
    if (toker->sees(desires) != nullptr) {
        SkoarNoadPtr toke_noad;
        this->phrases(noad);
        --deep;
        return noad;
    }

    // Error State
    this->fail(noad);
    return nullptr;
}

SkoarNoadPtr SkoarParser::loop_condition(SkoarNoadPtr parent) {
    SkoarNoadPtr noad = SkoarNoad::New<ESkoarNoad::loop_condition>(wstring(L"loop_condition"), parent);
    list<ESkoarToke::Kind>* desires = nullptr;

    if (++deep > 1000) {
        this->fail_too_deep(parent);
    }

    // loop_condition -> LoopSep expr
    desires = &skoarStats.desirables[117];
    if (toker->sees(desires) != nullptr) {
        SkoarNoadPtr toke_noad;
        skoarStats.tokeFreq[ESkoarToke::LoopSep] += 0.1f;
        toke_noad = SkoarNoad::New(wstring(L"Toke_LoopSep"), noad, toker->burn(ESkoarToke::LoopSep));
        noad->add_noad(toke_noad);
        noad->add_noad(this->expr(noad));
        --deep;
        return noad;
    }

    // <e>
    --deep;
    return noad;
}


void SkoarParser::sortDesirables() {
    localSortDesirables();
}

