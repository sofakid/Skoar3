// =====================================================================================================================
// rdpp.cpp - Generated by Code_Parser_Cpp - Create Recursive Descent Predictive Parser on 2017-11-30 14:09:00 for C++14
// =====================================================================================================================
#include "rdpp.hpp"
#include "exception.hpp"
#include "lex.hpp"
#include "noad.hpp"

void SkoarParser::fail(SkoarNoadPtr noad) {
    toker->dump();
    throw SkoarParseException(L"Fail", noad);
}

void SkoarParser::fail_too_deep(SkoarNoadPtr noad) {
    toker->dump();
    throw SkoarParseException(L"Parse tree too deep!", noad);
}

 SkoarParser::SkoarParser(SkoarToker * tokr) {

    deep = 0;
    toker = tokr;
    
}

 SkoarStats::SkoarStats() {
    tokeFreq[ESkoarToke::AUGen] = 0.0f;
    tokeFreq[ESkoarToke::AUGenWithArgs] = 0.0f;
    tokeFreq[ESkoarToke::AlCoda] = 0.0f;
    tokeFreq[ESkoarToke::Bars] = 0.0f;
    tokeFreq[ESkoarToke::BooleanAnd] = 0.0f;
    tokeFreq[ESkoarToke::BooleanOr] = 0.0f;
    tokeFreq[ESkoarToke::BracketE] = 0.0f;
    tokeFreq[ESkoarToke::BracketS] = 0.0f;
    tokeFreq[ESkoarToke::Carrot] = 0.0f;
    tokeFreq[ESkoarToke::Cat] = 0.0f;
    tokeFreq[ESkoarToke::Choard] = 0.0f;
    tokeFreq[ESkoarToke::CmpEqNeq] = 0.0f;
    tokeFreq[ESkoarToke::CmpGtLt] = 0.0f;
    tokeFreq[ESkoarToke::Coda] = 0.0f;
    tokeFreq[ESkoarToke::Comment] = 0.0f;
    tokeFreq[ESkoarToke::CondE] = 0.0f;
    tokeFreq[ESkoarToke::CondIf] = 0.0f;
    tokeFreq[ESkoarToke::CondS] = 0.0f;
    tokeFreq[ESkoarToke::Crotchets] = 0.0f;
    tokeFreq[ESkoarToke::DUGen] = 0.0f;
    tokeFreq[ESkoarToke::DUGenWithArgs] = 0.0f;
    tokeFreq[ESkoarToke::Deref] = 0.0f;
    tokeFreq[ESkoarToke::Duration] = 0.0f;
    tokeFreq[ESkoarToke::Eighths] = 0.0f;
    tokeFreq[ESkoarToke::ExactBeat] = 0.0f;
    tokeFreq[ESkoarToke::ExactRest] = 0.0f;
    tokeFreq[ESkoarToke::Fairy] = 0.0f;
    tokeFreq[ESkoarToke::False] = 0.0f;
    tokeFreq[ESkoarToke::Float] = 0.0f;
    tokeFreq[ESkoarToke::Freq] = 0.0f;
    tokeFreq[ESkoarToke::HashLevel] = 0.0f;
    tokeFreq[ESkoarToke::Int] = 0.0f;
    tokeFreq[ESkoarToke::KUGen] = 0.0f;
    tokeFreq[ESkoarToke::KUGenWithArgs] = 0.0f;
    tokeFreq[ESkoarToke::LWing] = 0.0f;
    tokeFreq[ESkoarToke::ListE] = 0.0f;
    tokeFreq[ESkoarToke::ListS] = 0.0f;
    tokeFreq[ESkoarToke::ListSep] = 0.0f;
    tokeFreq[ESkoarToke::LoopE] = 0.0f;
    tokeFreq[ESkoarToke::LoopS] = 0.0f;
    tokeFreq[ESkoarToke::LoopSep] = 0.0f;
    tokeFreq[ESkoarToke::Lute] = 0.0f;
    tokeFreq[ESkoarToke::LuteWithArgs] = 0.0f;
    tokeFreq[ESkoarToke::MathOpAddSub] = 0.0f;
    tokeFreq[ESkoarToke::MathOpMulDivMod] = 0.0f;
    tokeFreq[ESkoarToke::MeditationE] = 0.0f;
    tokeFreq[ESkoarToke::MeditationS] = 0.0f;
    tokeFreq[ESkoarToke::MsgName] = 0.0f;
    tokeFreq[ESkoarToke::MsgNameWithArgs] = 0.0f;
    tokeFreq[ESkoarToke::MsgOp] = 0.0f;
    tokeFreq[ESkoarToke::NamedNoat] = 0.0f;
    tokeFreq[ESkoarToke::Newline] = 0.0f;
    tokeFreq[ESkoarToke::Nosey] = 0.0f;
    tokeFreq[ESkoarToke::OctaveShift] = 0.0f;
    tokeFreq[ESkoarToke::Quarters] = 0.0f;
    tokeFreq[ESkoarToke::Quavers] = 0.0f;
    tokeFreq[ESkoarToke::RWing] = 0.0f;
    tokeFreq[ESkoarToke::Semicolon] = 0.0f;
    tokeFreq[ESkoarToke::SkoarpionArgs] = 0.0f;
    tokeFreq[ESkoarToke::SkoarpionEnd] = 0.0f;
    tokeFreq[ESkoarToke::SkoarpionStart] = 0.0f;
    tokeFreq[ESkoarToke::String] = 0.0f;
    tokeFreq[ESkoarToke::Symbol] = 0.0f;
    tokeFreq[ESkoarToke::SymbolColon] = 0.0f;
    tokeFreq[ESkoarToke::SymbolName] = 0.0f;
    tokeFreq[ESkoarToke::Times] = 0.0f;
    tokeFreq[ESkoarToke::True] = 0.0f;
    tokeFreq[ESkoarToke::Tuplet] = 0.0f;
    tokeFreq[ESkoarToke::Voice] = 0.0f;

    desirables = new list<ESkoarToke::Kind>[128];

    // branches
    desirables[0] = {ESkoarToke::Fairy, ESkoarToke::LoopS, ESkoarToke::Quarters, ESkoarToke::MeditationS,
                      ESkoarToke::SymbolColon, ESkoarToke::Deref, ESkoarToke::Coda, ESkoarToke::Float,
                      ESkoarToke::Lute, ESkoarToke::ExactRest, ESkoarToke::AUGenWithArgs, ESkoarToke::Duration,
                      ESkoarToke::KUGenWithArgs, ESkoarToke::Freq, ESkoarToke::LuteWithArgs, ESkoarToke::SkoarpionStart,
                      ESkoarToke::KUGen, ESkoarToke::Voice, ESkoarToke::CondS, ESkoarToke::BracketS,
                      ESkoarToke::ExactBeat, ESkoarToke::DUGenWithArgs, ESkoarToke::Cat, ESkoarToke::OctaveShift,
                      ESkoarToke::ListS, ESkoarToke::AlCoda, ESkoarToke::Newline, ESkoarToke::Symbol,
                      ESkoarToke::SkoarpionArgs, ESkoarToke::False, ESkoarToke::Carrot, ESkoarToke::String,
                      ESkoarToke::Comment, ESkoarToke::NamedNoat, ESkoarToke::Bars, ESkoarToke::Tuplet,
                      ESkoarToke::Eighths, ESkoarToke::Crotchets, ESkoarToke::LWing, ESkoarToke::Quavers,
                      ESkoarToke::Int, ESkoarToke::DUGen, ESkoarToke::Choard, ESkoarToke::AUGen,
                      ESkoarToke::True, ESkoarToke::HashLevel};

    // skoar
    desirables[1] = {ESkoarToke::Fairy, ESkoarToke::LoopS, ESkoarToke::Quarters, ESkoarToke::MeditationS,
                      ESkoarToke::SymbolColon, ESkoarToke::Deref, ESkoarToke::Coda, ESkoarToke::Float,
                      ESkoarToke::Lute, ESkoarToke::ExactRest, ESkoarToke::AUGenWithArgs, ESkoarToke::Duration,
                      ESkoarToke::KUGenWithArgs, ESkoarToke::Freq, ESkoarToke::LuteWithArgs, ESkoarToke::SkoarpionStart,
                      ESkoarToke::KUGen, ESkoarToke::Voice, ESkoarToke::CondS, ESkoarToke::BracketS,
                      ESkoarToke::ExactBeat, ESkoarToke::DUGenWithArgs, ESkoarToke::Cat, ESkoarToke::OctaveShift,
                      ESkoarToke::ListS, ESkoarToke::Eof, ESkoarToke::AlCoda, ESkoarToke::Newline,
                      ESkoarToke::Symbol, ESkoarToke::SkoarpionArgs, ESkoarToke::False, ESkoarToke::Carrot,
                      ESkoarToke::String, ESkoarToke::Comment, ESkoarToke::NamedNoat, ESkoarToke::Bars,
                      ESkoarToke::Tuplet, ESkoarToke::Eighths, ESkoarToke::Crotchets, ESkoarToke::LWing,
                      ESkoarToke::Quavers, ESkoarToke::Int, ESkoarToke::DUGen, ESkoarToke::Choard,
                      ESkoarToke::AUGen, ESkoarToke::True, ESkoarToke::HashLevel};

    // branch
    desirables[2] = {ESkoarToke::Fairy, ESkoarToke::LoopS, ESkoarToke::Quarters, ESkoarToke::MeditationS,
                      ESkoarToke::SymbolColon, ESkoarToke::Deref, ESkoarToke::Coda, ESkoarToke::Float,
                      ESkoarToke::Lute, ESkoarToke::ExactRest, ESkoarToke::AUGenWithArgs, ESkoarToke::Duration,
                      ESkoarToke::KUGenWithArgs, ESkoarToke::Freq, ESkoarToke::LuteWithArgs, ESkoarToke::SkoarpionStart,
                      ESkoarToke::KUGen, ESkoarToke::Voice, ESkoarToke::CondS, ESkoarToke::BracketS,
                      ESkoarToke::ExactBeat, ESkoarToke::DUGenWithArgs, ESkoarToke::Cat, ESkoarToke::OctaveShift,
                      ESkoarToke::ListS, ESkoarToke::AlCoda, ESkoarToke::Newline, ESkoarToke::Symbol,
                      ESkoarToke::SkoarpionArgs, ESkoarToke::False, ESkoarToke::Carrot, ESkoarToke::String,
                      ESkoarToke::Comment, ESkoarToke::NamedNoat, ESkoarToke::Bars, ESkoarToke::Tuplet,
                      ESkoarToke::Eighths, ESkoarToke::Crotchets, ESkoarToke::LWing, ESkoarToke::Quavers,
                      ESkoarToke::Int, ESkoarToke::DUGen, ESkoarToke::Choard, ESkoarToke::AUGen,
                      ESkoarToke::True, ESkoarToke::HashLevel};

    // opt_voiced_phrases
    desirables[3] = {ESkoarToke::Fairy, ESkoarToke::MeditationE, ESkoarToke::LoopS, ESkoarToke::Quarters,
                      ESkoarToke::SkoarpionEnd, ESkoarToke::MeditationS, ESkoarToke::SymbolColon, ESkoarToke::Deref,
                      ESkoarToke::Coda, ESkoarToke::Float, ESkoarToke::Lute, ESkoarToke::ExactRest,
                      ESkoarToke::AUGenWithArgs, ESkoarToke::Duration, ESkoarToke::KUGenWithArgs, ESkoarToke::Freq,
                      ESkoarToke::LuteWithArgs, ESkoarToke::SkoarpionStart, ESkoarToke::KUGen, ESkoarToke::Voice,
                      ESkoarToke::CondS, ESkoarToke::BracketS, ESkoarToke::ExactBeat, ESkoarToke::DUGenWithArgs,
                      ESkoarToke::Cat, ESkoarToke::OctaveShift, ESkoarToke::ListS, ESkoarToke::AlCoda,
                      ESkoarToke::Newline, ESkoarToke::Symbol, ESkoarToke::SkoarpionArgs, ESkoarToke::False,
                      ESkoarToke::Carrot, ESkoarToke::String, ESkoarToke::Comment, ESkoarToke::NamedNoat,
                      ESkoarToke::Bars, ESkoarToke::Tuplet, ESkoarToke::Eighths, ESkoarToke::Crotchets,
                      ESkoarToke::LWing, ESkoarToke::Quavers, ESkoarToke::Int, ESkoarToke::DUGen,
                      ESkoarToke::Choard, ESkoarToke::AUGen, ESkoarToke::True, ESkoarToke::HashLevel};

    // optional_voice
    desirables[4] = {ESkoarToke::Voice};

    // phrases
    desirables[5] = {ESkoarToke::Fairy, ESkoarToke::LoopS, ESkoarToke::Quarters, ESkoarToke::MeditationS,
                      ESkoarToke::SymbolColon, ESkoarToke::Deref, ESkoarToke::Coda, ESkoarToke::Float,
                      ESkoarToke::Lute, ESkoarToke::ExactRest, ESkoarToke::AUGenWithArgs, ESkoarToke::Duration,
                      ESkoarToke::KUGenWithArgs, ESkoarToke::Freq, ESkoarToke::LuteWithArgs, ESkoarToke::SkoarpionStart,
                      ESkoarToke::KUGen, ESkoarToke::CondS, ESkoarToke::BracketS, ESkoarToke::ExactBeat,
                      ESkoarToke::DUGenWithArgs, ESkoarToke::Cat, ESkoarToke::OctaveShift, ESkoarToke::ListS,
                      ESkoarToke::AlCoda, ESkoarToke::Symbol, ESkoarToke::SkoarpionArgs, ESkoarToke::False,
                      ESkoarToke::Carrot, ESkoarToke::String, ESkoarToke::Comment, ESkoarToke::NamedNoat,
                      ESkoarToke::Bars, ESkoarToke::Tuplet, ESkoarToke::Eighths, ESkoarToke::Crotchets,
                      ESkoarToke::LWing, ESkoarToke::Quavers, ESkoarToke::Int, ESkoarToke::DUGen,
                      ESkoarToke::Choard, ESkoarToke::AUGen, ESkoarToke::True, ESkoarToke::HashLevel};

    // phrasey
    desirables[6] = {ESkoarToke::Comment};
    desirables[7] = {ESkoarToke::Coda, ESkoarToke::Bars};
    desirables[8] = {ESkoarToke::Fairy, ESkoarToke::LoopS, ESkoarToke::MeditationS, ESkoarToke::SymbolColon,
                      ESkoarToke::Deref, ESkoarToke::Float, ESkoarToke::Lute, ESkoarToke::AUGenWithArgs,
                      ESkoarToke::Duration, ESkoarToke::KUGenWithArgs, ESkoarToke::Freq, ESkoarToke::LuteWithArgs,
                      ESkoarToke::SkoarpionStart, ESkoarToke::KUGen, ESkoarToke::CondS, ESkoarToke::BracketS,
                      ESkoarToke::DUGenWithArgs, ESkoarToke::Cat, ESkoarToke::OctaveShift, ESkoarToke::ListS,
                      ESkoarToke::Symbol, ESkoarToke::SkoarpionArgs, ESkoarToke::False, ESkoarToke::Carrot,
                      ESkoarToke::String, ESkoarToke::NamedNoat, ESkoarToke::Tuplet, ESkoarToke::LWing,
                      ESkoarToke::DUGen, ESkoarToke::Int, ESkoarToke::Choard, ESkoarToke::AUGen,
                      ESkoarToke::True, ESkoarToke::HashLevel};
    desirables[9] = {ESkoarToke::AlCoda};
    desirables[10] = {ESkoarToke::Quavers, ESkoarToke::Quarters, ESkoarToke::ExactBeat, ESkoarToke::ExactRest,
                      ESkoarToke::Eighths, ESkoarToke::Crotchets};

    // marker
    desirables[11] = {ESkoarToke::Coda};
    desirables[12] = {ESkoarToke::Bars};

    // expr
    desirables[13] = {ESkoarToke::Fairy, ESkoarToke::LoopS, ESkoarToke::MeditationS, ESkoarToke::SymbolColon,
                      ESkoarToke::Deref, ESkoarToke::Float, ESkoarToke::Lute, ESkoarToke::AUGenWithArgs,
                      ESkoarToke::Duration, ESkoarToke::KUGenWithArgs, ESkoarToke::Freq, ESkoarToke::LuteWithArgs,
                      ESkoarToke::SkoarpionStart, ESkoarToke::KUGen, ESkoarToke::CondS, ESkoarToke::BracketS,
                      ESkoarToke::DUGenWithArgs, ESkoarToke::Cat, ESkoarToke::OctaveShift, ESkoarToke::ListS,
                      ESkoarToke::Symbol, ESkoarToke::SkoarpionArgs, ESkoarToke::False, ESkoarToke::Carrot,
                      ESkoarToke::String, ESkoarToke::NamedNoat, ESkoarToke::Tuplet, ESkoarToke::LWing,
                      ESkoarToke::DUGen, ESkoarToke::Int, ESkoarToke::Choard, ESkoarToke::AUGen,
                      ESkoarToke::True, ESkoarToke::HashLevel};

    // al_goto
    desirables[14] = {ESkoarToke::AlCoda};

    // beat
    desirables[15] = {ESkoarToke::Eighths, ESkoarToke::Quarters, ESkoarToke::Crotchets, ESkoarToke::Quavers};
    desirables[16] = {ESkoarToke::ExactBeat};
    desirables[17] = {ESkoarToke::ExactRest};

    // phrasish
    desirables[18] = {ESkoarToke::Comment};
    desirables[19] = {ESkoarToke::Coda, ESkoarToke::Bars};
    desirables[20] = {ESkoarToke::Fairy, ESkoarToke::LoopS, ESkoarToke::MeditationS, ESkoarToke::SymbolColon,
                      ESkoarToke::Deref, ESkoarToke::Float, ESkoarToke::Lute, ESkoarToke::AUGenWithArgs,
                      ESkoarToke::Duration, ESkoarToke::KUGenWithArgs, ESkoarToke::Freq, ESkoarToke::LuteWithArgs,
                      ESkoarToke::SkoarpionStart, ESkoarToke::KUGen, ESkoarToke::CondS, ESkoarToke::BracketS,
                      ESkoarToke::DUGenWithArgs, ESkoarToke::Cat, ESkoarToke::OctaveShift, ESkoarToke::ListS,
                      ESkoarToke::Symbol, ESkoarToke::SkoarpionArgs, ESkoarToke::False, ESkoarToke::Carrot,
                      ESkoarToke::String, ESkoarToke::NamedNoat, ESkoarToke::Tuplet, ESkoarToke::LWing,
                      ESkoarToke::DUGen, ESkoarToke::Int, ESkoarToke::Choard, ESkoarToke::AUGen,
                      ESkoarToke::True, ESkoarToke::HashLevel};
    desirables[21] = {ESkoarToke::AlCoda};
    desirables[22] = {ESkoarToke::Quavers, ESkoarToke::Quarters, ESkoarToke::ExactBeat, ESkoarToke::ExactRest,
                      ESkoarToke::Eighths, ESkoarToke::Crotchets};
    desirables[23] = {ESkoarToke::Newline};

    // phrasishes
    desirables[24] = {ESkoarToke::Fairy, ESkoarToke::LoopS, ESkoarToke::Quarters, ESkoarToke::MeditationS,
                      ESkoarToke::SymbolColon, ESkoarToke::Deref, ESkoarToke::Coda, ESkoarToke::Float,
                      ESkoarToke::Lute, ESkoarToke::ExactRest, ESkoarToke::AUGenWithArgs, ESkoarToke::Duration,
                      ESkoarToke::KUGenWithArgs, ESkoarToke::Freq, ESkoarToke::LuteWithArgs, ESkoarToke::SkoarpionStart,
                      ESkoarToke::KUGen, ESkoarToke::CondS, ESkoarToke::BracketS, ESkoarToke::ExactBeat,
                      ESkoarToke::DUGenWithArgs, ESkoarToke::Cat, ESkoarToke::OctaveShift, ESkoarToke::ListS,
                      ESkoarToke::AlCoda, ESkoarToke::Newline, ESkoarToke::Symbol, ESkoarToke::SkoarpionArgs,
                      ESkoarToke::False, ESkoarToke::Carrot, ESkoarToke::String, ESkoarToke::Comment,
                      ESkoarToke::NamedNoat, ESkoarToke::Bars, ESkoarToke::Tuplet, ESkoarToke::Eighths,
                      ESkoarToke::Crotchets, ESkoarToke::LWing, ESkoarToke::Quavers, ESkoarToke::Int,
                      ESkoarToke::DUGen, ESkoarToke::Choard, ESkoarToke::AUGen, ESkoarToke::True,
                      ESkoarToke::HashLevel};

    // args
    desirables[25] = {ESkoarToke::SymbolColon, ESkoarToke::Newline, ESkoarToke::SymbolName};

    // opt_args
    desirables[26] = {ESkoarToke::SkoarpionArgs};

    // opt_newline
    desirables[27] = {ESkoarToke::Newline};

    // args_entries
    desirables[28] = {ESkoarToke::SymbolColon};
    desirables[29] = {ESkoarToke::SymbolName};

    // moar_args_entries
    desirables[30] = {ESkoarToke::ListSep, ESkoarToke::Newline, ESkoarToke::SkoarpionStart};

    // moar_args_entries_prime
    desirables[31] = {ESkoarToke::ListSep};

    // skrp_suffix
    desirables[32] = {ESkoarToke::Fairy, ESkoarToke::LoopS, ESkoarToke::Quarters, ESkoarToke::SkoarpionEnd,
                      ESkoarToke::MeditationS, ESkoarToke::SymbolColon, ESkoarToke::Deref, ESkoarToke::Coda,
                      ESkoarToke::Float, ESkoarToke::Lute, ESkoarToke::ExactRest, ESkoarToke::AUGenWithArgs,
                      ESkoarToke::Duration, ESkoarToke::KUGenWithArgs, ESkoarToke::Freq, ESkoarToke::LuteWithArgs,
                      ESkoarToke::SkoarpionStart, ESkoarToke::KUGen, ESkoarToke::Voice, ESkoarToke::CondS,
                      ESkoarToke::BracketS, ESkoarToke::ExactBeat, ESkoarToke::DUGenWithArgs, ESkoarToke::Cat,
                      ESkoarToke::OctaveShift, ESkoarToke::ListS, ESkoarToke::AlCoda, ESkoarToke::Newline,
                      ESkoarToke::Symbol, ESkoarToke::SkoarpionArgs, ESkoarToke::False, ESkoarToke::Carrot,
                      ESkoarToke::String, ESkoarToke::Comment, ESkoarToke::NamedNoat, ESkoarToke::Bars,
                      ESkoarToke::Tuplet, ESkoarToke::Eighths, ESkoarToke::Crotchets, ESkoarToke::LWing,
                      ESkoarToke::Quavers, ESkoarToke::Int, ESkoarToke::DUGen, ESkoarToke::Choard,
                      ESkoarToke::AUGen, ESkoarToke::True, ESkoarToke::HashLevel};

    // skoarpion
    desirables[33] = {ESkoarToke::SkoarpionArgs, ESkoarToke::SkoarpionStart};

    // skrp_lines
    desirables[34] = {ESkoarToke::Fairy, ESkoarToke::MeditationE, ESkoarToke::LoopS, ESkoarToke::Quarters,
                      ESkoarToke::SkoarpionEnd, ESkoarToke::MeditationS, ESkoarToke::SymbolColon, ESkoarToke::Deref,
                      ESkoarToke::Coda, ESkoarToke::Float, ESkoarToke::Lute, ESkoarToke::ExactRest,
                      ESkoarToke::AUGenWithArgs, ESkoarToke::Duration, ESkoarToke::KUGenWithArgs, ESkoarToke::Freq,
                      ESkoarToke::LuteWithArgs, ESkoarToke::SkoarpionStart, ESkoarToke::KUGen, ESkoarToke::Voice,
                      ESkoarToke::CondS, ESkoarToke::BracketS, ESkoarToke::ExactBeat, ESkoarToke::DUGenWithArgs,
                      ESkoarToke::Cat, ESkoarToke::OctaveShift, ESkoarToke::ListS, ESkoarToke::AlCoda,
                      ESkoarToke::Newline, ESkoarToke::Symbol, ESkoarToke::SkoarpionArgs, ESkoarToke::False,
                      ESkoarToke::Carrot, ESkoarToke::String, ESkoarToke::Comment, ESkoarToke::NamedNoat,
                      ESkoarToke::Bars, ESkoarToke::Tuplet, ESkoarToke::Eighths, ESkoarToke::Crotchets,
                      ESkoarToke::LWing, ESkoarToke::Quavers, ESkoarToke::Int, ESkoarToke::DUGen,
                      ESkoarToke::Choard, ESkoarToke::AUGen, ESkoarToke::True, ESkoarToke::HashLevel};

    // skrp_moar_lines
    desirables[35] = {ESkoarToke::Newline};

    // listy_suffix
    desirables[36] = {ESkoarToke::Newline};
    desirables[37] = {ESkoarToke::Fairy, ESkoarToke::LoopS, ESkoarToke::MeditationS, ESkoarToke::SymbolColon,
                      ESkoarToke::Deref, ESkoarToke::Float, ESkoarToke::Lute, ESkoarToke::AUGenWithArgs,
                      ESkoarToke::Duration, ESkoarToke::KUGenWithArgs, ESkoarToke::Freq, ESkoarToke::LuteWithArgs,
                      ESkoarToke::SkoarpionStart, ESkoarToke::KUGen, ESkoarToke::CondS, ESkoarToke::BracketS,
                      ESkoarToke::DUGenWithArgs, ESkoarToke::Cat, ESkoarToke::OctaveShift, ESkoarToke::ListS,
                      ESkoarToke::Symbol, ESkoarToke::SkoarpionArgs, ESkoarToke::False, ESkoarToke::Carrot,
                      ESkoarToke::String, ESkoarToke::NamedNoat, ESkoarToke::Tuplet, ESkoarToke::LWing,
                      ESkoarToke::DUGen, ESkoarToke::Int, ESkoarToke::Choard, ESkoarToke::AUGen,
                      ESkoarToke::True, ESkoarToke::HashLevel};
    desirables[38] = {ESkoarToke::ListE};

    // listy
    desirables[39] = {ESkoarToke::ListS};

    // listy_entries
    desirables[40] = {ESkoarToke::Fairy, ESkoarToke::LoopS, ESkoarToke::MeditationS, ESkoarToke::SymbolColon,
                      ESkoarToke::Deref, ESkoarToke::Float, ESkoarToke::Lute, ESkoarToke::AUGenWithArgs,
                      ESkoarToke::Duration, ESkoarToke::KUGenWithArgs, ESkoarToke::Freq, ESkoarToke::LuteWithArgs,
                      ESkoarToke::SkoarpionStart, ESkoarToke::KUGen, ESkoarToke::CondS, ESkoarToke::BracketS,
                      ESkoarToke::DUGenWithArgs, ESkoarToke::Cat, ESkoarToke::OctaveShift, ESkoarToke::ListS,
                      ESkoarToke::Symbol, ESkoarToke::SkoarpionArgs, ESkoarToke::False, ESkoarToke::Carrot,
                      ESkoarToke::String, ESkoarToke::NamedNoat, ESkoarToke::Tuplet, ESkoarToke::LWing,
                      ESkoarToke::DUGen, ESkoarToke::Int, ESkoarToke::Choard, ESkoarToke::AUGen,
                      ESkoarToke::True, ESkoarToke::HashLevel};

    // moar_listy_entries
    desirables[41] = {ESkoarToke::ListSep};
    desirables[42] = {ESkoarToke::Newline};
    desirables[43] = {ESkoarToke::Fairy, ESkoarToke::LoopS, ESkoarToke::MeditationS, ESkoarToke::SymbolColon,
                      ESkoarToke::Deref, ESkoarToke::Float, ESkoarToke::Lute, ESkoarToke::AUGenWithArgs,
                      ESkoarToke::Duration, ESkoarToke::KUGenWithArgs, ESkoarToke::Freq, ESkoarToke::LuteWithArgs,
                      ESkoarToke::SkoarpionStart, ESkoarToke::KUGen, ESkoarToke::CondS, ESkoarToke::BracketS,
                      ESkoarToke::DUGenWithArgs, ESkoarToke::Cat, ESkoarToke::OctaveShift, ESkoarToke::ListS,
                      ESkoarToke::Symbol, ESkoarToke::SkoarpionArgs, ESkoarToke::False, ESkoarToke::Carrot,
                      ESkoarToke::String, ESkoarToke::NamedNoat, ESkoarToke::Tuplet, ESkoarToke::LWing,
                      ESkoarToke::DUGen, ESkoarToke::Int, ESkoarToke::Choard, ESkoarToke::AUGen,
                      ESkoarToke::True, ESkoarToke::HashLevel};

    // regular_beat
    desirables[44] = {ESkoarToke::Crotchets};
    desirables[45] = {ESkoarToke::Quavers};
    desirables[46] = {ESkoarToke::Quarters};
    desirables[47] = {ESkoarToke::Eighths};

    // exact_beat
    desirables[48] = {ESkoarToke::ExactBeat};

    // exact_rest
    desirables[49] = {ESkoarToke::ExactRest};

    // ottavas
    desirables[50] = {ESkoarToke::OctaveShift};

    // musical_keyword
    desirables[51] = {ESkoarToke::OctaveShift};
    desirables[52] = {ESkoarToke::Carrot};

    // musical_keyword_misc
    desirables[53] = {ESkoarToke::Carrot};

    // cthulhu
    desirables[54] = {ESkoarToke::LWing};

    // nouny
    desirables[55] = {ESkoarToke::LWing};
    desirables[56] = {ESkoarToke::MeditationS};
    desirables[57] = {ESkoarToke::CondS};
    desirables[58] = {ESkoarToke::LoopS};
    desirables[59] = {ESkoarToke::Fairy, ESkoarToke::DUGenWithArgs, ESkoarToke::Cat, ESkoarToke::Float,
                      ESkoarToke::Lute, ESkoarToke::Symbol, ESkoarToke::False, ESkoarToke::AUGenWithArgs,
                      ESkoarToke::Duration, ESkoarToke::KUGenWithArgs, ESkoarToke::String, ESkoarToke::NamedNoat,
                      ESkoarToke::Freq, ESkoarToke::Tuplet, ESkoarToke::LuteWithArgs, ESkoarToke::KUGen,
                      ESkoarToke::DUGen, ESkoarToke::Int, ESkoarToke::Choard, ESkoarToke::AUGen,
                      ESkoarToke::True, ESkoarToke::HashLevel};
    desirables[60] = {ESkoarToke::OctaveShift, ESkoarToke::Carrot};
    desirables[61] = {ESkoarToke::ListS};
    desirables[62] = {ESkoarToke::Deref};
    desirables[63] = {ESkoarToke::SkoarpionArgs, ESkoarToke::SkoarpionStart};

    // meditation
    desirables[64] = {ESkoarToke::MeditationS};

    // conditional
    desirables[65] = {ESkoarToke::CondS};

    // loop
    desirables[66] = {ESkoarToke::LoopS};

    // nouny_literal
    desirables[67] = {ESkoarToke::Duration};
    desirables[68] = {ESkoarToke::KUGen, ESkoarToke::DUGen, ESkoarToke::DUGenWithArgs, ESkoarToke::AUGenWithArgs,
                      ESkoarToke::AUGen, ESkoarToke::KUGenWithArgs};
    desirables[69] = {ESkoarToke::Tuplet};
    desirables[70] = {ESkoarToke::Freq};
    desirables[71] = {ESkoarToke::Int};
    desirables[72] = {ESkoarToke::Float};
    desirables[73] = {ESkoarToke::String};
    desirables[74] = {ESkoarToke::Choard};
    desirables[75] = {ESkoarToke::NamedNoat};
    desirables[76] = {ESkoarToke::Symbol};
    desirables[77] = {ESkoarToke::Fairy};
    desirables[78] = {ESkoarToke::HashLevel};
    desirables[79] = {ESkoarToke::False};
    desirables[80] = {ESkoarToke::True};
    desirables[81] = {ESkoarToke::Cat};
    desirables[82] = {ESkoarToke::Lute, ESkoarToke::LuteWithArgs};

    // deref
    desirables[83] = {ESkoarToke::Deref};

    // ugen
    desirables[84] = {ESkoarToke::KUGenWithArgs, ESkoarToke::DUGenWithArgs, ESkoarToke::AUGenWithArgs};
    desirables[85] = {ESkoarToke::AUGen, ESkoarToke::KUGen, ESkoarToke::DUGen};

    // lute
    desirables[86] = {ESkoarToke::Lute};
    desirables[87] = {ESkoarToke::LuteWithArgs};

    // deref_prime
    desirables[88] = {ESkoarToke::MsgNameWithArgs};
    desirables[89] = {ESkoarToke::MsgName};

    // msg_chain_node
    desirables[90] = {ESkoarToke::MsgOp};

    // msgable
    desirables[91] = {ESkoarToke::Fairy, ESkoarToke::LoopS, ESkoarToke::MeditationS, ESkoarToke::Deref,
                      ESkoarToke::Float, ESkoarToke::Lute, ESkoarToke::AUGenWithArgs, ESkoarToke::Duration,
                      ESkoarToke::KUGenWithArgs, ESkoarToke::Freq, ESkoarToke::LuteWithArgs, ESkoarToke::SkoarpionStart,
                      ESkoarToke::KUGen, ESkoarToke::CondS, ESkoarToke::DUGenWithArgs, ESkoarToke::Cat,
                      ESkoarToke::OctaveShift, ESkoarToke::ListS, ESkoarToke::Symbol, ESkoarToke::SkoarpionArgs,
                      ESkoarToke::False, ESkoarToke::Carrot, ESkoarToke::String, ESkoarToke::NamedNoat,
                      ESkoarToke::Tuplet, ESkoarToke::LWing, ESkoarToke::DUGen, ESkoarToke::Int,
                      ESkoarToke::Choard, ESkoarToke::AUGen, ESkoarToke::True, ESkoarToke::HashLevel};

    // msg
    desirables[92] = {ESkoarToke::MsgNameWithArgs};
    desirables[93] = {ESkoarToke::MsgName};
    desirables[94] = {ESkoarToke::ListS};
    desirables[95] = {ESkoarToke::LoopS};

    // cthulhu_prime
    desirables[96] = {ESkoarToke::Fairy, ESkoarToke::LoopS, ESkoarToke::MeditationS, ESkoarToke::SymbolColon,
                      ESkoarToke::Deref, ESkoarToke::Float, ESkoarToke::Lute, ESkoarToke::AUGenWithArgs,
                      ESkoarToke::Duration, ESkoarToke::KUGenWithArgs, ESkoarToke::Freq, ESkoarToke::LuteWithArgs,
                      ESkoarToke::SkoarpionStart, ESkoarToke::KUGen, ESkoarToke::CondS, ESkoarToke::BracketS,
                      ESkoarToke::DUGenWithArgs, ESkoarToke::Cat, ESkoarToke::OctaveShift, ESkoarToke::ListS,
                      ESkoarToke::Symbol, ESkoarToke::SkoarpionArgs, ESkoarToke::False, ESkoarToke::Carrot,
                      ESkoarToke::String, ESkoarToke::NamedNoat, ESkoarToke::Tuplet, ESkoarToke::LWing,
                      ESkoarToke::DUGen, ESkoarToke::Int, ESkoarToke::Choard, ESkoarToke::AUGen,
                      ESkoarToke::True, ESkoarToke::HashLevel};
    desirables[97] = {ESkoarToke::Nosey};

    // boolean_expr
    desirables[98] = {ESkoarToke::Fairy, ESkoarToke::LoopS, ESkoarToke::MeditationS, ESkoarToke::SymbolColon,
                      ESkoarToke::Deref, ESkoarToke::Float, ESkoarToke::Lute, ESkoarToke::AUGenWithArgs,
                      ESkoarToke::Duration, ESkoarToke::KUGenWithArgs, ESkoarToke::Freq, ESkoarToke::LuteWithArgs,
                      ESkoarToke::SkoarpionStart, ESkoarToke::KUGen, ESkoarToke::CondS, ESkoarToke::BracketS,
                      ESkoarToke::DUGenWithArgs, ESkoarToke::Cat, ESkoarToke::OctaveShift, ESkoarToke::ListS,
                      ESkoarToke::Symbol, ESkoarToke::SkoarpionArgs, ESkoarToke::False, ESkoarToke::Carrot,
                      ESkoarToke::String, ESkoarToke::NamedNoat, ESkoarToke::Tuplet, ESkoarToke::LWing,
                      ESkoarToke::DUGen, ESkoarToke::Int, ESkoarToke::Choard, ESkoarToke::AUGen,
                      ESkoarToke::True, ESkoarToke::HashLevel};

    // cond_if
    desirables[99] = {ESkoarToke::Fairy, ESkoarToke::LoopS, ESkoarToke::MeditationS, ESkoarToke::SymbolColon,
                      ESkoarToke::Deref, ESkoarToke::Float, ESkoarToke::Lute, ESkoarToke::AUGenWithArgs,
                      ESkoarToke::Duration, ESkoarToke::KUGenWithArgs, ESkoarToke::Freq, ESkoarToke::LuteWithArgs,
                      ESkoarToke::SkoarpionStart, ESkoarToke::KUGen, ESkoarToke::CondS, ESkoarToke::BracketS,
                      ESkoarToke::DUGenWithArgs, ESkoarToke::Cat, ESkoarToke::OctaveShift, ESkoarToke::ListS,
                      ESkoarToke::Newline, ESkoarToke::Symbol, ESkoarToke::SkoarpionArgs, ESkoarToke::False,
                      ESkoarToke::Carrot, ESkoarToke::String, ESkoarToke::NamedNoat, ESkoarToke::Tuplet,
                      ESkoarToke::LWing, ESkoarToke::DUGen, ESkoarToke::Int, ESkoarToke::Choard,
                      ESkoarToke::AUGen, ESkoarToke::True, ESkoarToke::HashLevel};

    // if_body
    desirables[100] = {ESkoarToke::Fairy, ESkoarToke::CondIf, ESkoarToke::LoopS, ESkoarToke::Quarters,
                      ESkoarToke::MeditationS, ESkoarToke::SymbolColon, ESkoarToke::Deref, ESkoarToke::Coda,
                      ESkoarToke::Float, ESkoarToke::Lute, ESkoarToke::ExactRest, ESkoarToke::AUGenWithArgs,
                      ESkoarToke::Duration, ESkoarToke::KUGenWithArgs, ESkoarToke::Freq, ESkoarToke::LuteWithArgs,
                      ESkoarToke::SkoarpionStart, ESkoarToke::KUGen, ESkoarToke::CondS, ESkoarToke::BracketS,
                      ESkoarToke::ExactBeat, ESkoarToke::DUGenWithArgs, ESkoarToke::Cat, ESkoarToke::OctaveShift,
                      ESkoarToke::ListS, ESkoarToke::AlCoda, ESkoarToke::Newline, ESkoarToke::Symbol,
                      ESkoarToke::CondE, ESkoarToke::SkoarpionArgs, ESkoarToke::False, ESkoarToke::Carrot,
                      ESkoarToke::String, ESkoarToke::Comment, ESkoarToke::NamedNoat, ESkoarToke::Bars,
                      ESkoarToke::Tuplet, ESkoarToke::Eighths, ESkoarToke::Crotchets, ESkoarToke::LWing,
                      ESkoarToke::Quavers, ESkoarToke::Int, ESkoarToke::DUGen, ESkoarToke::Choard,
                      ESkoarToke::AUGen, ESkoarToke::True, ESkoarToke::HashLevel};

    // cond_else
    desirables[101] = {ESkoarToke::CondIf};

    // loop_body
    desirables[102] = {ESkoarToke::Fairy, ESkoarToke::LoopE, ESkoarToke::LoopS, ESkoarToke::Quarters,
                      ESkoarToke::MeditationS, ESkoarToke::SymbolColon, ESkoarToke::Deref, ESkoarToke::Coda,
                      ESkoarToke::Float, ESkoarToke::Lute, ESkoarToke::ExactRest, ESkoarToke::AUGenWithArgs,
                      ESkoarToke::Duration, ESkoarToke::KUGenWithArgs, ESkoarToke::Freq, ESkoarToke::LuteWithArgs,
                      ESkoarToke::SkoarpionStart, ESkoarToke::KUGen, ESkoarToke::CondS, ESkoarToke::BracketS,
                      ESkoarToke::LoopSep, ESkoarToke::ExactBeat, ESkoarToke::DUGenWithArgs, ESkoarToke::Cat,
                      ESkoarToke::OctaveShift, ESkoarToke::ListS, ESkoarToke::AlCoda, ESkoarToke::Newline,
                      ESkoarToke::Symbol, ESkoarToke::SkoarpionArgs, ESkoarToke::False, ESkoarToke::Carrot,
                      ESkoarToke::String, ESkoarToke::Comment, ESkoarToke::NamedNoat, ESkoarToke::Bars,
                      ESkoarToke::Tuplet, ESkoarToke::Eighths, ESkoarToke::Crotchets, ESkoarToke::LWing,
                      ESkoarToke::Quavers, ESkoarToke::Int, ESkoarToke::DUGen, ESkoarToke::Choard,
                      ESkoarToke::AUGen, ESkoarToke::True, ESkoarToke::HashLevel};

    // loop_condition
    desirables[103] = {ESkoarToke::LoopSep};

    // ugen_with_args
    desirables[104] = {ESkoarToke::AUGenWithArgs};
    desirables[105] = {ESkoarToke::KUGenWithArgs};
    desirables[106] = {ESkoarToke::DUGenWithArgs};

    // ugen_simple
    desirables[107] = {ESkoarToke::AUGen};
    desirables[108] = {ESkoarToke::KUGen};
    desirables[109] = {ESkoarToke::DUGen};

    // times
    desirables[110] = {ESkoarToke::Times};

    // assignment
    desirables[111] = {ESkoarToke::SymbolColon};
    desirables[112] = {ESkoarToke::Fairy, ESkoarToke::LoopS, ESkoarToke::MeditationS, ESkoarToke::Deref,
                      ESkoarToke::Float, ESkoarToke::Lute, ESkoarToke::AUGenWithArgs, ESkoarToke::Duration,
                      ESkoarToke::KUGenWithArgs, ESkoarToke::Freq, ESkoarToke::LuteWithArgs, ESkoarToke::SkoarpionStart,
                      ESkoarToke::KUGen, ESkoarToke::CondS, ESkoarToke::BracketS, ESkoarToke::DUGenWithArgs,
                      ESkoarToke::Cat, ESkoarToke::OctaveShift, ESkoarToke::ListS, ESkoarToke::Symbol,
                      ESkoarToke::SkoarpionArgs, ESkoarToke::False, ESkoarToke::Carrot, ESkoarToke::String,
                      ESkoarToke::NamedNoat, ESkoarToke::Tuplet, ESkoarToke::LWing, ESkoarToke::DUGen,
                      ESkoarToke::Int, ESkoarToke::Choard, ESkoarToke::AUGen, ESkoarToke::True,
                      ESkoarToke::HashLevel};

    // opt_times
    desirables[113] = {ESkoarToke::Times};

    // boolean_or
    desirables[114] = {ESkoarToke::Fairy, ESkoarToke::LoopS, ESkoarToke::MeditationS, ESkoarToke::Deref,
                      ESkoarToke::Float, ESkoarToke::Lute, ESkoarToke::AUGenWithArgs, ESkoarToke::Duration,
                      ESkoarToke::KUGenWithArgs, ESkoarToke::Freq, ESkoarToke::LuteWithArgs, ESkoarToke::SkoarpionStart,
                      ESkoarToke::KUGen, ESkoarToke::CondS, ESkoarToke::BracketS, ESkoarToke::DUGenWithArgs,
                      ESkoarToke::Cat, ESkoarToke::OctaveShift, ESkoarToke::ListS, ESkoarToke::Symbol,
                      ESkoarToke::SkoarpionArgs, ESkoarToke::False, ESkoarToke::Carrot, ESkoarToke::String,
                      ESkoarToke::NamedNoat, ESkoarToke::Tuplet, ESkoarToke::LWing, ESkoarToke::DUGen,
                      ESkoarToke::Int, ESkoarToke::Choard, ESkoarToke::AUGen, ESkoarToke::True,
                      ESkoarToke::HashLevel};

    // boolean_and
    desirables[115] = {ESkoarToke::Fairy, ESkoarToke::LoopS, ESkoarToke::MeditationS, ESkoarToke::Deref,
                      ESkoarToke::Float, ESkoarToke::Lute, ESkoarToke::AUGenWithArgs, ESkoarToke::Duration,
                      ESkoarToke::KUGenWithArgs, ESkoarToke::Freq, ESkoarToke::LuteWithArgs, ESkoarToke::SkoarpionStart,
                      ESkoarToke::KUGen, ESkoarToke::CondS, ESkoarToke::BracketS, ESkoarToke::DUGenWithArgs,
                      ESkoarToke::Cat, ESkoarToke::OctaveShift, ESkoarToke::ListS, ESkoarToke::Symbol,
                      ESkoarToke::SkoarpionArgs, ESkoarToke::False, ESkoarToke::Carrot, ESkoarToke::String,
                      ESkoarToke::NamedNoat, ESkoarToke::Tuplet, ESkoarToke::LWing, ESkoarToke::DUGen,
                      ESkoarToke::Int, ESkoarToke::Choard, ESkoarToke::AUGen, ESkoarToke::True,
                      ESkoarToke::HashLevel};

    // boolean_or_prime
    desirables[116] = {ESkoarToke::BooleanOr};

    // cmp_eq_neq
    desirables[117] = {ESkoarToke::Fairy, ESkoarToke::LoopS, ESkoarToke::MeditationS, ESkoarToke::Deref,
                      ESkoarToke::Float, ESkoarToke::Lute, ESkoarToke::AUGenWithArgs, ESkoarToke::Duration,
                      ESkoarToke::KUGenWithArgs, ESkoarToke::Freq, ESkoarToke::LuteWithArgs, ESkoarToke::SkoarpionStart,
                      ESkoarToke::KUGen, ESkoarToke::CondS, ESkoarToke::BracketS, ESkoarToke::DUGenWithArgs,
                      ESkoarToke::Cat, ESkoarToke::OctaveShift, ESkoarToke::ListS, ESkoarToke::Symbol,
                      ESkoarToke::SkoarpionArgs, ESkoarToke::False, ESkoarToke::Carrot, ESkoarToke::String,
                      ESkoarToke::NamedNoat, ESkoarToke::Tuplet, ESkoarToke::LWing, ESkoarToke::DUGen,
                      ESkoarToke::Int, ESkoarToke::Choard, ESkoarToke::AUGen, ESkoarToke::True,
                      ESkoarToke::HashLevel};

    // boolean_and_prime
    desirables[118] = {ESkoarToke::BooleanAnd};

    // cmp_gt_lt
    desirables[119] = {ESkoarToke::Fairy, ESkoarToke::LoopS, ESkoarToke::MeditationS, ESkoarToke::Deref,
                      ESkoarToke::Float, ESkoarToke::Lute, ESkoarToke::AUGenWithArgs, ESkoarToke::Duration,
                      ESkoarToke::KUGenWithArgs, ESkoarToke::Freq, ESkoarToke::LuteWithArgs, ESkoarToke::SkoarpionStart,
                      ESkoarToke::KUGen, ESkoarToke::CondS, ESkoarToke::BracketS, ESkoarToke::DUGenWithArgs,
                      ESkoarToke::Cat, ESkoarToke::OctaveShift, ESkoarToke::ListS, ESkoarToke::Symbol,
                      ESkoarToke::SkoarpionArgs, ESkoarToke::False, ESkoarToke::Carrot, ESkoarToke::String,
                      ESkoarToke::NamedNoat, ESkoarToke::Tuplet, ESkoarToke::LWing, ESkoarToke::DUGen,
                      ESkoarToke::Int, ESkoarToke::Choard, ESkoarToke::AUGen, ESkoarToke::True,
                      ESkoarToke::HashLevel};

    // cmp_eq_neq_prime
    desirables[120] = {ESkoarToke::CmpEqNeq};

    // math_add_sub
    desirables[121] = {ESkoarToke::Fairy, ESkoarToke::LoopS, ESkoarToke::MeditationS, ESkoarToke::Deref,
                      ESkoarToke::Float, ESkoarToke::Lute, ESkoarToke::AUGenWithArgs, ESkoarToke::Duration,
                      ESkoarToke::KUGenWithArgs, ESkoarToke::Freq, ESkoarToke::LuteWithArgs, ESkoarToke::SkoarpionStart,
                      ESkoarToke::KUGen, ESkoarToke::CondS, ESkoarToke::BracketS, ESkoarToke::DUGenWithArgs,
                      ESkoarToke::Cat, ESkoarToke::OctaveShift, ESkoarToke::ListS, ESkoarToke::Symbol,
                      ESkoarToke::SkoarpionArgs, ESkoarToke::False, ESkoarToke::Carrot, ESkoarToke::String,
                      ESkoarToke::NamedNoat, ESkoarToke::Tuplet, ESkoarToke::LWing, ESkoarToke::DUGen,
                      ESkoarToke::Int, ESkoarToke::Choard, ESkoarToke::AUGen, ESkoarToke::True,
                      ESkoarToke::HashLevel};

    // cmp_gt_lt_prime
    desirables[122] = {ESkoarToke::CmpGtLt};

    // math_mul_div_mod
    desirables[123] = {ESkoarToke::Fairy, ESkoarToke::LoopS, ESkoarToke::MeditationS, ESkoarToke::Deref,
                      ESkoarToke::Float, ESkoarToke::Lute, ESkoarToke::AUGenWithArgs, ESkoarToke::Duration,
                      ESkoarToke::KUGenWithArgs, ESkoarToke::Freq, ESkoarToke::LuteWithArgs, ESkoarToke::SkoarpionStart,
                      ESkoarToke::KUGen, ESkoarToke::CondS, ESkoarToke::BracketS, ESkoarToke::DUGenWithArgs,
                      ESkoarToke::Cat, ESkoarToke::OctaveShift, ESkoarToke::ListS, ESkoarToke::Symbol,
                      ESkoarToke::SkoarpionArgs, ESkoarToke::False, ESkoarToke::Carrot, ESkoarToke::String,
                      ESkoarToke::NamedNoat, ESkoarToke::Tuplet, ESkoarToke::LWing, ESkoarToke::DUGen,
                      ESkoarToke::Int, ESkoarToke::Choard, ESkoarToke::AUGen, ESkoarToke::True,
                      ESkoarToke::HashLevel};

    // math_add_sub_prime
    desirables[124] = {ESkoarToke::MathOpAddSub};

    // expr_h
    desirables[125] = {ESkoarToke::BracketS};
    desirables[126] = {ESkoarToke::Fairy, ESkoarToke::LoopS, ESkoarToke::MeditationS, ESkoarToke::Deref,
                      ESkoarToke::Float, ESkoarToke::Lute, ESkoarToke::AUGenWithArgs, ESkoarToke::Duration,
                      ESkoarToke::KUGenWithArgs, ESkoarToke::Freq, ESkoarToke::LuteWithArgs, ESkoarToke::SkoarpionStart,
                      ESkoarToke::KUGen, ESkoarToke::CondS, ESkoarToke::DUGenWithArgs, ESkoarToke::Cat,
                      ESkoarToke::OctaveShift, ESkoarToke::ListS, ESkoarToke::Symbol, ESkoarToke::SkoarpionArgs,
                      ESkoarToke::False, ESkoarToke::Carrot, ESkoarToke::String, ESkoarToke::NamedNoat,
                      ESkoarToke::Tuplet, ESkoarToke::LWing, ESkoarToke::DUGen, ESkoarToke::Int,
                      ESkoarToke::Choard, ESkoarToke::AUGen, ESkoarToke::True, ESkoarToke::HashLevel};

    // math_mul_div_mod_prime
    desirables[127] = {ESkoarToke::MathOpMulDivMod};
}


static SkoarStats* skoarStats = nullptr;

bool localCmp(const ESkoarToke::Kind &a, const ESkoarToke::Kind &b) {
    return skoarStats->tokeFreq[a] > skoarStats->tokeFreq[b]; 
}
    
void localSortDesirables() {
    for (int i = 0; i < 128; ++i) {
        skoarStats->desirables[i].sort(localCmp);    
    }
}



void SkoarParser::init() {
    skoarStats = new SkoarStats();
}

SkoarNoadPtr SkoarParser::branches(SkoarNoadPtr parent) {
    SkoarNoadPtr noad = parent;
    list<ESkoarToke::Kind>* desires = nullptr;

    if (++deep > 1000) {
        this->fail_too_deep(parent);
    }

    // branches -> branch branches
    desires = &skoarStats->desirables[0];
    if (toker->sees(desires) != nullptr) {
        SkoarNoadPtr toke_noad;
        noad->add_noad(this->branch(noad));
        this->branches(noad);
        --deep;
        return noad;
    }

    // <e>
    --deep;
    return noad;
}

SkoarNoadPtr SkoarParser::skoar(SkoarNoadPtr parent) {
    SkoarNoadPtr noad = SkoarNoad::New<ESkoarNoad::skoar>(L"skoar", parent);
    list<ESkoarToke::Kind>* desires = nullptr;

    if (++deep > 1000) {
        this->fail_too_deep(parent);
    }

    // skoar -> branches
    desires = &skoarStats->desirables[1];
    if (toker->sees(desires) != nullptr) {
        SkoarNoadPtr toke_noad;
        this->branches(noad);
        --deep;
        return noad;
    }

    // Error State
    this->fail(noad);
    return nullptr;
}

SkoarNoadPtr SkoarParser::branch(SkoarNoadPtr parent) {
    SkoarNoadPtr noad = SkoarNoad::New<ESkoarNoad::branch>(L"branch", parent);
    list<ESkoarToke::Kind>* desires = nullptr;

    if (++deep > 1000) {
        this->fail_too_deep(parent);
    }

    // branch -> opt_voiced_phrases Newline
    desires = &skoarStats->desirables[2];
    if (toker->sees(desires) != nullptr) {
        SkoarNoadPtr toke_noad;
        noad->add_noad(this->opt_voiced_phrases(noad));
        skoarStats->tokeFreq[ESkoarToke::Newline] += 0.1f;
        toke_noad = SkoarNoad::New(L"Toke_Newline", noad, toker->burn(ESkoarToke::Newline, noad));
        noad->add_noad(toke_noad);
        --deep;
        return noad;
    }

    // Error State
    this->fail(noad);
    return nullptr;
}

SkoarNoadPtr SkoarParser::opt_voiced_phrases(SkoarNoadPtr parent) {
    SkoarNoadPtr noad = SkoarNoad::New<ESkoarNoad::opt_voiced_phrases>(L"opt_voiced_phrases", parent);
    list<ESkoarToke::Kind>* desires = nullptr;

    if (++deep > 1000) {
        this->fail_too_deep(parent);
    }

    // opt_voiced_phrases -> optional_voice phrases
    desires = &skoarStats->desirables[3];
    if (toker->sees(desires) != nullptr) {
        SkoarNoadPtr toke_noad;
        this->optional_voice(noad);
        this->phrases(noad);
        --deep;
        return noad;
    }

    // Error State
    this->fail(noad);
    return nullptr;
}

SkoarNoadPtr SkoarParser::optional_voice(SkoarNoadPtr parent) {
    SkoarNoadPtr noad = parent;
    list<ESkoarToke::Kind>* desires = nullptr;

    if (++deep > 1000) {
        this->fail_too_deep(parent);
    }

    // optional_voice -> Voice
    desires = &skoarStats->desirables[4];
    if (toker->sees(desires) != nullptr) {
        SkoarNoadPtr toke_noad;
        skoarStats->tokeFreq[ESkoarToke::Voice] += 0.1f;
        toke_noad = SkoarNoad::New(L"Toke_Voice", noad, toker->burn(ESkoarToke::Voice, noad));
        noad->add_noad(toke_noad);
        --deep;
        return noad;
    }

    // <e>
    --deep;
    return noad;
}

SkoarNoadPtr SkoarParser::phrases(SkoarNoadPtr parent) {
    SkoarNoadPtr noad = parent;
    list<ESkoarToke::Kind>* desires = nullptr;

    if (++deep > 1000) {
        this->fail_too_deep(parent);
    }

    // phrases -> phrasey phrases
    desires = &skoarStats->desirables[5];
    if (toker->sees(desires) != nullptr) {
        SkoarNoadPtr toke_noad;
        this->phrasey(noad);
        this->phrases(noad);
        --deep;
        return noad;
    }

    // <e>
    --deep;
    return noad;
}

SkoarNoadPtr SkoarParser::phrasey(SkoarNoadPtr parent) {
    SkoarNoadPtr noad = parent;
    list<ESkoarToke::Kind>* desires = nullptr;

    if (++deep > 1000) {
        this->fail_too_deep(parent);
    }

    // phrasey -> Comment
    desires = &skoarStats->desirables[6];
    if (toker->sees(desires) != nullptr) {
        SkoarNoadPtr toke_noad;
        skoarStats->tokeFreq[ESkoarToke::Comment] += 0.1f;
        toke_noad = SkoarNoad::New(L"Toke_Comment", noad, toker->burn(ESkoarToke::Comment, noad));
        noad->add_noad(toke_noad);
        --deep;
        return noad;
    }

    // phrasey -> marker
    desires = &skoarStats->desirables[7];
    if (toker->sees(desires) != nullptr) {
        SkoarNoadPtr toke_noad;
        noad->add_noad(this->marker(noad));
        --deep;
        return noad;
    }

    // phrasey -> expr
    desires = &skoarStats->desirables[8];
    if (toker->sees(desires) != nullptr) {
        SkoarNoadPtr toke_noad;
        noad->add_noad(this->expr(noad));
        --deep;
        return noad;
    }

    // phrasey -> al_goto
    desires = &skoarStats->desirables[9];
    if (toker->sees(desires) != nullptr) {
        SkoarNoadPtr toke_noad;
        noad->add_noad(this->al_goto(noad));
        --deep;
        return noad;
    }

    // phrasey -> beat
    desires = &skoarStats->desirables[10];
    if (toker->sees(desires) != nullptr) {
        SkoarNoadPtr toke_noad;
        noad->add_noad(this->beat(noad));
        --deep;
        return noad;
    }

    // Error State
    this->fail(noad);
    return nullptr;
}

SkoarNoadPtr SkoarParser::marker(SkoarNoadPtr parent) {
    SkoarNoadPtr noad = SkoarNoad::New<ESkoarNoad::marker>(L"marker", parent);
    list<ESkoarToke::Kind>* desires = nullptr;

    if (++deep > 1000) {
        this->fail_too_deep(parent);
    }

    // marker -> Coda
    desires = &skoarStats->desirables[11];
    if (toker->sees(desires) != nullptr) {
        SkoarNoadPtr toke_noad;
        skoarStats->tokeFreq[ESkoarToke::Coda] += 0.1f;
        toke_noad = SkoarNoad::New(L"Toke_Coda", noad, toker->burn(ESkoarToke::Coda, noad));
        noad->add_noad(toke_noad);
        --deep;
        return noad;
    }

    // marker -> Bars
    desires = &skoarStats->desirables[12];
    if (toker->sees(desires) != nullptr) {
        SkoarNoadPtr toke_noad;
        skoarStats->tokeFreq[ESkoarToke::Bars] += 0.1f;
        toke_noad = SkoarNoad::New(L"Toke_Bars", noad, toker->burn(ESkoarToke::Bars, noad));
        noad->add_noad(toke_noad);
        --deep;
        return noad;
    }

    // Error State
    this->fail(noad);
    return nullptr;
}

SkoarNoadPtr SkoarParser::expr(SkoarNoadPtr parent) {
    SkoarNoadPtr noad = SkoarNoad::New<ESkoarNoad::expr>(L"expr", parent);
    list<ESkoarToke::Kind>* desires = nullptr;

    if (++deep > 1000) {
        this->fail_too_deep(parent);
    }

    // expr -> assignment opt_times
    desires = &skoarStats->desirables[13];
    if (toker->sees(desires) != nullptr) {
        SkoarNoadPtr toke_noad;
        noad->add_noad(this->assignment(noad));
        this->opt_times(noad);
        --deep;
        return noad;
    }

    // Error State
    this->fail(noad);
    return nullptr;
}

SkoarNoadPtr SkoarParser::al_goto(SkoarNoadPtr parent) {
    SkoarNoadPtr noad = SkoarNoad::New<ESkoarNoad::al_goto>(L"al_goto", parent);
    list<ESkoarToke::Kind>* desires = nullptr;

    if (++deep > 1000) {
        this->fail_too_deep(parent);
    }

    // al_goto -> AlCoda
    desires = &skoarStats->desirables[14];
    if (toker->sees(desires) != nullptr) {
        SkoarNoadPtr toke_noad;
        skoarStats->tokeFreq[ESkoarToke::AlCoda] += 0.1f;
        toke_noad = SkoarNoad::New(L"Toke_AlCoda", noad, toker->burn(ESkoarToke::AlCoda, noad));
        noad->add_noad(toke_noad);
        --deep;
        return noad;
    }

    // Error State
    this->fail(noad);
    return nullptr;
}

SkoarNoadPtr SkoarParser::beat(SkoarNoadPtr parent) {
    SkoarNoadPtr noad = SkoarNoad::New<ESkoarNoad::beat>(L"beat", parent);
    list<ESkoarToke::Kind>* desires = nullptr;

    if (++deep > 1000) {
        this->fail_too_deep(parent);
    }

    // beat -> regular_beat
    desires = &skoarStats->desirables[15];
    if (toker->sees(desires) != nullptr) {
        SkoarNoadPtr toke_noad;
        noad->add_noad(this->regular_beat(noad));
        --deep;
        return noad;
    }

    // beat -> exact_beat
    desires = &skoarStats->desirables[16];
    if (toker->sees(desires) != nullptr) {
        SkoarNoadPtr toke_noad;
        noad->add_noad(this->exact_beat(noad));
        --deep;
        return noad;
    }

    // beat -> exact_rest
    desires = &skoarStats->desirables[17];
    if (toker->sees(desires) != nullptr) {
        SkoarNoadPtr toke_noad;
        noad->add_noad(this->exact_rest(noad));
        --deep;
        return noad;
    }

    // Error State
    this->fail(noad);
    return nullptr;
}

SkoarNoadPtr SkoarParser::phrasish(SkoarNoadPtr parent) {
    SkoarNoadPtr noad = parent;
    list<ESkoarToke::Kind>* desires = nullptr;

    if (++deep > 1000) {
        this->fail_too_deep(parent);
    }

    // phrasish -> Comment
    desires = &skoarStats->desirables[18];
    if (toker->sees(desires) != nullptr) {
        SkoarNoadPtr toke_noad;
        skoarStats->tokeFreq[ESkoarToke::Comment] += 0.1f;
        toke_noad = SkoarNoad::New(L"Toke_Comment", noad, toker->burn(ESkoarToke::Comment, noad));
        noad->add_noad(toke_noad);
        --deep;
        return noad;
    }

    // phrasish -> marker
    desires = &skoarStats->desirables[19];
    if (toker->sees(desires) != nullptr) {
        SkoarNoadPtr toke_noad;
        noad->add_noad(this->marker(noad));
        --deep;
        return noad;
    }

    // phrasish -> expr
    desires = &skoarStats->desirables[20];
    if (toker->sees(desires) != nullptr) {
        SkoarNoadPtr toke_noad;
        noad->add_noad(this->expr(noad));
        --deep;
        return noad;
    }

    // phrasish -> al_goto
    desires = &skoarStats->desirables[21];
    if (toker->sees(desires) != nullptr) {
        SkoarNoadPtr toke_noad;
        noad->add_noad(this->al_goto(noad));
        --deep;
        return noad;
    }

    // phrasish -> beat
    desires = &skoarStats->desirables[22];
    if (toker->sees(desires) != nullptr) {
        SkoarNoadPtr toke_noad;
        noad->add_noad(this->beat(noad));
        --deep;
        return noad;
    }

    // phrasish -> Newline optional_voice
    desires = &skoarStats->desirables[23];
    if (toker->sees(desires) != nullptr) {
        SkoarNoadPtr toke_noad;
        skoarStats->tokeFreq[ESkoarToke::Newline] += 0.1f;
        toke_noad = SkoarNoad::New(L"Toke_Newline", noad, toker->burn(ESkoarToke::Newline, noad));
        noad->add_noad(toke_noad);
        this->optional_voice(noad);
        --deep;
        return noad;
    }

    // Error State
    this->fail(noad);
    return nullptr;
}

SkoarNoadPtr SkoarParser::phrasishes(SkoarNoadPtr parent) {
    SkoarNoadPtr noad = parent;
    list<ESkoarToke::Kind>* desires = nullptr;

    if (++deep > 1000) {
        this->fail_too_deep(parent);
    }

    // phrasishes -> phrasish phrasishes
    desires = &skoarStats->desirables[24];
    if (toker->sees(desires) != nullptr) {
        SkoarNoadPtr toke_noad;
        this->phrasish(noad);
        this->phrasishes(noad);
        --deep;
        return noad;
    }

    // <e>
    --deep;
    return noad;
}

SkoarNoadPtr SkoarParser::args(SkoarNoadPtr parent) {
    SkoarNoadPtr noad = parent;
    list<ESkoarToke::Kind>* desires = nullptr;

    if (++deep > 1000) {
        this->fail_too_deep(parent);
    }

    // args -> opt_newline args_entries
    desires = &skoarStats->desirables[25];
    if (toker->sees(desires) != nullptr) {
        SkoarNoadPtr toke_noad;
        this->opt_newline(noad);
        noad->add_noad(this->args_entries(noad));
        --deep;
        return noad;
    }

    // Error State
    this->fail(noad);
    return nullptr;
}

SkoarNoadPtr SkoarParser::opt_args(SkoarNoadPtr parent) {
    SkoarNoadPtr noad = SkoarNoad::New<ESkoarNoad::opt_args>(L"opt_args", parent);
    list<ESkoarToke::Kind>* desires = nullptr;

    if (++deep > 1000) {
        this->fail_too_deep(parent);
    }

    // opt_args -> SkoarpionArgs args
    desires = &skoarStats->desirables[26];
    if (toker->sees(desires) != nullptr) {
        SkoarNoadPtr toke_noad;
        skoarStats->tokeFreq[ESkoarToke::SkoarpionArgs] += 0.1f;
        toke_noad = SkoarNoad::New(L"Toke_SkoarpionArgs", noad, toker->burn(ESkoarToke::SkoarpionArgs, noad));
        noad->add_noad(toke_noad);
        this->args(noad);
        --deep;
        return noad;
    }

    // <e>
    --deep;
    return noad;
}

SkoarNoadPtr SkoarParser::opt_newline(SkoarNoadPtr parent) {
    SkoarNoadPtr noad = parent;
    list<ESkoarToke::Kind>* desires = nullptr;

    if (++deep > 1000) {
        this->fail_too_deep(parent);
    }

    // opt_newline -> Newline
    desires = &skoarStats->desirables[27];
    if (toker->sees(desires) != nullptr) {
        SkoarNoadPtr toke_noad;
        skoarStats->tokeFreq[ESkoarToke::Newline] += 0.1f;
        toke_noad = SkoarNoad::New(L"Toke_Newline", noad, toker->burn(ESkoarToke::Newline, noad));
        noad->add_noad(toke_noad);
        --deep;
        return noad;
    }

    // <e>
    --deep;
    return noad;
}

SkoarNoadPtr SkoarParser::args_entries(SkoarNoadPtr parent) {
    SkoarNoadPtr noad = SkoarNoad::New<ESkoarNoad::args_entries>(L"args_entries", parent);
    list<ESkoarToke::Kind>* desires = nullptr;

    if (++deep > 1000) {
        this->fail_too_deep(parent);
    }

    // args_entries -> SymbolColon expr moar_args_entries
    desires = &skoarStats->desirables[28];
    if (toker->sees(desires) != nullptr) {
        SkoarNoadPtr toke_noad;
        skoarStats->tokeFreq[ESkoarToke::SymbolColon] += 0.1f;
        toke_noad = SkoarNoad::New(L"Toke_SymbolColon", noad, toker->burn(ESkoarToke::SymbolColon, noad));
        noad->add_noad(toke_noad);
        noad->add_noad(this->expr(noad));
        this->moar_args_entries(noad);
        --deep;
        return noad;
    }

    // args_entries -> SymbolName moar_args_entries
    desires = &skoarStats->desirables[29];
    if (toker->sees(desires) != nullptr) {
        SkoarNoadPtr toke_noad;
        skoarStats->tokeFreq[ESkoarToke::SymbolName] += 0.1f;
        toke_noad = SkoarNoad::New(L"Toke_SymbolName", noad, toker->burn(ESkoarToke::SymbolName, noad));
        noad->add_noad(toke_noad);
        this->moar_args_entries(noad);
        --deep;
        return noad;
    }

    // Error State
    this->fail(noad);
    return nullptr;
}

SkoarNoadPtr SkoarParser::moar_args_entries(SkoarNoadPtr parent) {
    SkoarNoadPtr noad = parent;
    list<ESkoarToke::Kind>* desires = nullptr;

    if (++deep > 1000) {
        this->fail_too_deep(parent);
    }

    // moar_args_entries -> opt_newline moar_args_entries_prime
    desires = &skoarStats->desirables[30];
    if (toker->sees(desires) != nullptr) {
        SkoarNoadPtr toke_noad;
        this->opt_newline(noad);
        this->moar_args_entries_prime(noad);
        --deep;
        return noad;
    }

    // Error State
    this->fail(noad);
    return nullptr;
}

SkoarNoadPtr SkoarParser::moar_args_entries_prime(SkoarNoadPtr parent) {
    SkoarNoadPtr noad = parent;
    list<ESkoarToke::Kind>* desires = nullptr;

    if (++deep > 1000) {
        this->fail_too_deep(parent);
    }

    // moar_args_entries_prime -> ListSep opt_newline args_entries
    desires = &skoarStats->desirables[31];
    if (toker->sees(desires) != nullptr) {
        SkoarNoadPtr toke_noad;
        skoarStats->tokeFreq[ESkoarToke::ListSep] += 0.1f;
        toke_noad = SkoarNoad::New(L"Toke_ListSep", noad, toker->burn(ESkoarToke::ListSep, noad));
        noad->add_noad(toke_noad);
        this->opt_newline(noad);
        noad->add_noad(this->args_entries(noad));
        --deep;
        return noad;
    }

    // <e>
    --deep;
    return noad;
}

SkoarNoadPtr SkoarParser::skrp_suffix(SkoarNoadPtr parent) {
    SkoarNoadPtr noad = SkoarNoad::New<ESkoarNoad::skrp_suffix>(L"skrp_suffix", parent);
    list<ESkoarToke::Kind>* desires = nullptr;

    if (++deep > 1000) {
        this->fail_too_deep(parent);
    }

    // skrp_suffix -> skrp_lines SkoarpionEnd
    desires = &skoarStats->desirables[32];
    if (toker->sees(desires) != nullptr) {
        SkoarNoadPtr toke_noad;
        this->skrp_lines(noad);
        skoarStats->tokeFreq[ESkoarToke::SkoarpionEnd] += 0.1f;
        toke_noad = SkoarNoad::New(L"Toke_SkoarpionEnd", noad, toker->burn(ESkoarToke::SkoarpionEnd, noad));
        noad->add_noad(toke_noad);
        --deep;
        return noad;
    }

    // Error State
    this->fail(noad);
    return nullptr;
}

SkoarNoadPtr SkoarParser::skoarpion(SkoarNoadPtr parent) {
    SkoarNoadPtr noad = SkoarNoad::New<ESkoarNoad::skoarpion>(L"skoarpion", parent);
    list<ESkoarToke::Kind>* desires = nullptr;

    if (++deep > 1000) {
        this->fail_too_deep(parent);
    }

    // skoarpion -> opt_args SkoarpionStart skrp_suffix
    desires = &skoarStats->desirables[33];
    if (toker->sees(desires) != nullptr) {
        SkoarNoadPtr toke_noad;
        noad->add_noad(this->opt_args(noad));
        skoarStats->tokeFreq[ESkoarToke::SkoarpionStart] += 0.1f;
        toke_noad = SkoarNoad::New(L"Toke_SkoarpionStart", noad, toker->burn(ESkoarToke::SkoarpionStart, noad));
        noad->add_noad(toke_noad);
        noad->add_noad(this->skrp_suffix(noad));
        --deep;
        return noad;
    }

    // Error State
    this->fail(noad);
    return nullptr;
}

SkoarNoadPtr SkoarParser::skrp_lines(SkoarNoadPtr parent) {
    SkoarNoadPtr noad = parent;
    list<ESkoarToke::Kind>* desires = nullptr;

    if (++deep > 1000) {
        this->fail_too_deep(parent);
    }

    // skrp_lines -> opt_voiced_phrases skrp_moar_lines
    desires = &skoarStats->desirables[34];
    if (toker->sees(desires) != nullptr) {
        SkoarNoadPtr toke_noad;
        noad->add_noad(this->opt_voiced_phrases(noad));
        this->skrp_moar_lines(noad);
        --deep;
        return noad;
    }

    // Error State
    this->fail(noad);
    return nullptr;
}

SkoarNoadPtr SkoarParser::skrp_moar_lines(SkoarNoadPtr parent) {
    SkoarNoadPtr noad = parent;
    list<ESkoarToke::Kind>* desires = nullptr;

    if (++deep > 1000) {
        this->fail_too_deep(parent);
    }

    // skrp_moar_lines -> Newline skrp_lines
    desires = &skoarStats->desirables[35];
    if (toker->sees(desires) != nullptr) {
        SkoarNoadPtr toke_noad;
        skoarStats->tokeFreq[ESkoarToke::Newline] += 0.1f;
        toke_noad = SkoarNoad::New(L"Toke_Newline", noad, toker->burn(ESkoarToke::Newline, noad));
        noad->add_noad(toke_noad);
        this->skrp_lines(noad);
        --deep;
        return noad;
    }

    // <e>
    --deep;
    return noad;
}

SkoarNoadPtr SkoarParser::listy_suffix(SkoarNoadPtr parent) {
    SkoarNoadPtr noad = parent;
    list<ESkoarToke::Kind>* desires = nullptr;

    if (++deep > 1000) {
        this->fail_too_deep(parent);
    }

    // listy_suffix -> Newline listy_entries ListE
    desires = &skoarStats->desirables[36];
    if (toker->sees(desires) != nullptr) {
        SkoarNoadPtr toke_noad;
        skoarStats->tokeFreq[ESkoarToke::Newline] += 0.1f;
        toke_noad = SkoarNoad::New(L"Toke_Newline", noad, toker->burn(ESkoarToke::Newline, noad));
        noad->add_noad(toke_noad);
        this->listy_entries(noad);
        skoarStats->tokeFreq[ESkoarToke::ListE] += 0.1f;
        toke_noad = SkoarNoad::New(L"Toke_ListE", noad, toker->burn(ESkoarToke::ListE, noad));
        noad->add_noad(toke_noad);
        --deep;
        return noad;
    }

    // listy_suffix -> listy_entries ListE
    desires = &skoarStats->desirables[37];
    if (toker->sees(desires) != nullptr) {
        SkoarNoadPtr toke_noad;
        this->listy_entries(noad);
        skoarStats->tokeFreq[ESkoarToke::ListE] += 0.1f;
        toke_noad = SkoarNoad::New(L"Toke_ListE", noad, toker->burn(ESkoarToke::ListE, noad));
        noad->add_noad(toke_noad);
        --deep;
        return noad;
    }

    // listy_suffix -> ListE
    desires = &skoarStats->desirables[38];
    if (toker->sees(desires) != nullptr) {
        SkoarNoadPtr toke_noad;
        skoarStats->tokeFreq[ESkoarToke::ListE] += 0.1f;
        toke_noad = SkoarNoad::New(L"Toke_ListE", noad, toker->burn(ESkoarToke::ListE, noad));
        noad->add_noad(toke_noad);
        --deep;
        return noad;
    }

    // Error State
    this->fail(noad);
    return nullptr;
}

SkoarNoadPtr SkoarParser::listy(SkoarNoadPtr parent) {
    SkoarNoadPtr noad = SkoarNoad::New<ESkoarNoad::listy>(L"listy", parent);
    list<ESkoarToke::Kind>* desires = nullptr;

    if (++deep > 1000) {
        this->fail_too_deep(parent);
    }

    // listy -> ListS listy_suffix
    desires = &skoarStats->desirables[39];
    if (toker->sees(desires) != nullptr) {
        SkoarNoadPtr toke_noad;
        skoarStats->tokeFreq[ESkoarToke::ListS] += 0.1f;
        toke_noad = SkoarNoad::New(L"Toke_ListS", noad, toker->burn(ESkoarToke::ListS, noad));
        noad->add_noad(toke_noad);
        this->listy_suffix(noad);
        --deep;
        return noad;
    }

    // Error State
    this->fail(noad);
    return nullptr;
}

SkoarNoadPtr SkoarParser::listy_entries(SkoarNoadPtr parent) {
    SkoarNoadPtr noad = parent;
    list<ESkoarToke::Kind>* desires = nullptr;

    if (++deep > 1000) {
        this->fail_too_deep(parent);
    }

    // listy_entries -> expr moar_listy_entries
    desires = &skoarStats->desirables[40];
    if (toker->sees(desires) != nullptr) {
        SkoarNoadPtr toke_noad;
        noad->add_noad(this->expr(noad));
        this->moar_listy_entries(noad);
        --deep;
        return noad;
    }

    // Error State
    this->fail(noad);
    return nullptr;
}

SkoarNoadPtr SkoarParser::moar_listy_entries(SkoarNoadPtr parent) {
    SkoarNoadPtr noad = parent;
    list<ESkoarToke::Kind>* desires = nullptr;

    if (++deep > 1000) {
        this->fail_too_deep(parent);
    }

    // moar_listy_entries -> ListSep moar_listy_entries
    desires = &skoarStats->desirables[41];
    if (toker->sees(desires) != nullptr) {
        SkoarNoadPtr toke_noad;
        skoarStats->tokeFreq[ESkoarToke::ListSep] += 0.1f;
        toke_noad = SkoarNoad::New(L"Toke_ListSep", noad, toker->burn(ESkoarToke::ListSep, noad));
        noad->add_noad(toke_noad);
        this->moar_listy_entries(noad);
        --deep;
        return noad;
    }

    // moar_listy_entries -> Newline moar_listy_entries
    desires = &skoarStats->desirables[42];
    if (toker->sees(desires) != nullptr) {
        SkoarNoadPtr toke_noad;
        skoarStats->tokeFreq[ESkoarToke::Newline] += 0.1f;
        toke_noad = SkoarNoad::New(L"Toke_Newline", noad, toker->burn(ESkoarToke::Newline, noad));
        noad->add_noad(toke_noad);
        this->moar_listy_entries(noad);
        --deep;
        return noad;
    }

    // moar_listy_entries -> listy_entries
    desires = &skoarStats->desirables[43];
    if (toker->sees(desires) != nullptr) {
        SkoarNoadPtr toke_noad;
        this->listy_entries(noad);
        --deep;
        return noad;
    }

    // <e>
    --deep;
    return noad;
}

SkoarNoadPtr SkoarParser::regular_beat(SkoarNoadPtr parent) {
    SkoarNoadPtr noad = SkoarNoad::New<ESkoarNoad::regular_beat>(L"regular_beat", parent);
    list<ESkoarToke::Kind>* desires = nullptr;

    if (++deep > 1000) {
        this->fail_too_deep(parent);
    }

    // regular_beat -> Crotchets
    desires = &skoarStats->desirables[44];
    if (toker->sees(desires) != nullptr) {
        SkoarNoadPtr toke_noad;
        skoarStats->tokeFreq[ESkoarToke::Crotchets] += 0.1f;
        toke_noad = SkoarNoad::New(L"Toke_Crotchets", noad, toker->burn(ESkoarToke::Crotchets, noad));
        noad->add_noad(toke_noad);
        --deep;
        return noad;
    }

    // regular_beat -> Quavers
    desires = &skoarStats->desirables[45];
    if (toker->sees(desires) != nullptr) {
        SkoarNoadPtr toke_noad;
        skoarStats->tokeFreq[ESkoarToke::Quavers] += 0.1f;
        toke_noad = SkoarNoad::New(L"Toke_Quavers", noad, toker->burn(ESkoarToke::Quavers, noad));
        noad->add_noad(toke_noad);
        --deep;
        return noad;
    }

    // regular_beat -> Quarters
    desires = &skoarStats->desirables[46];
    if (toker->sees(desires) != nullptr) {
        SkoarNoadPtr toke_noad;
        skoarStats->tokeFreq[ESkoarToke::Quarters] += 0.1f;
        toke_noad = SkoarNoad::New(L"Toke_Quarters", noad, toker->burn(ESkoarToke::Quarters, noad));
        noad->add_noad(toke_noad);
        --deep;
        return noad;
    }

    // regular_beat -> Eighths
    desires = &skoarStats->desirables[47];
    if (toker->sees(desires) != nullptr) {
        SkoarNoadPtr toke_noad;
        skoarStats->tokeFreq[ESkoarToke::Eighths] += 0.1f;
        toke_noad = SkoarNoad::New(L"Toke_Eighths", noad, toker->burn(ESkoarToke::Eighths, noad));
        noad->add_noad(toke_noad);
        --deep;
        return noad;
    }

    // Error State
    this->fail(noad);
    return nullptr;
}

SkoarNoadPtr SkoarParser::exact_beat(SkoarNoadPtr parent) {
    SkoarNoadPtr noad = SkoarNoad::New<ESkoarNoad::exact_beat>(L"exact_beat", parent);
    list<ESkoarToke::Kind>* desires = nullptr;

    if (++deep > 1000) {
        this->fail_too_deep(parent);
    }

    // exact_beat -> ExactBeat expr Quarters
    desires = &skoarStats->desirables[48];
    if (toker->sees(desires) != nullptr) {
        SkoarNoadPtr toke_noad;
        skoarStats->tokeFreq[ESkoarToke::ExactBeat] += 0.1f;
        toke_noad = SkoarNoad::New(L"Toke_ExactBeat", noad, toker->burn(ESkoarToke::ExactBeat, noad));
        noad->add_noad(toke_noad);
        noad->add_noad(this->expr(noad));
        skoarStats->tokeFreq[ESkoarToke::Quarters] += 0.1f;
        toke_noad = SkoarNoad::New(L"Toke_Quarters", noad, toker->burn(ESkoarToke::Quarters, noad));
        noad->add_noad(toke_noad);
        --deep;
        return noad;
    }

    // Error State
    this->fail(noad);
    return nullptr;
}

SkoarNoadPtr SkoarParser::exact_rest(SkoarNoadPtr parent) {
    SkoarNoadPtr noad = SkoarNoad::New<ESkoarNoad::exact_rest>(L"exact_rest", parent);
    list<ESkoarToke::Kind>* desires = nullptr;

    if (++deep > 1000) {
        this->fail_too_deep(parent);
    }

    // exact_rest -> ExactRest expr Crotchets
    desires = &skoarStats->desirables[49];
    if (toker->sees(desires) != nullptr) {
        SkoarNoadPtr toke_noad;
        skoarStats->tokeFreq[ESkoarToke::ExactRest] += 0.1f;
        toke_noad = SkoarNoad::New(L"Toke_ExactRest", noad, toker->burn(ESkoarToke::ExactRest, noad));
        noad->add_noad(toke_noad);
        noad->add_noad(this->expr(noad));
        skoarStats->tokeFreq[ESkoarToke::Crotchets] += 0.1f;
        toke_noad = SkoarNoad::New(L"Toke_Crotchets", noad, toker->burn(ESkoarToke::Crotchets, noad));
        noad->add_noad(toke_noad);
        --deep;
        return noad;
    }

    // Error State
    this->fail(noad);
    return nullptr;
}

SkoarNoadPtr SkoarParser::ottavas(SkoarNoadPtr parent) {
    SkoarNoadPtr noad = SkoarNoad::New<ESkoarNoad::ottavas>(L"ottavas", parent);
    list<ESkoarToke::Kind>* desires = nullptr;

    if (++deep > 1000) {
        this->fail_too_deep(parent);
    }

    // ottavas -> OctaveShift
    desires = &skoarStats->desirables[50];
    if (toker->sees(desires) != nullptr) {
        SkoarNoadPtr toke_noad;
        skoarStats->tokeFreq[ESkoarToke::OctaveShift] += 0.1f;
        toke_noad = SkoarNoad::New(L"Toke_OctaveShift", noad, toker->burn(ESkoarToke::OctaveShift, noad));
        noad->add_noad(toke_noad);
        --deep;
        return noad;
    }

    // Error State
    this->fail(noad);
    return nullptr;
}

SkoarNoadPtr SkoarParser::musical_keyword(SkoarNoadPtr parent) {
    SkoarNoadPtr noad = SkoarNoad::New<ESkoarNoad::musical_keyword>(L"musical_keyword", parent);
    list<ESkoarToke::Kind>* desires = nullptr;

    if (++deep > 1000) {
        this->fail_too_deep(parent);
    }

    // musical_keyword -> ottavas
    desires = &skoarStats->desirables[51];
    if (toker->sees(desires) != nullptr) {
        SkoarNoadPtr toke_noad;
        noad->add_noad(this->ottavas(noad));
        --deep;
        return noad;
    }

    // musical_keyword -> musical_keyword_misc
    desires = &skoarStats->desirables[52];
    if (toker->sees(desires) != nullptr) {
        SkoarNoadPtr toke_noad;
        noad->add_noad(this->musical_keyword_misc(noad));
        --deep;
        return noad;
    }

    // Error State
    this->fail(noad);
    return nullptr;
}

SkoarNoadPtr SkoarParser::musical_keyword_misc(SkoarNoadPtr parent) {
    SkoarNoadPtr noad = SkoarNoad::New<ESkoarNoad::musical_keyword_misc>(L"musical_keyword_misc", parent);
    list<ESkoarToke::Kind>* desires = nullptr;

    if (++deep > 1000) {
        this->fail_too_deep(parent);
    }

    // musical_keyword_misc -> Carrot
    desires = &skoarStats->desirables[53];
    if (toker->sees(desires) != nullptr) {
        SkoarNoadPtr toke_noad;
        skoarStats->tokeFreq[ESkoarToke::Carrot] += 0.1f;
        toke_noad = SkoarNoad::New(L"Toke_Carrot", noad, toker->burn(ESkoarToke::Carrot, noad));
        noad->add_noad(toke_noad);
        --deep;
        return noad;
    }

    // Error State
    this->fail(noad);
    return nullptr;
}

SkoarNoadPtr SkoarParser::cthulhu(SkoarNoadPtr parent) {
    SkoarNoadPtr noad = SkoarNoad::New<ESkoarNoad::cthulhu>(L"cthulhu", parent);
    list<ESkoarToke::Kind>* desires = nullptr;

    if (++deep > 1000) {
        this->fail_too_deep(parent);
    }

    // cthulhu -> LWing Semicolon cthulhu_prime
    desires = &skoarStats->desirables[54];
    if (toker->sees(desires) != nullptr) {
        SkoarNoadPtr toke_noad;
        skoarStats->tokeFreq[ESkoarToke::LWing] += 0.1f;
        toke_noad = SkoarNoad::New(L"Toke_LWing", noad, toker->burn(ESkoarToke::LWing, noad));
        noad->add_noad(toke_noad);
        skoarStats->tokeFreq[ESkoarToke::Semicolon] += 0.1f;
        toke_noad = SkoarNoad::New(L"Toke_Semicolon", noad, toker->burn(ESkoarToke::Semicolon, noad));
        noad->add_noad(toke_noad);
        this->cthulhu_prime(noad);
        --deep;
        return noad;
    }

    // Error State
    this->fail(noad);
    return nullptr;
}

SkoarNoadPtr SkoarParser::nouny(SkoarNoadPtr parent) {
    SkoarNoadPtr noad = SkoarNoad::New<ESkoarNoad::nouny>(L"nouny", parent);
    list<ESkoarToke::Kind>* desires = nullptr;

    if (++deep > 1000) {
        this->fail_too_deep(parent);
    }

    // nouny -> cthulhu
    desires = &skoarStats->desirables[55];
    if (toker->sees(desires) != nullptr) {
        SkoarNoadPtr toke_noad;
        noad->add_noad(this->cthulhu(noad));
        --deep;
        return noad;
    }

    // nouny -> meditation
    desires = &skoarStats->desirables[56];
    if (toker->sees(desires) != nullptr) {
        SkoarNoadPtr toke_noad;
        noad->add_noad(this->meditation(noad));
        --deep;
        return noad;
    }

    // nouny -> conditional
    desires = &skoarStats->desirables[57];
    if (toker->sees(desires) != nullptr) {
        SkoarNoadPtr toke_noad;
        noad->add_noad(this->conditional(noad));
        --deep;
        return noad;
    }

    // nouny -> loop
    desires = &skoarStats->desirables[58];
    if (toker->sees(desires) != nullptr) {
        SkoarNoadPtr toke_noad;
        noad->add_noad(this->loop(noad));
        --deep;
        return noad;
    }

    // nouny -> nouny_literal
    desires = &skoarStats->desirables[59];
    if (toker->sees(desires) != nullptr) {
        SkoarNoadPtr toke_noad;
        this->nouny_literal(noad);
        --deep;
        return noad;
    }

    // nouny -> musical_keyword
    desires = &skoarStats->desirables[60];
    if (toker->sees(desires) != nullptr) {
        SkoarNoadPtr toke_noad;
        noad->add_noad(this->musical_keyword(noad));
        --deep;
        return noad;
    }

    // nouny -> listy
    desires = &skoarStats->desirables[61];
    if (toker->sees(desires) != nullptr) {
        SkoarNoadPtr toke_noad;
        noad->add_noad(this->listy(noad));
        --deep;
        return noad;
    }

    // nouny -> deref
    desires = &skoarStats->desirables[62];
    if (toker->sees(desires) != nullptr) {
        SkoarNoadPtr toke_noad;
        noad->add_noad(this->deref(noad));
        --deep;
        return noad;
    }

    // nouny -> skoarpion
    desires = &skoarStats->desirables[63];
    if (toker->sees(desires) != nullptr) {
        SkoarNoadPtr toke_noad;
        noad->add_noad(this->skoarpion(noad));
        --deep;
        return noad;
    }

    // Error State
    this->fail(noad);
    return nullptr;
}

SkoarNoadPtr SkoarParser::meditation(SkoarNoadPtr parent) {
    SkoarNoadPtr noad = SkoarNoad::New<ESkoarNoad::meditation>(L"meditation", parent);
    list<ESkoarToke::Kind>* desires = nullptr;

    if (++deep > 1000) {
        this->fail_too_deep(parent);
    }

    // meditation -> MeditationS skrp_lines MeditationE
    desires = &skoarStats->desirables[64];
    if (toker->sees(desires) != nullptr) {
        SkoarNoadPtr toke_noad;
        skoarStats->tokeFreq[ESkoarToke::MeditationS] += 0.1f;
        toke_noad = SkoarNoad::New(L"Toke_MeditationS", noad, toker->burn(ESkoarToke::MeditationS, noad));
        noad->add_noad(toke_noad);
        this->skrp_lines(noad);
        skoarStats->tokeFreq[ESkoarToke::MeditationE] += 0.1f;
        toke_noad = SkoarNoad::New(L"Toke_MeditationE", noad, toker->burn(ESkoarToke::MeditationE, noad));
        noad->add_noad(toke_noad);
        --deep;
        return noad;
    }

    // Error State
    this->fail(noad);
    return nullptr;
}

SkoarNoadPtr SkoarParser::conditional(SkoarNoadPtr parent) {
    SkoarNoadPtr noad = SkoarNoad::New<ESkoarNoad::conditional>(L"conditional", parent);
    list<ESkoarToke::Kind>* desires = nullptr;

    if (++deep > 1000) {
        this->fail_too_deep(parent);
    }

    // conditional -> CondS cond_if CondE
    desires = &skoarStats->desirables[65];
    if (toker->sees(desires) != nullptr) {
        SkoarNoadPtr toke_noad;
        skoarStats->tokeFreq[ESkoarToke::CondS] += 0.1f;
        toke_noad = SkoarNoad::New(L"Toke_CondS", noad, toker->burn(ESkoarToke::CondS, noad));
        noad->add_noad(toke_noad);
        noad->add_noad(this->cond_if(noad));
        skoarStats->tokeFreq[ESkoarToke::CondE] += 0.1f;
        toke_noad = SkoarNoad::New(L"Toke_CondE", noad, toker->burn(ESkoarToke::CondE, noad));
        noad->add_noad(toke_noad);
        --deep;
        return noad;
    }

    // Error State
    this->fail(noad);
    return nullptr;
}

SkoarNoadPtr SkoarParser::loop(SkoarNoadPtr parent) {
    SkoarNoadPtr noad = SkoarNoad::New<ESkoarNoad::loop>(L"loop", parent);
    list<ESkoarToke::Kind>* desires = nullptr;

    if (++deep > 1000) {
        this->fail_too_deep(parent);
    }

    // loop -> LoopS loop_body loop_condition LoopE
    desires = &skoarStats->desirables[66];
    if (toker->sees(desires) != nullptr) {
        SkoarNoadPtr toke_noad;
        skoarStats->tokeFreq[ESkoarToke::LoopS] += 0.1f;
        toke_noad = SkoarNoad::New(L"Toke_LoopS", noad, toker->burn(ESkoarToke::LoopS, noad));
        noad->add_noad(toke_noad);
        noad->add_noad(this->loop_body(noad));
        noad->add_noad(this->loop_condition(noad));
        skoarStats->tokeFreq[ESkoarToke::LoopE] += 0.1f;
        toke_noad = SkoarNoad::New(L"Toke_LoopE", noad, toker->burn(ESkoarToke::LoopE, noad));
        noad->add_noad(toke_noad);
        --deep;
        return noad;
    }

    // Error State
    this->fail(noad);
    return nullptr;
}

SkoarNoadPtr SkoarParser::nouny_literal(SkoarNoadPtr parent) {
    SkoarNoadPtr noad = parent;
    list<ESkoarToke::Kind>* desires = nullptr;

    if (++deep > 1000) {
        this->fail_too_deep(parent);
    }

    // nouny_literal -> Duration
    desires = &skoarStats->desirables[67];
    if (toker->sees(desires) != nullptr) {
        SkoarNoadPtr toke_noad;
        skoarStats->tokeFreq[ESkoarToke::Duration] += 0.1f;
        toke_noad = SkoarNoad::New(L"Toke_Duration", noad, toker->burn(ESkoarToke::Duration, noad));
        noad->add_noad(toke_noad);
        --deep;
        return noad;
    }

    // nouny_literal -> ugen
    desires = &skoarStats->desirables[68];
    if (toker->sees(desires) != nullptr) {
        SkoarNoadPtr toke_noad;
        noad->add_noad(this->ugen(noad));
        --deep;
        return noad;
    }

    // nouny_literal -> Tuplet
    desires = &skoarStats->desirables[69];
    if (toker->sees(desires) != nullptr) {
        SkoarNoadPtr toke_noad;
        skoarStats->tokeFreq[ESkoarToke::Tuplet] += 0.1f;
        toke_noad = SkoarNoad::New(L"Toke_Tuplet", noad, toker->burn(ESkoarToke::Tuplet, noad));
        noad->add_noad(toke_noad);
        --deep;
        return noad;
    }

    // nouny_literal -> Freq
    desires = &skoarStats->desirables[70];
    if (toker->sees(desires) != nullptr) {
        SkoarNoadPtr toke_noad;
        skoarStats->tokeFreq[ESkoarToke::Freq] += 0.1f;
        toke_noad = SkoarNoad::New(L"Toke_Freq", noad, toker->burn(ESkoarToke::Freq, noad));
        noad->add_noad(toke_noad);
        --deep;
        return noad;
    }

    // nouny_literal -> Int
    desires = &skoarStats->desirables[71];
    if (toker->sees(desires) != nullptr) {
        SkoarNoadPtr toke_noad;
        skoarStats->tokeFreq[ESkoarToke::Int] += 0.1f;
        toke_noad = SkoarNoad::New(L"Toke_Int", noad, toker->burn(ESkoarToke::Int, noad));
        noad->add_noad(toke_noad);
        --deep;
        return noad;
    }

    // nouny_literal -> Float
    desires = &skoarStats->desirables[72];
    if (toker->sees(desires) != nullptr) {
        SkoarNoadPtr toke_noad;
        skoarStats->tokeFreq[ESkoarToke::Float] += 0.1f;
        toke_noad = SkoarNoad::New(L"Toke_Float", noad, toker->burn(ESkoarToke::Float, noad));
        noad->add_noad(toke_noad);
        --deep;
        return noad;
    }

    // nouny_literal -> String
    desires = &skoarStats->desirables[73];
    if (toker->sees(desires) != nullptr) {
        SkoarNoadPtr toke_noad;
        skoarStats->tokeFreq[ESkoarToke::String] += 0.1f;
        toke_noad = SkoarNoad::New(L"Toke_String", noad, toker->burn(ESkoarToke::String, noad));
        noad->add_noad(toke_noad);
        --deep;
        return noad;
    }

    // nouny_literal -> Choard
    desires = &skoarStats->desirables[74];
    if (toker->sees(desires) != nullptr) {
        SkoarNoadPtr toke_noad;
        skoarStats->tokeFreq[ESkoarToke::Choard] += 0.1f;
        toke_noad = SkoarNoad::New(L"Toke_Choard", noad, toker->burn(ESkoarToke::Choard, noad));
        noad->add_noad(toke_noad);
        --deep;
        return noad;
    }

    // nouny_literal -> NamedNoat
    desires = &skoarStats->desirables[75];
    if (toker->sees(desires) != nullptr) {
        SkoarNoadPtr toke_noad;
        skoarStats->tokeFreq[ESkoarToke::NamedNoat] += 0.1f;
        toke_noad = SkoarNoad::New(L"Toke_NamedNoat", noad, toker->burn(ESkoarToke::NamedNoat, noad));
        noad->add_noad(toke_noad);
        --deep;
        return noad;
    }

    // nouny_literal -> Symbol
    desires = &skoarStats->desirables[76];
    if (toker->sees(desires) != nullptr) {
        SkoarNoadPtr toke_noad;
        skoarStats->tokeFreq[ESkoarToke::Symbol] += 0.1f;
        toke_noad = SkoarNoad::New(L"Toke_Symbol", noad, toker->burn(ESkoarToke::Symbol, noad));
        noad->add_noad(toke_noad);
        --deep;
        return noad;
    }

    // nouny_literal -> Fairy
    desires = &skoarStats->desirables[77];
    if (toker->sees(desires) != nullptr) {
        SkoarNoadPtr toke_noad;
        skoarStats->tokeFreq[ESkoarToke::Fairy] += 0.1f;
        toke_noad = SkoarNoad::New(L"Toke_Fairy", noad, toker->burn(ESkoarToke::Fairy, noad));
        noad->add_noad(toke_noad);
        --deep;
        return noad;
    }

    // nouny_literal -> HashLevel
    desires = &skoarStats->desirables[78];
    if (toker->sees(desires) != nullptr) {
        SkoarNoadPtr toke_noad;
        skoarStats->tokeFreq[ESkoarToke::HashLevel] += 0.1f;
        toke_noad = SkoarNoad::New(L"Toke_HashLevel", noad, toker->burn(ESkoarToke::HashLevel, noad));
        noad->add_noad(toke_noad);
        --deep;
        return noad;
    }

    // nouny_literal -> False
    desires = &skoarStats->desirables[79];
    if (toker->sees(desires) != nullptr) {
        SkoarNoadPtr toke_noad;
        skoarStats->tokeFreq[ESkoarToke::False] += 0.1f;
        toke_noad = SkoarNoad::New(L"Toke_False", noad, toker->burn(ESkoarToke::False, noad));
        noad->add_noad(toke_noad);
        --deep;
        return noad;
    }

    // nouny_literal -> True
    desires = &skoarStats->desirables[80];
    if (toker->sees(desires) != nullptr) {
        SkoarNoadPtr toke_noad;
        skoarStats->tokeFreq[ESkoarToke::True] += 0.1f;
        toke_noad = SkoarNoad::New(L"Toke_True", noad, toker->burn(ESkoarToke::True, noad));
        noad->add_noad(toke_noad);
        --deep;
        return noad;
    }

    // nouny_literal -> Cat
    desires = &skoarStats->desirables[81];
    if (toker->sees(desires) != nullptr) {
        SkoarNoadPtr toke_noad;
        skoarStats->tokeFreq[ESkoarToke::Cat] += 0.1f;
        toke_noad = SkoarNoad::New(L"Toke_Cat", noad, toker->burn(ESkoarToke::Cat, noad));
        noad->add_noad(toke_noad);
        --deep;
        return noad;
    }

    // nouny_literal -> lute
    desires = &skoarStats->desirables[82];
    if (toker->sees(desires) != nullptr) {
        SkoarNoadPtr toke_noad;
        noad->add_noad(this->lute(noad));
        --deep;
        return noad;
    }

    // Error State
    this->fail(noad);
    return nullptr;
}

SkoarNoadPtr SkoarParser::deref(SkoarNoadPtr parent) {
    SkoarNoadPtr noad = SkoarNoad::New<ESkoarNoad::deref>(L"deref", parent);
    list<ESkoarToke::Kind>* desires = nullptr;

    if (++deep > 1000) {
        this->fail_too_deep(parent);
    }

    // deref -> Deref deref_prime
    desires = &skoarStats->desirables[83];
    if (toker->sees(desires) != nullptr) {
        SkoarNoadPtr toke_noad;
        skoarStats->tokeFreq[ESkoarToke::Deref] += 0.1f;
        toke_noad = SkoarNoad::New(L"Toke_Deref", noad, toker->burn(ESkoarToke::Deref, noad));
        noad->add_noad(toke_noad);
        this->deref_prime(noad);
        --deep;
        return noad;
    }

    // Error State
    this->fail(noad);
    return nullptr;
}

SkoarNoadPtr SkoarParser::ugen(SkoarNoadPtr parent) {
    SkoarNoadPtr noad = SkoarNoad::New<ESkoarNoad::ugen>(L"ugen", parent);
    list<ESkoarToke::Kind>* desires = nullptr;

    if (++deep > 1000) {
        this->fail_too_deep(parent);
    }

    // ugen -> ugen_with_args
    desires = &skoarStats->desirables[84];
    if (toker->sees(desires) != nullptr) {
        SkoarNoadPtr toke_noad;
        noad->add_noad(this->ugen_with_args(noad));
        --deep;
        return noad;
    }

    // ugen -> ugen_simple
    desires = &skoarStats->desirables[85];
    if (toker->sees(desires) != nullptr) {
        SkoarNoadPtr toke_noad;
        noad->add_noad(this->ugen_simple(noad));
        --deep;
        return noad;
    }

    // Error State
    this->fail(noad);
    return nullptr;
}

SkoarNoadPtr SkoarParser::lute(SkoarNoadPtr parent) {
    SkoarNoadPtr noad = SkoarNoad::New<ESkoarNoad::lute>(L"lute", parent);
    list<ESkoarToke::Kind>* desires = nullptr;

    if (++deep > 1000) {
        this->fail_too_deep(parent);
    }

    // lute -> Lute
    desires = &skoarStats->desirables[86];
    if (toker->sees(desires) != nullptr) {
        SkoarNoadPtr toke_noad;
        skoarStats->tokeFreq[ESkoarToke::Lute] += 0.1f;
        toke_noad = SkoarNoad::New(L"Toke_Lute", noad, toker->burn(ESkoarToke::Lute, noad));
        noad->add_noad(toke_noad);
        --deep;
        return noad;
    }

    // lute -> LuteWithArgs listy_suffix
    desires = &skoarStats->desirables[87];
    if (toker->sees(desires) != nullptr) {
        SkoarNoadPtr toke_noad;
        skoarStats->tokeFreq[ESkoarToke::LuteWithArgs] += 0.1f;
        toke_noad = SkoarNoad::New(L"Toke_LuteWithArgs", noad, toker->burn(ESkoarToke::LuteWithArgs, noad));
        noad->add_noad(toke_noad);
        this->listy_suffix(noad);
        --deep;
        return noad;
    }

    // Error State
    this->fail(noad);
    return nullptr;
}

SkoarNoadPtr SkoarParser::deref_prime(SkoarNoadPtr parent) {
    SkoarNoadPtr noad = parent;
    list<ESkoarToke::Kind>* desires = nullptr;

    if (++deep > 1000) {
        this->fail_too_deep(parent);
    }

    // deref_prime -> MsgNameWithArgs listy_suffix
    desires = &skoarStats->desirables[88];
    if (toker->sees(desires) != nullptr) {
        SkoarNoadPtr toke_noad;
        skoarStats->tokeFreq[ESkoarToke::MsgNameWithArgs] += 0.1f;
        toke_noad = SkoarNoad::New(L"Toke_MsgNameWithArgs", noad, toker->burn(ESkoarToke::MsgNameWithArgs, noad));
        noad->add_noad(toke_noad);
        this->listy_suffix(noad);
        --deep;
        return noad;
    }

    // deref_prime -> MsgName
    desires = &skoarStats->desirables[89];
    if (toker->sees(desires) != nullptr) {
        SkoarNoadPtr toke_noad;
        skoarStats->tokeFreq[ESkoarToke::MsgName] += 0.1f;
        toke_noad = SkoarNoad::New(L"Toke_MsgName", noad, toker->burn(ESkoarToke::MsgName, noad));
        noad->add_noad(toke_noad);
        --deep;
        return noad;
    }

    // Error State
    this->fail(noad);
    return nullptr;
}

SkoarNoadPtr SkoarParser::msg_chain_node(SkoarNoadPtr parent) {
    SkoarNoadPtr noad = parent;
    list<ESkoarToke::Kind>* desires = nullptr;

    if (++deep > 1000) {
        this->fail_too_deep(parent);
    }

    // msg_chain_node -> MsgOp msg msg_chain_node
    desires = &skoarStats->desirables[90];
    if (toker->sees(desires) != nullptr) {
        SkoarNoadPtr toke_noad;
        skoarStats->tokeFreq[ESkoarToke::MsgOp] += 0.1f;
        toke_noad = SkoarNoad::New(L"Toke_MsgOp", noad, toker->burn(ESkoarToke::MsgOp, noad));
        noad->add_noad(toke_noad);
        noad->add_noad(this->msg(noad));
        this->msg_chain_node(noad);
        --deep;
        return noad;
    }

    // <e>
    --deep;
    return noad;
}

SkoarNoadPtr SkoarParser::msgable(SkoarNoadPtr parent) {
    SkoarNoadPtr noad = SkoarNoad::New<ESkoarNoad::msgable>(L"msgable", parent);
    list<ESkoarToke::Kind>* desires = nullptr;

    if (++deep > 1000) {
        this->fail_too_deep(parent);
    }

    // msgable -> nouny msg_chain_node
    desires = &skoarStats->desirables[91];
    if (toker->sees(desires) != nullptr) {
        SkoarNoadPtr toke_noad;
        noad->add_noad(this->nouny(noad));
        this->msg_chain_node(noad);
        --deep;
        return noad;
    }

    // Error State
    this->fail(noad);
    return nullptr;
}

SkoarNoadPtr SkoarParser::msg(SkoarNoadPtr parent) {
    SkoarNoadPtr noad = SkoarNoad::New<ESkoarNoad::msg>(L"msg", parent);
    list<ESkoarToke::Kind>* desires = nullptr;

    if (++deep > 1000) {
        this->fail_too_deep(parent);
    }

    // msg -> MsgNameWithArgs listy_suffix
    desires = &skoarStats->desirables[92];
    if (toker->sees(desires) != nullptr) {
        SkoarNoadPtr toke_noad;
        skoarStats->tokeFreq[ESkoarToke::MsgNameWithArgs] += 0.1f;
        toke_noad = SkoarNoad::New(L"Toke_MsgNameWithArgs", noad, toker->burn(ESkoarToke::MsgNameWithArgs, noad));
        noad->add_noad(toke_noad);
        this->listy_suffix(noad);
        --deep;
        return noad;
    }

    // msg -> MsgName
    desires = &skoarStats->desirables[93];
    if (toker->sees(desires) != nullptr) {
        SkoarNoadPtr toke_noad;
        skoarStats->tokeFreq[ESkoarToke::MsgName] += 0.1f;
        toke_noad = SkoarNoad::New(L"Toke_MsgName", noad, toker->burn(ESkoarToke::MsgName, noad));
        noad->add_noad(toke_noad);
        --deep;
        return noad;
    }

    // msg -> listy
    desires = &skoarStats->desirables[94];
    if (toker->sees(desires) != nullptr) {
        SkoarNoadPtr toke_noad;
        noad->add_noad(this->listy(noad));
        --deep;
        return noad;
    }

    // msg -> loop
    desires = &skoarStats->desirables[95];
    if (toker->sees(desires) != nullptr) {
        SkoarNoadPtr toke_noad;
        noad->add_noad(this->loop(noad));
        --deep;
        return noad;
    }

    // Error State
    this->fail(noad);
    return nullptr;
}

SkoarNoadPtr SkoarParser::cthulhu_prime(SkoarNoadPtr parent) {
    SkoarNoadPtr noad = parent;
    list<ESkoarToke::Kind>* desires = nullptr;

    if (++deep > 1000) {
        this->fail_too_deep(parent);
    }

    // cthulhu_prime -> boolean_expr Semicolon RWing
    desires = &skoarStats->desirables[96];
    if (toker->sees(desires) != nullptr) {
        SkoarNoadPtr toke_noad;
        noad->add_noad(this->boolean_expr(noad));
        skoarStats->tokeFreq[ESkoarToke::Semicolon] += 0.1f;
        toke_noad = SkoarNoad::New(L"Toke_Semicolon", noad, toker->burn(ESkoarToke::Semicolon, noad));
        noad->add_noad(toke_noad);
        skoarStats->tokeFreq[ESkoarToke::RWing] += 0.1f;
        toke_noad = SkoarNoad::New(L"Toke_RWing", noad, toker->burn(ESkoarToke::RWing, noad));
        noad->add_noad(toke_noad);
        --deep;
        return noad;
    }

    // cthulhu_prime -> Nosey Semicolon RWing
    desires = &skoarStats->desirables[97];
    if (toker->sees(desires) != nullptr) {
        SkoarNoadPtr toke_noad;
        skoarStats->tokeFreq[ESkoarToke::Nosey] += 0.1f;
        toke_noad = SkoarNoad::New(L"Toke_Nosey", noad, toker->burn(ESkoarToke::Nosey, noad));
        noad->add_noad(toke_noad);
        skoarStats->tokeFreq[ESkoarToke::Semicolon] += 0.1f;
        toke_noad = SkoarNoad::New(L"Toke_Semicolon", noad, toker->burn(ESkoarToke::Semicolon, noad));
        noad->add_noad(toke_noad);
        skoarStats->tokeFreq[ESkoarToke::RWing] += 0.1f;
        toke_noad = SkoarNoad::New(L"Toke_RWing", noad, toker->burn(ESkoarToke::RWing, noad));
        noad->add_noad(toke_noad);
        --deep;
        return noad;
    }

    // Error State
    this->fail(noad);
    return nullptr;
}

SkoarNoadPtr SkoarParser::boolean_expr(SkoarNoadPtr parent) {
    SkoarNoadPtr noad = SkoarNoad::New<ESkoarNoad::boolean_expr>(L"boolean_expr", parent);
    list<ESkoarToke::Kind>* desires = nullptr;

    if (++deep > 1000) {
        this->fail_too_deep(parent);
    }

    // boolean_expr -> expr
    desires = &skoarStats->desirables[98];
    if (toker->sees(desires) != nullptr) {
        SkoarNoadPtr toke_noad;
        noad->add_noad(this->expr(noad));
        --deep;
        return noad;
    }

    // Error State
    this->fail(noad);
    return nullptr;
}

SkoarNoadPtr SkoarParser::cond_if(SkoarNoadPtr parent) {
    SkoarNoadPtr noad = SkoarNoad::New<ESkoarNoad::cond_if>(L"cond_if", parent);
    list<ESkoarToke::Kind>* desires = nullptr;

    if (++deep > 1000) {
        this->fail_too_deep(parent);
    }

    // cond_if -> opt_newline boolean_expr opt_newline CondIf if_body cond_else
    desires = &skoarStats->desirables[99];
    if (toker->sees(desires) != nullptr) {
        SkoarNoadPtr toke_noad;
        this->opt_newline(noad);
        noad->add_noad(this->boolean_expr(noad));
        this->opt_newline(noad);
        skoarStats->tokeFreq[ESkoarToke::CondIf] += 0.1f;
        toke_noad = SkoarNoad::New(L"Toke_CondIf", noad, toker->burn(ESkoarToke::CondIf, noad));
        noad->add_noad(toke_noad);
        noad->add_noad(this->if_body(noad));
        noad->add_noad(this->cond_else(noad));
        --deep;
        return noad;
    }

    // Error State
    this->fail(noad);
    return nullptr;
}

SkoarNoadPtr SkoarParser::if_body(SkoarNoadPtr parent) {
    SkoarNoadPtr noad = SkoarNoad::New<ESkoarNoad::if_body>(L"if_body", parent);
    list<ESkoarToke::Kind>* desires = nullptr;

    if (++deep > 1000) {
        this->fail_too_deep(parent);
    }

    // if_body -> phrasishes
    desires = &skoarStats->desirables[100];
    if (toker->sees(desires) != nullptr) {
        SkoarNoadPtr toke_noad;
        this->phrasishes(noad);
        --deep;
        return noad;
    }

    // Error State
    this->fail(noad);
    return nullptr;
}

SkoarNoadPtr SkoarParser::cond_else(SkoarNoadPtr parent) {
    SkoarNoadPtr noad = SkoarNoad::New<ESkoarNoad::cond_else>(L"cond_else", parent);
    list<ESkoarToke::Kind>* desires = nullptr;

    if (++deep > 1000) {
        this->fail_too_deep(parent);
    }

    // cond_else -> CondIf if_body
    desires = &skoarStats->desirables[101];
    if (toker->sees(desires) != nullptr) {
        SkoarNoadPtr toke_noad;
        skoarStats->tokeFreq[ESkoarToke::CondIf] += 0.1f;
        toke_noad = SkoarNoad::New(L"Toke_CondIf", noad, toker->burn(ESkoarToke::CondIf, noad));
        noad->add_noad(toke_noad);
        noad->add_noad(this->if_body(noad));
        --deep;
        return noad;
    }

    // <e>
    --deep;
    return noad;
}

SkoarNoadPtr SkoarParser::loop_body(SkoarNoadPtr parent) {
    SkoarNoadPtr noad = SkoarNoad::New<ESkoarNoad::loop_body>(L"loop_body", parent);
    list<ESkoarToke::Kind>* desires = nullptr;

    if (++deep > 1000) {
        this->fail_too_deep(parent);
    }

    // loop_body -> phrasishes
    desires = &skoarStats->desirables[102];
    if (toker->sees(desires) != nullptr) {
        SkoarNoadPtr toke_noad;
        this->phrasishes(noad);
        --deep;
        return noad;
    }

    // Error State
    this->fail(noad);
    return nullptr;
}

SkoarNoadPtr SkoarParser::loop_condition(SkoarNoadPtr parent) {
    SkoarNoadPtr noad = SkoarNoad::New<ESkoarNoad::loop_condition>(L"loop_condition", parent);
    list<ESkoarToke::Kind>* desires = nullptr;

    if (++deep > 1000) {
        this->fail_too_deep(parent);
    }

    // loop_condition -> LoopSep boolean_expr
    desires = &skoarStats->desirables[103];
    if (toker->sees(desires) != nullptr) {
        SkoarNoadPtr toke_noad;
        skoarStats->tokeFreq[ESkoarToke::LoopSep] += 0.1f;
        toke_noad = SkoarNoad::New(L"Toke_LoopSep", noad, toker->burn(ESkoarToke::LoopSep, noad));
        noad->add_noad(toke_noad);
        noad->add_noad(this->boolean_expr(noad));
        --deep;
        return noad;
    }

    // <e>
    --deep;
    return noad;
}

SkoarNoadPtr SkoarParser::ugen_with_args(SkoarNoadPtr parent) {
    SkoarNoadPtr noad = SkoarNoad::New<ESkoarNoad::ugen_with_args>(L"ugen_with_args", parent);
    list<ESkoarToke::Kind>* desires = nullptr;

    if (++deep > 1000) {
        this->fail_too_deep(parent);
    }

    // ugen_with_args -> AUGenWithArgs listy_suffix
    desires = &skoarStats->desirables[104];
    if (toker->sees(desires) != nullptr) {
        SkoarNoadPtr toke_noad;
        skoarStats->tokeFreq[ESkoarToke::AUGenWithArgs] += 0.1f;
        toke_noad = SkoarNoad::New(L"Toke_AUGenWithArgs", noad, toker->burn(ESkoarToke::AUGenWithArgs, noad));
        noad->add_noad(toke_noad);
        this->listy_suffix(noad);
        --deep;
        return noad;
    }

    // ugen_with_args -> KUGenWithArgs listy_suffix
    desires = &skoarStats->desirables[105];
    if (toker->sees(desires) != nullptr) {
        SkoarNoadPtr toke_noad;
        skoarStats->tokeFreq[ESkoarToke::KUGenWithArgs] += 0.1f;
        toke_noad = SkoarNoad::New(L"Toke_KUGenWithArgs", noad, toker->burn(ESkoarToke::KUGenWithArgs, noad));
        noad->add_noad(toke_noad);
        this->listy_suffix(noad);
        --deep;
        return noad;
    }

    // ugen_with_args -> DUGenWithArgs listy_suffix
    desires = &skoarStats->desirables[106];
    if (toker->sees(desires) != nullptr) {
        SkoarNoadPtr toke_noad;
        skoarStats->tokeFreq[ESkoarToke::DUGenWithArgs] += 0.1f;
        toke_noad = SkoarNoad::New(L"Toke_DUGenWithArgs", noad, toker->burn(ESkoarToke::DUGenWithArgs, noad));
        noad->add_noad(toke_noad);
        this->listy_suffix(noad);
        --deep;
        return noad;
    }

    // Error State
    this->fail(noad);
    return nullptr;
}

SkoarNoadPtr SkoarParser::ugen_simple(SkoarNoadPtr parent) {
    SkoarNoadPtr noad = SkoarNoad::New<ESkoarNoad::ugen_simple>(L"ugen_simple", parent);
    list<ESkoarToke::Kind>* desires = nullptr;

    if (++deep > 1000) {
        this->fail_too_deep(parent);
    }

    // ugen_simple -> AUGen
    desires = &skoarStats->desirables[107];
    if (toker->sees(desires) != nullptr) {
        SkoarNoadPtr toke_noad;
        skoarStats->tokeFreq[ESkoarToke::AUGen] += 0.1f;
        toke_noad = SkoarNoad::New(L"Toke_AUGen", noad, toker->burn(ESkoarToke::AUGen, noad));
        noad->add_noad(toke_noad);
        --deep;
        return noad;
    }

    // ugen_simple -> KUGen
    desires = &skoarStats->desirables[108];
    if (toker->sees(desires) != nullptr) {
        SkoarNoadPtr toke_noad;
        skoarStats->tokeFreq[ESkoarToke::KUGen] += 0.1f;
        toke_noad = SkoarNoad::New(L"Toke_KUGen", noad, toker->burn(ESkoarToke::KUGen, noad));
        noad->add_noad(toke_noad);
        --deep;
        return noad;
    }

    // ugen_simple -> DUGen
    desires = &skoarStats->desirables[109];
    if (toker->sees(desires) != nullptr) {
        SkoarNoadPtr toke_noad;
        skoarStats->tokeFreq[ESkoarToke::DUGen] += 0.1f;
        toke_noad = SkoarNoad::New(L"Toke_DUGen", noad, toker->burn(ESkoarToke::DUGen, noad));
        noad->add_noad(toke_noad);
        --deep;
        return noad;
    }

    // Error State
    this->fail(noad);
    return nullptr;
}

SkoarNoadPtr SkoarParser::times(SkoarNoadPtr parent) {
    SkoarNoadPtr noad = SkoarNoad::New<ESkoarNoad::times>(L"times", parent);
    list<ESkoarToke::Kind>* desires = nullptr;

    if (++deep > 1000) {
        this->fail_too_deep(parent);
    }

    // times -> Times
    desires = &skoarStats->desirables[110];
    if (toker->sees(desires) != nullptr) {
        SkoarNoadPtr toke_noad;
        skoarStats->tokeFreq[ESkoarToke::Times] += 0.1f;
        toke_noad = SkoarNoad::New(L"Toke_Times", noad, toker->burn(ESkoarToke::Times, noad));
        noad->add_noad(toke_noad);
        --deep;
        return noad;
    }

    // Error State
    this->fail(noad);
    return nullptr;
}

SkoarNoadPtr SkoarParser::assignment(SkoarNoadPtr parent) {
    SkoarNoadPtr noad = SkoarNoad::New<ESkoarNoad::assignment>(L"assignment", parent);
    list<ESkoarToke::Kind>* desires = nullptr;

    if (++deep > 1000) {
        this->fail_too_deep(parent);
    }

    // assignment -> SymbolColon boolean_or
    desires = &skoarStats->desirables[111];
    if (toker->sees(desires) != nullptr) {
        SkoarNoadPtr toke_noad;
        skoarStats->tokeFreq[ESkoarToke::SymbolColon] += 0.1f;
        toke_noad = SkoarNoad::New(L"Toke_SymbolColon", noad, toker->burn(ESkoarToke::SymbolColon, noad));
        noad->add_noad(toke_noad);
        noad->add_noad(this->boolean_or(noad));
        --deep;
        return noad;
    }

    // assignment -> boolean_or
    desires = &skoarStats->desirables[112];
    if (toker->sees(desires) != nullptr) {
        SkoarNoadPtr toke_noad;
        noad->add_noad(this->boolean_or(noad));
        --deep;
        return noad;
    }

    // Error State
    this->fail(noad);
    return nullptr;
}

SkoarNoadPtr SkoarParser::opt_times(SkoarNoadPtr parent) {
    SkoarNoadPtr noad = parent;
    list<ESkoarToke::Kind>* desires = nullptr;

    if (++deep > 1000) {
        this->fail_too_deep(parent);
    }

    // opt_times -> times
    desires = &skoarStats->desirables[113];
    if (toker->sees(desires) != nullptr) {
        SkoarNoadPtr toke_noad;
        noad->add_noad(this->times(noad));
        --deep;
        return noad;
    }

    // <e>
    --deep;
    return noad;
}

SkoarNoadPtr SkoarParser::boolean_or(SkoarNoadPtr parent) {
    SkoarNoadPtr noad = SkoarNoad::New<ESkoarNoad::boolean_or>(L"boolean_or", parent);
    list<ESkoarToke::Kind>* desires = nullptr;

    if (++deep > 1000) {
        this->fail_too_deep(parent);
    }

    // boolean_or -> boolean_and boolean_or_prime
    desires = &skoarStats->desirables[114];
    if (toker->sees(desires) != nullptr) {
        SkoarNoadPtr toke_noad;
        noad->add_noad(this->boolean_and(noad));
        this->boolean_or_prime(noad);
        --deep;
        return noad;
    }

    // Error State
    this->fail(noad);
    return nullptr;
}

SkoarNoadPtr SkoarParser::boolean_and(SkoarNoadPtr parent) {
    SkoarNoadPtr noad = SkoarNoad::New<ESkoarNoad::boolean_and>(L"boolean_and", parent);
    list<ESkoarToke::Kind>* desires = nullptr;

    if (++deep > 1000) {
        this->fail_too_deep(parent);
    }

    // boolean_and -> cmp_eq_neq boolean_and_prime
    desires = &skoarStats->desirables[115];
    if (toker->sees(desires) != nullptr) {
        SkoarNoadPtr toke_noad;
        noad->add_noad(this->cmp_eq_neq(noad));
        this->boolean_and_prime(noad);
        --deep;
        return noad;
    }

    // Error State
    this->fail(noad);
    return nullptr;
}

SkoarNoadPtr SkoarParser::boolean_or_prime(SkoarNoadPtr parent) {
    SkoarNoadPtr noad = parent;
    list<ESkoarToke::Kind>* desires = nullptr;

    if (++deep > 1000) {
        this->fail_too_deep(parent);
    }

    // boolean_or_prime -> BooleanOr boolean_and boolean_or_prime
    desires = &skoarStats->desirables[116];
    if (toker->sees(desires) != nullptr) {
        SkoarNoadPtr toke_noad;
        skoarStats->tokeFreq[ESkoarToke::BooleanOr] += 0.1f;
        toke_noad = SkoarNoad::New(L"Toke_BooleanOr", noad, toker->burn(ESkoarToke::BooleanOr, noad));
        noad->add_noad(toke_noad);
        noad->add_noad(this->boolean_and(noad));
        this->boolean_or_prime(noad);
        --deep;
        return noad;
    }

    // <e>
    --deep;
    return noad;
}

SkoarNoadPtr SkoarParser::cmp_eq_neq(SkoarNoadPtr parent) {
    SkoarNoadPtr noad = SkoarNoad::New<ESkoarNoad::cmp_eq_neq>(L"cmp_eq_neq", parent);
    list<ESkoarToke::Kind>* desires = nullptr;

    if (++deep > 1000) {
        this->fail_too_deep(parent);
    }

    // cmp_eq_neq -> cmp_gt_lt cmp_eq_neq_prime
    desires = &skoarStats->desirables[117];
    if (toker->sees(desires) != nullptr) {
        SkoarNoadPtr toke_noad;
        noad->add_noad(this->cmp_gt_lt(noad));
        this->cmp_eq_neq_prime(noad);
        --deep;
        return noad;
    }

    // Error State
    this->fail(noad);
    return nullptr;
}

SkoarNoadPtr SkoarParser::boolean_and_prime(SkoarNoadPtr parent) {
    SkoarNoadPtr noad = parent;
    list<ESkoarToke::Kind>* desires = nullptr;

    if (++deep > 1000) {
        this->fail_too_deep(parent);
    }

    // boolean_and_prime -> BooleanAnd cmp_eq_neq boolean_and_prime
    desires = &skoarStats->desirables[118];
    if (toker->sees(desires) != nullptr) {
        SkoarNoadPtr toke_noad;
        skoarStats->tokeFreq[ESkoarToke::BooleanAnd] += 0.1f;
        toke_noad = SkoarNoad::New(L"Toke_BooleanAnd", noad, toker->burn(ESkoarToke::BooleanAnd, noad));
        noad->add_noad(toke_noad);
        noad->add_noad(this->cmp_eq_neq(noad));
        this->boolean_and_prime(noad);
        --deep;
        return noad;
    }

    // <e>
    --deep;
    return noad;
}

SkoarNoadPtr SkoarParser::cmp_gt_lt(SkoarNoadPtr parent) {
    SkoarNoadPtr noad = SkoarNoad::New<ESkoarNoad::cmp_gt_lt>(L"cmp_gt_lt", parent);
    list<ESkoarToke::Kind>* desires = nullptr;

    if (++deep > 1000) {
        this->fail_too_deep(parent);
    }

    // cmp_gt_lt -> math_add_sub cmp_gt_lt_prime
    desires = &skoarStats->desirables[119];
    if (toker->sees(desires) != nullptr) {
        SkoarNoadPtr toke_noad;
        noad->add_noad(this->math_add_sub(noad));
        this->cmp_gt_lt_prime(noad);
        --deep;
        return noad;
    }

    // Error State
    this->fail(noad);
    return nullptr;
}

SkoarNoadPtr SkoarParser::cmp_eq_neq_prime(SkoarNoadPtr parent) {
    SkoarNoadPtr noad = parent;
    list<ESkoarToke::Kind>* desires = nullptr;

    if (++deep > 1000) {
        this->fail_too_deep(parent);
    }

    // cmp_eq_neq_prime -> CmpEqNeq cmp_gt_lt cmp_eq_neq_prime
    desires = &skoarStats->desirables[120];
    if (toker->sees(desires) != nullptr) {
        SkoarNoadPtr toke_noad;
        skoarStats->tokeFreq[ESkoarToke::CmpEqNeq] += 0.1f;
        toke_noad = SkoarNoad::New(L"Toke_CmpEqNeq", noad, toker->burn(ESkoarToke::CmpEqNeq, noad));
        noad->add_noad(toke_noad);
        noad->add_noad(this->cmp_gt_lt(noad));
        this->cmp_eq_neq_prime(noad);
        --deep;
        return noad;
    }

    // <e>
    --deep;
    return noad;
}

SkoarNoadPtr SkoarParser::math_add_sub(SkoarNoadPtr parent) {
    SkoarNoadPtr noad = SkoarNoad::New<ESkoarNoad::math_add_sub>(L"math_add_sub", parent);
    list<ESkoarToke::Kind>* desires = nullptr;

    if (++deep > 1000) {
        this->fail_too_deep(parent);
    }

    // math_add_sub -> math_mul_div_mod math_add_sub_prime
    desires = &skoarStats->desirables[121];
    if (toker->sees(desires) != nullptr) {
        SkoarNoadPtr toke_noad;
        noad->add_noad(this->math_mul_div_mod(noad));
        this->math_add_sub_prime(noad);
        --deep;
        return noad;
    }

    // Error State
    this->fail(noad);
    return nullptr;
}

SkoarNoadPtr SkoarParser::cmp_gt_lt_prime(SkoarNoadPtr parent) {
    SkoarNoadPtr noad = parent;
    list<ESkoarToke::Kind>* desires = nullptr;

    if (++deep > 1000) {
        this->fail_too_deep(parent);
    }

    // cmp_gt_lt_prime -> CmpGtLt math_add_sub cmp_gt_lt_prime
    desires = &skoarStats->desirables[122];
    if (toker->sees(desires) != nullptr) {
        SkoarNoadPtr toke_noad;
        skoarStats->tokeFreq[ESkoarToke::CmpGtLt] += 0.1f;
        toke_noad = SkoarNoad::New(L"Toke_CmpGtLt", noad, toker->burn(ESkoarToke::CmpGtLt, noad));
        noad->add_noad(toke_noad);
        noad->add_noad(this->math_add_sub(noad));
        this->cmp_gt_lt_prime(noad);
        --deep;
        return noad;
    }

    // <e>
    --deep;
    return noad;
}

SkoarNoadPtr SkoarParser::math_mul_div_mod(SkoarNoadPtr parent) {
    SkoarNoadPtr noad = SkoarNoad::New<ESkoarNoad::math_mul_div_mod>(L"math_mul_div_mod", parent);
    list<ESkoarToke::Kind>* desires = nullptr;

    if (++deep > 1000) {
        this->fail_too_deep(parent);
    }

    // math_mul_div_mod -> expr_h math_mul_div_mod_prime
    desires = &skoarStats->desirables[123];
    if (toker->sees(desires) != nullptr) {
        SkoarNoadPtr toke_noad;
        this->expr_h(noad);
        this->math_mul_div_mod_prime(noad);
        --deep;
        return noad;
    }

    // Error State
    this->fail(noad);
    return nullptr;
}

SkoarNoadPtr SkoarParser::math_add_sub_prime(SkoarNoadPtr parent) {
    SkoarNoadPtr noad = parent;
    list<ESkoarToke::Kind>* desires = nullptr;

    if (++deep > 1000) {
        this->fail_too_deep(parent);
    }

    // math_add_sub_prime -> MathOpAddSub math_mul_div_mod math_add_sub_prime
    desires = &skoarStats->desirables[124];
    if (toker->sees(desires) != nullptr) {
        SkoarNoadPtr toke_noad;
        skoarStats->tokeFreq[ESkoarToke::MathOpAddSub] += 0.1f;
        toke_noad = SkoarNoad::New(L"Toke_MathOpAddSub", noad, toker->burn(ESkoarToke::MathOpAddSub, noad));
        noad->add_noad(toke_noad);
        noad->add_noad(this->math_mul_div_mod(noad));
        this->math_add_sub_prime(noad);
        --deep;
        return noad;
    }

    // <e>
    --deep;
    return noad;
}

SkoarNoadPtr SkoarParser::expr_h(SkoarNoadPtr parent) {
    SkoarNoadPtr noad = parent;
    list<ESkoarToke::Kind>* desires = nullptr;

    if (++deep > 1000) {
        this->fail_too_deep(parent);
    }

    // expr_h -> BracketS expr BracketE
    desires = &skoarStats->desirables[125];
    if (toker->sees(desires) != nullptr) {
        SkoarNoadPtr toke_noad;
        skoarStats->tokeFreq[ESkoarToke::BracketS] += 0.1f;
        toke_noad = SkoarNoad::New(L"Toke_BracketS", noad, toker->burn(ESkoarToke::BracketS, noad));
        noad->add_noad(toke_noad);
        noad->add_noad(this->expr(noad));
        skoarStats->tokeFreq[ESkoarToke::BracketE] += 0.1f;
        toke_noad = SkoarNoad::New(L"Toke_BracketE", noad, toker->burn(ESkoarToke::BracketE, noad));
        noad->add_noad(toke_noad);
        --deep;
        return noad;
    }

    // expr_h -> msgable
    desires = &skoarStats->desirables[126];
    if (toker->sees(desires) != nullptr) {
        SkoarNoadPtr toke_noad;
        noad->add_noad(this->msgable(noad));
        --deep;
        return noad;
    }

    // Error State
    this->fail(noad);
    return nullptr;
}

SkoarNoadPtr SkoarParser::math_mul_div_mod_prime(SkoarNoadPtr parent) {
    SkoarNoadPtr noad = parent;
    list<ESkoarToke::Kind>* desires = nullptr;

    if (++deep > 1000) {
        this->fail_too_deep(parent);
    }

    // math_mul_div_mod_prime -> MathOpMulDivMod expr_h math_mul_div_mod_prime
    desires = &skoarStats->desirables[127];
    if (toker->sees(desires) != nullptr) {
        SkoarNoadPtr toke_noad;
        skoarStats->tokeFreq[ESkoarToke::MathOpMulDivMod] += 0.1f;
        toke_noad = SkoarNoad::New(L"Toke_MathOpMulDivMod", noad, toker->burn(ESkoarToke::MathOpMulDivMod, noad));
        noad->add_noad(toke_noad);
        this->expr_h(noad);
        this->math_mul_div_mod_prime(noad);
        --deep;
        return noad;
    }

    // <e>
    --deep;
    return noad;
}


void SkoarParser::sortDesirables() {
    localSortDesirables();
}

