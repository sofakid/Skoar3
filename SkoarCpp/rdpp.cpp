// =====================================================================================================================
// rdpp.cpp - Generated by Code_Parser_Cpp - Create Recursive Descent Predictive Parser on 2017-03-07 03:28:58 for C++14
// =====================================================================================================================
#include "rdpp.hpp"
#include "exception.hpp"
#include "lex.hpp"
#include "noad.hpp"

void SkoarParser::fail() {
    toker->dump();
    throw new SkoarParseException(L"Fail");;
}

void SkoarParser::fail_too_deep() {
    toker->dump();
    throw new SkoarParseException(L"Parse tree too deep!");;
}

 SkoarParser::SkoarParser(SkoarToker * toker) {

    this->deep = 0;
    this->toker = toker;
    this->init_desirables();
    
}

static list<ESkoarToke::Kind> desirables[118];
void SkoarParser::init_desirables() {

    // branches
    desirables[0] = {ESkoarToke::Volta, ESkoarToke::Crotchets, ESkoarToke::SkoarpionStart, ESkoarToke::DynPiano, ESkoarToke::Fine,
               ESkoarToke::CondS, ESkoarToke::DynForte, ESkoarToke::Loco, ESkoarToke::Eighths, ESkoarToke::ListS,
               ESkoarToke::OttavaB, ESkoarToke::True, ESkoarToke::Choard, ESkoarToke::LWing, ESkoarToke::QuindicesimaA,
               ESkoarToke::Quavers, ESkoarToke::Int, ESkoarToke::Caesura, ESkoarToke::Deref, ESkoarToke::Float,
               ESkoarToke::OttavaA, ESkoarToke::Coda, ESkoarToke::Bars, ESkoarToke::Freq, ESkoarToke::Tuplet,
               ESkoarToke::NamedNoat, ESkoarToke::PedalDown, ESkoarToke::Slash, ESkoarToke::DynFP, ESkoarToke::False,
               ESkoarToke::QuindicesimaB, ESkoarToke::Quarters, ESkoarToke::String, ESkoarToke::Voice, ESkoarToke::Meter,
               ESkoarToke::Newline, ESkoarToke::DynSFZ, ESkoarToke::Comment, ESkoarToke::LoopS, ESkoarToke::Portamento,
               ESkoarToke::Crap, ESkoarToke::PedalUp, ESkoarToke::OctaveShift, ESkoarToke::Rep, ESkoarToke::Symbol,
               ESkoarToke::Fairy, ESkoarToke::Segno, ESkoarToke::DaCapo, ESkoarToke::HashLevel, ESkoarToke::DalSegno,
               ESkoarToke::Carrot};

    // skoar
    desirables[1] = {ESkoarToke::Eof, ESkoarToke::Volta, ESkoarToke::Crotchets, ESkoarToke::SkoarpionStart, ESkoarToke::DynPiano,
               ESkoarToke::Fine, ESkoarToke::CondS, ESkoarToke::DynForte, ESkoarToke::Loco, ESkoarToke::ListS,
               ESkoarToke::OttavaB, ESkoarToke::True, ESkoarToke::Choard, ESkoarToke::LWing, ESkoarToke::QuindicesimaA,
               ESkoarToke::Quavers, ESkoarToke::Int, ESkoarToke::Caesura, ESkoarToke::Deref, ESkoarToke::Float,
               ESkoarToke::Bars, ESkoarToke::Coda, ESkoarToke::OttavaA, ESkoarToke::Freq, ESkoarToke::Tuplet,
               ESkoarToke::NamedNoat, ESkoarToke::PedalDown, ESkoarToke::Slash, ESkoarToke::DynFP, ESkoarToke::False,
               ESkoarToke::QuindicesimaB, ESkoarToke::Quarters, ESkoarToke::String, ESkoarToke::Voice, ESkoarToke::Meter,
               ESkoarToke::Newline, ESkoarToke::DynSFZ, ESkoarToke::Comment, ESkoarToke::LoopS, ESkoarToke::Portamento,
               ESkoarToke::Crap, ESkoarToke::PedalUp, ESkoarToke::OctaveShift, ESkoarToke::Carrot, ESkoarToke::Rep,
               ESkoarToke::Symbol, ESkoarToke::Fairy, ESkoarToke::Segno, ESkoarToke::DaCapo, ESkoarToke::HashLevel,
               ESkoarToke::DalSegno, ESkoarToke::Eighths};

    // branch
    desirables[2] = {ESkoarToke::Volta, ESkoarToke::Crotchets, ESkoarToke::SkoarpionStart, ESkoarToke::DynPiano, ESkoarToke::Fine,
               ESkoarToke::CondS, ESkoarToke::DynForte, ESkoarToke::Loco, ESkoarToke::Eighths, ESkoarToke::ListS,
               ESkoarToke::OttavaB, ESkoarToke::True, ESkoarToke::Choard, ESkoarToke::LWing, ESkoarToke::QuindicesimaA,
               ESkoarToke::Quavers, ESkoarToke::Int, ESkoarToke::Caesura, ESkoarToke::Deref, ESkoarToke::Float,
               ESkoarToke::OttavaA, ESkoarToke::Coda, ESkoarToke::Bars, ESkoarToke::Freq, ESkoarToke::Tuplet,
               ESkoarToke::NamedNoat, ESkoarToke::PedalDown, ESkoarToke::Slash, ESkoarToke::DynFP, ESkoarToke::False,
               ESkoarToke::QuindicesimaB, ESkoarToke::Quarters, ESkoarToke::String, ESkoarToke::Voice, ESkoarToke::Meter,
               ESkoarToke::Newline, ESkoarToke::DynSFZ, ESkoarToke::Comment, ESkoarToke::LoopS, ESkoarToke::PedalUp,
               ESkoarToke::Crap, ESkoarToke::Portamento, ESkoarToke::OctaveShift, ESkoarToke::Rep, ESkoarToke::Symbol,
               ESkoarToke::Fairy, ESkoarToke::Segno, ESkoarToke::DaCapo, ESkoarToke::HashLevel, ESkoarToke::DalSegno,
               ESkoarToke::Carrot};

    // optional_voice
    desirables[3] = {ESkoarToke::Voice};

    // phrases
    desirables[4] = {ESkoarToke::Volta, ESkoarToke::Crotchets, ESkoarToke::SkoarpionStart, ESkoarToke::DynPiano, ESkoarToke::Fine,
               ESkoarToke::CondS, ESkoarToke::DynForte, ESkoarToke::Loco, ESkoarToke::ListS, ESkoarToke::OttavaB,
               ESkoarToke::True, ESkoarToke::Choard, ESkoarToke::LWing, ESkoarToke::QuindicesimaA, ESkoarToke::Quavers,
               ESkoarToke::Int, ESkoarToke::Caesura, ESkoarToke::Deref, ESkoarToke::Float, ESkoarToke::Bars,
               ESkoarToke::Coda, ESkoarToke::OttavaA, ESkoarToke::Freq, ESkoarToke::Tuplet, ESkoarToke::NamedNoat,
               ESkoarToke::PedalDown, ESkoarToke::Slash, ESkoarToke::DynFP, ESkoarToke::False, ESkoarToke::QuindicesimaB,
               ESkoarToke::Quarters, ESkoarToke::String, ESkoarToke::Meter, ESkoarToke::DynSFZ, ESkoarToke::Comment,
               ESkoarToke::LoopS, ESkoarToke::Portamento, ESkoarToke::Crap, ESkoarToke::PedalUp, ESkoarToke::OctaveShift,
               ESkoarToke::Carrot, ESkoarToke::Rep, ESkoarToke::Symbol, ESkoarToke::Fairy, ESkoarToke::Segno,
               ESkoarToke::DaCapo, ESkoarToke::HashLevel, ESkoarToke::DalSegno, ESkoarToke::Eighths};

    // phrasey
    desirables[5] = {ESkoarToke::Comment};
    desirables[6] = {ESkoarToke::Segno, ESkoarToke::Bars, ESkoarToke::Volta, ESkoarToke::Coda, ESkoarToke::Fine};
    desirables[7] = {ESkoarToke::Meter};
    desirables[8] = {ESkoarToke::SkoarpionStart, ESkoarToke::DynPiano, ESkoarToke::CondS, ESkoarToke::DynForte, ESkoarToke::Loco,
               ESkoarToke::ListS, ESkoarToke::OttavaB, ESkoarToke::True, ESkoarToke::Choard, ESkoarToke::LWing,
               ESkoarToke::QuindicesimaA, ESkoarToke::Int, ESkoarToke::Caesura, ESkoarToke::Deref, ESkoarToke::Float,
               ESkoarToke::OttavaA, ESkoarToke::Freq, ESkoarToke::Tuplet, ESkoarToke::NamedNoat, ESkoarToke::PedalDown,
               ESkoarToke::DynFP, ESkoarToke::False, ESkoarToke::QuindicesimaB, ESkoarToke::String, ESkoarToke::DynSFZ,
               ESkoarToke::LoopS, ESkoarToke::Portamento, ESkoarToke::Crap, ESkoarToke::PedalUp, ESkoarToke::OctaveShift,
               ESkoarToke::Rep, ESkoarToke::Symbol, ESkoarToke::Fairy, ESkoarToke::HashLevel, ESkoarToke::Carrot};
    desirables[9] = {ESkoarToke::DaCapo, ESkoarToke::DalSegno};
    desirables[10] = {ESkoarToke::Slash, ESkoarToke::Crotchets, ESkoarToke::Quarters, ESkoarToke::Eighths, ESkoarToke::Quavers};

    // marker
    desirables[11] = {ESkoarToke::Segno};
    desirables[12] = {ESkoarToke::Fine};
    desirables[13] = {ESkoarToke::Coda};
    desirables[14] = {ESkoarToke::Volta};
    desirables[15] = {ESkoarToke::Bars};

    // expr
    desirables[16] = {ESkoarToke::SkoarpionStart, ESkoarToke::DynPiano, ESkoarToke::CondS, ESkoarToke::DynForte, ESkoarToke::Loco,
               ESkoarToke::ListS, ESkoarToke::OttavaB, ESkoarToke::True, ESkoarToke::Choard, ESkoarToke::LWing,
               ESkoarToke::QuindicesimaA, ESkoarToke::Int, ESkoarToke::Caesura, ESkoarToke::Deref, ESkoarToke::Float,
               ESkoarToke::OttavaA, ESkoarToke::Freq, ESkoarToke::Tuplet, ESkoarToke::NamedNoat, ESkoarToke::PedalDown,
               ESkoarToke::DynFP, ESkoarToke::False, ESkoarToke::QuindicesimaB, ESkoarToke::String, ESkoarToke::DynSFZ,
               ESkoarToke::LoopS, ESkoarToke::Portamento, ESkoarToke::Crap, ESkoarToke::PedalUp, ESkoarToke::OctaveShift,
               ESkoarToke::Rep, ESkoarToke::Symbol, ESkoarToke::Fairy, ESkoarToke::HashLevel, ESkoarToke::Carrot};

    // dal_goto
    desirables[17] = {ESkoarToke::DaCapo};
    desirables[18] = {ESkoarToke::DalSegno};

    // beat
    desirables[19] = {ESkoarToke::Crotchets};
    desirables[20] = {ESkoarToke::Quavers};
    desirables[21] = {ESkoarToke::Quarters};
    desirables[22] = {ESkoarToke::Eighths};
    desirables[23] = {ESkoarToke::Slash};

    // skrp_sig
    desirables[24] = {ESkoarToke::ArgSpec};
    desirables[25] = {ESkoarToke::SymbolName};

    // skrp_suffix
    desirables[26] = {ESkoarToke::Volta, ESkoarToke::Crotchets, ESkoarToke::SkoarpionStart, ESkoarToke::DynPiano, ESkoarToke::Fine,
               ESkoarToke::CondS, ESkoarToke::DynForte, ESkoarToke::Loco, ESkoarToke::Eighths, ESkoarToke::ListS,
               ESkoarToke::OttavaB, ESkoarToke::True, ESkoarToke::Choard, ESkoarToke::LWing, ESkoarToke::QuindicesimaA,
               ESkoarToke::Quavers, ESkoarToke::Int, ESkoarToke::Caesura, ESkoarToke::Deref, ESkoarToke::Float,
               ESkoarToke::OttavaA, ESkoarToke::Coda, ESkoarToke::Bars, ESkoarToke::Freq, ESkoarToke::Tuplet,
               ESkoarToke::NamedNoat, ESkoarToke::PedalDown, ESkoarToke::Slash, ESkoarToke::DynFP, ESkoarToke::False,
               ESkoarToke::QuindicesimaB, ESkoarToke::Quarters, ESkoarToke::SkoarpionEnd, ESkoarToke::String, ESkoarToke::Voice,
               ESkoarToke::Meter, ESkoarToke::Newline, ESkoarToke::DynSFZ, ESkoarToke::Comment, ESkoarToke::LoopS,
               ESkoarToke::Portamento, ESkoarToke::Crap, ESkoarToke::PedalUp, ESkoarToke::OctaveShift, ESkoarToke::Rep,
               ESkoarToke::Symbol, ESkoarToke::Fairy, ESkoarToke::Segno, ESkoarToke::DaCapo, ESkoarToke::HashLevel,
               ESkoarToke::DalSegno, ESkoarToke::Carrot};

    // skoarpion
    desirables[27] = {ESkoarToke::SkoarpionStart};

    // opt_arg_spec
    desirables[28] = {ESkoarToke::ArgSpec};

    // skrp_lines
    desirables[29] = {ESkoarToke::Volta, ESkoarToke::Crotchets, ESkoarToke::SkoarpionStart, ESkoarToke::DynPiano, ESkoarToke::Fine,
               ESkoarToke::CondS, ESkoarToke::DynForte, ESkoarToke::Loco, ESkoarToke::Eighths, ESkoarToke::ListS,
               ESkoarToke::OttavaB, ESkoarToke::True, ESkoarToke::Choard, ESkoarToke::LWing, ESkoarToke::QuindicesimaA,
               ESkoarToke::Quavers, ESkoarToke::Int, ESkoarToke::Caesura, ESkoarToke::Deref, ESkoarToke::Float,
               ESkoarToke::OttavaA, ESkoarToke::Coda, ESkoarToke::Bars, ESkoarToke::Freq, ESkoarToke::Tuplet,
               ESkoarToke::NamedNoat, ESkoarToke::PedalDown, ESkoarToke::Slash, ESkoarToke::DynFP, ESkoarToke::False,
               ESkoarToke::QuindicesimaB, ESkoarToke::Quarters, ESkoarToke::SkoarpionEnd, ESkoarToke::String, ESkoarToke::Voice,
               ESkoarToke::Meter, ESkoarToke::Newline, ESkoarToke::DynSFZ, ESkoarToke::Comment, ESkoarToke::LoopS,
               ESkoarToke::PedalUp, ESkoarToke::Crap, ESkoarToke::Portamento, ESkoarToke::OctaveShift, ESkoarToke::Rep,
               ESkoarToke::Symbol, ESkoarToke::Fairy, ESkoarToke::Segno, ESkoarToke::DaCapo, ESkoarToke::HashLevel,
               ESkoarToke::DalSegno, ESkoarToke::Carrot};

    // skrp_moar_lines
    desirables[30] = {ESkoarToke::Newline};

    // listy_suffix
    desirables[31] = {ESkoarToke::SkoarpionStart, ESkoarToke::DynPiano, ESkoarToke::CondS, ESkoarToke::DynForte, ESkoarToke::Loco,
               ESkoarToke::ListS, ESkoarToke::OttavaB, ESkoarToke::True, ESkoarToke::Choard, ESkoarToke::LWing,
               ESkoarToke::QuindicesimaA, ESkoarToke::Int, ESkoarToke::Caesura, ESkoarToke::Deref, ESkoarToke::Float,
               ESkoarToke::OttavaA, ESkoarToke::Freq, ESkoarToke::Tuplet, ESkoarToke::NamedNoat, ESkoarToke::PedalDown,
               ESkoarToke::DynFP, ESkoarToke::False, ESkoarToke::QuindicesimaB, ESkoarToke::String, ESkoarToke::DynSFZ,
               ESkoarToke::LoopS, ESkoarToke::Portamento, ESkoarToke::Crap, ESkoarToke::PedalUp, ESkoarToke::OctaveShift,
               ESkoarToke::Rep, ESkoarToke::Symbol, ESkoarToke::Fairy, ESkoarToke::HashLevel, ESkoarToke::Carrot};
    desirables[32] = {ESkoarToke::ListE};

    // listy
    desirables[33] = {ESkoarToke::ListS};

    // listy_entries
    desirables[34] = {ESkoarToke::SkoarpionStart, ESkoarToke::DynPiano, ESkoarToke::CondS, ESkoarToke::DynForte, ESkoarToke::Loco,
               ESkoarToke::ListS, ESkoarToke::OttavaB, ESkoarToke::True, ESkoarToke::Choard, ESkoarToke::LWing,
               ESkoarToke::QuindicesimaA, ESkoarToke::Int, ESkoarToke::Caesura, ESkoarToke::Deref, ESkoarToke::Float,
               ESkoarToke::OttavaA, ESkoarToke::Freq, ESkoarToke::Tuplet, ESkoarToke::NamedNoat, ESkoarToke::PedalDown,
               ESkoarToke::DynFP, ESkoarToke::False, ESkoarToke::QuindicesimaB, ESkoarToke::String, ESkoarToke::DynSFZ,
               ESkoarToke::LoopS, ESkoarToke::Portamento, ESkoarToke::Crap, ESkoarToke::PedalUp, ESkoarToke::OctaveShift,
               ESkoarToke::Rep, ESkoarToke::Symbol, ESkoarToke::Fairy, ESkoarToke::HashLevel, ESkoarToke::Carrot};

    // moar_listy_entries
    desirables[35] = {ESkoarToke::ListSep};
    desirables[36] = {ESkoarToke::Newline};

    // coda
    desirables[37] = {ESkoarToke::Coda};

    // optional_al_coda
    desirables[38] = {ESkoarToke::AlCoda};

    // al_x
    desirables[39] = {ESkoarToke::AlCoda};
    desirables[40] = {ESkoarToke::AlSegno};
    desirables[41] = {ESkoarToke::AlFine};

    // dynamic
    desirables[42] = {ESkoarToke::DynPiano};
    desirables[43] = {ESkoarToke::DynForte};
    desirables[44] = {ESkoarToke::DynSFZ};
    desirables[45] = {ESkoarToke::DynFP};

    // musical_keyword
    desirables[46] = {ESkoarToke::DynForte, ESkoarToke::DynFP, ESkoarToke::DynPiano, ESkoarToke::DynSFZ};
    desirables[47] = {ESkoarToke::OctaveShift, ESkoarToke::Loco, ESkoarToke::OttavaA, ESkoarToke::OttavaB, ESkoarToke::QuindicesimaB,
               ESkoarToke::QuindicesimaA};
    desirables[48] = {ESkoarToke::PedalUp, ESkoarToke::PedalDown};
    desirables[49] = {ESkoarToke::Carrot, ESkoarToke::Rep, ESkoarToke::Portamento};

    // ottavas
    desirables[50] = {ESkoarToke::OctaveShift};
    desirables[51] = {ESkoarToke::OttavaA};
    desirables[52] = {ESkoarToke::OttavaB};
    desirables[53] = {ESkoarToke::QuindicesimaA};
    desirables[54] = {ESkoarToke::QuindicesimaB};
    desirables[55] = {ESkoarToke::Loco};

    // pedally
    desirables[56] = {ESkoarToke::PedalDown};
    desirables[57] = {ESkoarToke::PedalUp};

    // musical_keyword_misc
    desirables[58] = {ESkoarToke::Rep};
    desirables[59] = {ESkoarToke::Portamento};
    desirables[60] = {ESkoarToke::Carrot};

    // cthulhu
    desirables[61] = {ESkoarToke::LWing};

    // nouny
    desirables[62] = {ESkoarToke::LWing};
    desirables[63] = {ESkoarToke::CondS};
    desirables[64] = {ESkoarToke::LoopS};
    desirables[65] = {ESkoarToke::Int, ESkoarToke::Caesura, ESkoarToke::String, ESkoarToke::Freq, ESkoarToke::Tuplet,
               ESkoarToke::NamedNoat, ESkoarToke::Crap, ESkoarToke::Symbol, ESkoarToke::Fairy, ESkoarToke::False,
               ESkoarToke::Float, ESkoarToke::HashLevel, ESkoarToke::True, ESkoarToke::Choard};
    desirables[66] = {ESkoarToke::OttavaA, ESkoarToke::DynPiano, ESkoarToke::DynSFZ, ESkoarToke::Portamento, ESkoarToke::PedalUp,
               ESkoarToke::PedalDown, ESkoarToke::DynForte, ESkoarToke::OctaveShift, ESkoarToke::DynFP, ESkoarToke::Rep,
               ESkoarToke::Loco, ESkoarToke::OttavaB, ESkoarToke::QuindicesimaB, ESkoarToke::Carrot, ESkoarToke::QuindicesimaA};
    desirables[67] = {ESkoarToke::ListS};
    desirables[68] = {ESkoarToke::Deref};
    desirables[69] = {ESkoarToke::SkoarpionStart};

    // conditional
    desirables[70] = {ESkoarToke::CondS};

    // loop
    desirables[71] = {ESkoarToke::LoopS};

    // nouny_literal
    desirables[72] = {ESkoarToke::Tuplet};
    desirables[73] = {ESkoarToke::Caesura};
    desirables[74] = {ESkoarToke::Freq};
    desirables[75] = {ESkoarToke::Int};
    desirables[76] = {ESkoarToke::Float};
    desirables[77] = {ESkoarToke::String};
    desirables[78] = {ESkoarToke::Choard};
    desirables[79] = {ESkoarToke::NamedNoat};
    desirables[80] = {ESkoarToke::Symbol};
    desirables[81] = {ESkoarToke::Fairy};
    desirables[82] = {ESkoarToke::HashLevel};
    desirables[83] = {ESkoarToke::False};
    desirables[84] = {ESkoarToke::True};
    desirables[85] = {ESkoarToke::Crap};

    // deref
    desirables[86] = {ESkoarToke::Deref};

    // deref_prime
    desirables[87] = {ESkoarToke::MsgNameWithArgs};
    desirables[88] = {ESkoarToke::MsgName};

    // msgable
    desirables[89] = {ESkoarToke::SkoarpionStart, ESkoarToke::DynPiano, ESkoarToke::CondS, ESkoarToke::DynForte, ESkoarToke::Loco,
               ESkoarToke::ListS, ESkoarToke::OttavaB, ESkoarToke::True, ESkoarToke::Choard, ESkoarToke::LWing,
               ESkoarToke::QuindicesimaA, ESkoarToke::Int, ESkoarToke::Caesura, ESkoarToke::Deref, ESkoarToke::Float,
               ESkoarToke::OttavaA, ESkoarToke::Freq, ESkoarToke::Tuplet, ESkoarToke::NamedNoat, ESkoarToke::PedalDown,
               ESkoarToke::DynFP, ESkoarToke::False, ESkoarToke::QuindicesimaB, ESkoarToke::String, ESkoarToke::DynSFZ,
               ESkoarToke::LoopS, ESkoarToke::Portamento, ESkoarToke::Crap, ESkoarToke::PedalUp, ESkoarToke::OctaveShift,
               ESkoarToke::Rep, ESkoarToke::Symbol, ESkoarToke::Fairy, ESkoarToke::HashLevel, ESkoarToke::Carrot};

    // expr_prime
    desirables[90] = {ESkoarToke::AssOp};
    desirables[91] = {ESkoarToke::MathOp};
    desirables[92] = {ESkoarToke::BooleanOp};
    desirables[93] = {ESkoarToke::Times};

    // assignment
    desirables[94] = {ESkoarToke::AssOp};

    // math
    desirables[95] = {ESkoarToke::MathOp};

    // boolean
    desirables[96] = {ESkoarToke::BooleanOp};

    // times
    desirables[97] = {ESkoarToke::Times};

    // settable
    desirables[98] = {ESkoarToke::Caesura};
    desirables[99] = {ESkoarToke::Symbol};
    desirables[100] = {ESkoarToke::ListS};
    desirables[101] = {ESkoarToke::Quarters};
    desirables[102] = {ESkoarToke::Eighths};
    desirables[103] = {ESkoarToke::Fairy};

    // msg_chain_node
    desirables[104] = {ESkoarToke::MsgOp};

    // msg
    desirables[105] = {ESkoarToke::MsgNameWithArgs};
    desirables[106] = {ESkoarToke::MsgName};
    desirables[107] = {ESkoarToke::ListS};
    desirables[108] = {ESkoarToke::LoopS};

    // cthulhu_prime
    desirables[109] = {ESkoarToke::SkoarpionStart, ESkoarToke::DynPiano, ESkoarToke::CondS, ESkoarToke::DynForte, ESkoarToke::Loco,
               ESkoarToke::ListS, ESkoarToke::OttavaB, ESkoarToke::True, ESkoarToke::Choard, ESkoarToke::LWing,
               ESkoarToke::QuindicesimaA, ESkoarToke::Int, ESkoarToke::Caesura, ESkoarToke::Deref, ESkoarToke::Float,
               ESkoarToke::OttavaA, ESkoarToke::Freq, ESkoarToke::Tuplet, ESkoarToke::NamedNoat, ESkoarToke::PedalDown,
               ESkoarToke::DynFP, ESkoarToke::False, ESkoarToke::QuindicesimaB, ESkoarToke::String, ESkoarToke::DynSFZ,
               ESkoarToke::LoopS, ESkoarToke::Portamento, ESkoarToke::Crap, ESkoarToke::PedalUp, ESkoarToke::OctaveShift,
               ESkoarToke::Rep, ESkoarToke::Symbol, ESkoarToke::Fairy, ESkoarToke::HashLevel, ESkoarToke::Carrot};
    desirables[110] = {ESkoarToke::Nosey};

    // cond_ifs
    desirables[111] = {ESkoarToke::SkoarpionStart, ESkoarToke::DynPiano, ESkoarToke::CondS, ESkoarToke::DynForte, ESkoarToke::Loco,
               ESkoarToke::ListS, ESkoarToke::OttavaB, ESkoarToke::True, ESkoarToke::Choard, ESkoarToke::LWing,
               ESkoarToke::QuindicesimaA, ESkoarToke::Int, ESkoarToke::Caesura, ESkoarToke::Deref, ESkoarToke::Float,
               ESkoarToke::OttavaA, ESkoarToke::Freq, ESkoarToke::Tuplet, ESkoarToke::NamedNoat, ESkoarToke::PedalDown,
               ESkoarToke::DynFP, ESkoarToke::False, ESkoarToke::QuindicesimaB, ESkoarToke::String, ESkoarToke::Voice,
               ESkoarToke::DynSFZ, ESkoarToke::LoopS, ESkoarToke::Portamento, ESkoarToke::Crap, ESkoarToke::PedalUp,
               ESkoarToke::OctaveShift, ESkoarToke::Rep, ESkoarToke::Symbol, ESkoarToke::Fairy, ESkoarToke::HashLevel,
               ESkoarToke::Carrot};

    // cond_if
    desirables[112] = {ESkoarToke::SkoarpionStart, ESkoarToke::DynPiano, ESkoarToke::CondS, ESkoarToke::DynForte, ESkoarToke::Loco,
               ESkoarToke::ListS, ESkoarToke::OttavaB, ESkoarToke::True, ESkoarToke::Choard, ESkoarToke::LWing,
               ESkoarToke::QuindicesimaA, ESkoarToke::Int, ESkoarToke::Caesura, ESkoarToke::Deref, ESkoarToke::Float,
               ESkoarToke::OttavaA, ESkoarToke::Freq, ESkoarToke::Tuplet, ESkoarToke::NamedNoat, ESkoarToke::PedalDown,
               ESkoarToke::DynFP, ESkoarToke::False, ESkoarToke::QuindicesimaB, ESkoarToke::String, ESkoarToke::Voice,
               ESkoarToke::DynSFZ, ESkoarToke::LoopS, ESkoarToke::Portamento, ESkoarToke::Crap, ESkoarToke::PedalUp,
               ESkoarToke::OctaveShift, ESkoarToke::Rep, ESkoarToke::Symbol, ESkoarToke::Fairy, ESkoarToke::HashLevel,
               ESkoarToke::Carrot};

    // cond_ifs_suffix
    desirables[113] = {ESkoarToke::Newline};

    // if_body
    desirables[114] = {ESkoarToke::Volta, ESkoarToke::Crotchets, ESkoarToke::SkoarpionStart, ESkoarToke::DynPiano, ESkoarToke::Fine,
               ESkoarToke::CondS, ESkoarToke::DynForte, ESkoarToke::Loco, ESkoarToke::Eighths, ESkoarToke::ListS,
               ESkoarToke::OttavaB, ESkoarToke::True, ESkoarToke::Choard, ESkoarToke::LWing, ESkoarToke::QuindicesimaA,
               ESkoarToke::Quavers, ESkoarToke::Int, ESkoarToke::Caesura, ESkoarToke::Deref, ESkoarToke::CondE,
               ESkoarToke::Float, ESkoarToke::CondIf, ESkoarToke::OttavaA, ESkoarToke::Coda, ESkoarToke::Bars,
               ESkoarToke::Freq, ESkoarToke::Tuplet, ESkoarToke::NamedNoat, ESkoarToke::PedalDown, ESkoarToke::Slash,
               ESkoarToke::DynFP, ESkoarToke::False, ESkoarToke::QuindicesimaB, ESkoarToke::Quarters, ESkoarToke::String,
               ESkoarToke::Meter, ESkoarToke::Newline, ESkoarToke::DynSFZ, ESkoarToke::Comment, ESkoarToke::LoopS,
               ESkoarToke::PedalUp, ESkoarToke::Crap, ESkoarToke::Portamento, ESkoarToke::OctaveShift, ESkoarToke::Rep,
               ESkoarToke::Symbol, ESkoarToke::Fairy, ESkoarToke::Segno, ESkoarToke::DaCapo, ESkoarToke::HashLevel,
               ESkoarToke::DalSegno, ESkoarToke::Carrot};

    // cond_else
    desirables[115] = {ESkoarToke::CondIf};

    // loop_body
    desirables[116] = {ESkoarToke::Volta, ESkoarToke::Crotchets, ESkoarToke::SkoarpionStart, ESkoarToke::DynPiano, ESkoarToke::Fine,
               ESkoarToke::CondS, ESkoarToke::DynForte, ESkoarToke::Loco, ESkoarToke::Eighths, ESkoarToke::ListS,
               ESkoarToke::OttavaB, ESkoarToke::True, ESkoarToke::Choard, ESkoarToke::LWing, ESkoarToke::QuindicesimaA,
               ESkoarToke::Quavers, ESkoarToke::Int, ESkoarToke::Caesura, ESkoarToke::LoopSep, ESkoarToke::Deref,
               ESkoarToke::Float, ESkoarToke::OttavaA, ESkoarToke::Coda, ESkoarToke::Bars, ESkoarToke::Freq,
               ESkoarToke::Tuplet, ESkoarToke::LoopE, ESkoarToke::NamedNoat, ESkoarToke::PedalDown, ESkoarToke::Slash,
               ESkoarToke::DynFP, ESkoarToke::False, ESkoarToke::QuindicesimaB, ESkoarToke::Quarters, ESkoarToke::String,
               ESkoarToke::Meter, ESkoarToke::DynSFZ, ESkoarToke::Comment, ESkoarToke::LoopS, ESkoarToke::PedalUp,
               ESkoarToke::Crap, ESkoarToke::Portamento, ESkoarToke::OctaveShift, ESkoarToke::Rep, ESkoarToke::Symbol,
               ESkoarToke::Fairy, ESkoarToke::Segno, ESkoarToke::DaCapo, ESkoarToke::HashLevel, ESkoarToke::DalSegno,
               ESkoarToke::Carrot};

    // loop_condition
    desirables[117] = {ESkoarToke::LoopSep};
}

SkoarNoad* SkoarParser::branches(SkoarNoad* parent) {
    SkoarNoad* noad = parent;
    list<ESkoarToke::Kind>* desires = nullptr;

    if (++deep > 1000) {
        this->fail_too_deep();
    }

    // branches -> branch branches
    desires = &desirables[0];
    if (toker->sees(desires) != nullptr) {
        noad->add_noad(this->branch(noad));
        this->branches(noad);
        --deep;
        return noad;
    }

    // <e>
    --deep;
    return noad;
}

SkoarNoad* SkoarParser::skoar(SkoarNoad* parent) {
    SkoarNoad* noad = new SkoarNoad(wstring(L"skoar"), ESkoarNoad::skoar, parent);;
    list<ESkoarToke::Kind>* desires = nullptr;

    if (++deep > 1000) {
        this->fail_too_deep();
    }

    // skoar -> branches
    desires = &desirables[1];
    if (toker->sees(desires) != nullptr) {
        this->branches(noad);
        --deep;
        return noad;
    }

    // Error State
    this->fail();
    return nullptr;
}

SkoarNoad* SkoarParser::branch(SkoarNoad* parent) {
    SkoarNoad* noad = new SkoarNoad(wstring(L"branch"), ESkoarNoad::branch, parent);;
    list<ESkoarToke::Kind>* desires = nullptr;

    if (++deep > 1000) {
        this->fail_too_deep();
    }

    // branch -> optional_voice phrases Newline
    desires = &desirables[2];
    if (toker->sees(desires) != nullptr) {
        this->optional_voice(noad);
        this->phrases(noad);
        noad->add_toke(L"Toke_Newline", toker->burn(ESkoarToke::Newline));
        --deep;
        return noad;
    }

    // Error State
    this->fail();
    return nullptr;
}

SkoarNoad* SkoarParser::optional_voice(SkoarNoad* parent) {
    SkoarNoad* noad = parent;
    list<ESkoarToke::Kind>* desires = nullptr;

    if (++deep > 1000) {
        this->fail_too_deep();
    }

    // optional_voice -> Voice
    desires = &desirables[3];
    if (toker->sees(desires) != nullptr) {
        noad->add_toke(L"Toke_Voice", toker->burn(ESkoarToke::Voice));
        --deep;
        return noad;
    }

    // <e>
    --deep;
    return noad;
}

SkoarNoad* SkoarParser::phrases(SkoarNoad* parent) {
    SkoarNoad* noad = parent;
    list<ESkoarToke::Kind>* desires = nullptr;

    if (++deep > 1000) {
        this->fail_too_deep();
    }

    // phrases -> phrasey phrases
    desires = &desirables[4];
    if (toker->sees(desires) != nullptr) {
        this->phrasey(noad);
        this->phrases(noad);
        --deep;
        return noad;
    }

    // <e>
    --deep;
    return noad;
}

SkoarNoad* SkoarParser::phrasey(SkoarNoad* parent) {
    SkoarNoad* noad = parent;
    list<ESkoarToke::Kind>* desires = nullptr;

    if (++deep > 1000) {
        this->fail_too_deep();
    }

    // phrasey -> Comment
    desires = &desirables[5];
    if (toker->sees(desires) != nullptr) {
        noad->add_toke(L"Toke_Comment", toker->burn(ESkoarToke::Comment));
        --deep;
        return noad;
    }

    // phrasey -> marker
    desires = &desirables[6];
    if (toker->sees(desires) != nullptr) {
        noad->add_noad(this->marker(noad));
        --deep;
        return noad;
    }

    // phrasey -> Meter
    desires = &desirables[7];
    if (toker->sees(desires) != nullptr) {
        noad->add_toke(L"Toke_Meter", toker->burn(ESkoarToke::Meter));
        --deep;
        return noad;
    }

    // phrasey -> expr
    desires = &desirables[8];
    if (toker->sees(desires) != nullptr) {
        noad->add_noad(this->expr(noad));
        --deep;
        return noad;
    }

    // phrasey -> dal_goto
    desires = &desirables[9];
    if (toker->sees(desires) != nullptr) {
        noad->add_noad(this->dal_goto(noad));
        --deep;
        return noad;
    }

    // phrasey -> beat
    desires = &desirables[10];
    if (toker->sees(desires) != nullptr) {
        noad->add_noad(this->beat(noad));
        --deep;
        return noad;
    }

    // Error State
    this->fail();
    return nullptr;
}

SkoarNoad* SkoarParser::marker(SkoarNoad* parent) {
    SkoarNoad* noad = new SkoarNoad(wstring(L"marker"), ESkoarNoad::marker, parent);;
    list<ESkoarToke::Kind>* desires = nullptr;

    if (++deep > 1000) {
        this->fail_too_deep();
    }

    // marker -> Segno
    desires = &desirables[11];
    if (toker->sees(desires) != nullptr) {
        noad->add_toke(L"Toke_Segno", toker->burn(ESkoarToke::Segno));
        --deep;
        return noad;
    }

    // marker -> Fine
    desires = &desirables[12];
    if (toker->sees(desires) != nullptr) {
        noad->add_toke(L"Toke_Fine", toker->burn(ESkoarToke::Fine));
        --deep;
        return noad;
    }

    // marker -> coda
    desires = &desirables[13];
    if (toker->sees(desires) != nullptr) {
        noad->add_noad(this->coda(noad));
        --deep;
        return noad;
    }

    // marker -> Volta
    desires = &desirables[14];
    if (toker->sees(desires) != nullptr) {
        noad->add_toke(L"Toke_Volta", toker->burn(ESkoarToke::Volta));
        --deep;
        return noad;
    }

    // marker -> Bars
    desires = &desirables[15];
    if (toker->sees(desires) != nullptr) {
        noad->add_toke(L"Toke_Bars", toker->burn(ESkoarToke::Bars));
        --deep;
        return noad;
    }

    // Error State
    this->fail();
    return nullptr;
}

SkoarNoad* SkoarParser::expr(SkoarNoad* parent) {
    SkoarNoad* noad = new SkoarNoad(wstring(L"expr"), ESkoarNoad::expr, parent);;
    list<ESkoarToke::Kind>* desires = nullptr;

    if (++deep > 1000) {
        this->fail_too_deep();
    }

    // expr -> msgable expr_prime
    desires = &desirables[16];
    if (toker->sees(desires) != nullptr) {
        noad->add_noad(this->msgable(noad));
        noad->add_noad(this->expr_prime(noad));
        --deep;
        return noad;
    }

    // Error State
    this->fail();
    return nullptr;
}

SkoarNoad* SkoarParser::dal_goto(SkoarNoad* parent) {
    SkoarNoad* noad = new SkoarNoad(wstring(L"dal_goto"), ESkoarNoad::dal_goto, parent);;
    list<ESkoarToke::Kind>* desires = nullptr;

    if (++deep > 1000) {
        this->fail_too_deep();
    }

    // dal_goto -> DaCapo al_x
    desires = &desirables[17];
    if (toker->sees(desires) != nullptr) {
        noad->add_toke(L"Toke_DaCapo", toker->burn(ESkoarToke::DaCapo));
        noad->add_noad(this->al_x(noad));
        --deep;
        return noad;
    }

    // dal_goto -> DalSegno al_x
    desires = &desirables[18];
    if (toker->sees(desires) != nullptr) {
        noad->add_toke(L"Toke_DalSegno", toker->burn(ESkoarToke::DalSegno));
        noad->add_noad(this->al_x(noad));
        --deep;
        return noad;
    }

    // Error State
    this->fail();
    return nullptr;
}

SkoarNoad* SkoarParser::beat(SkoarNoad* parent) {
    SkoarNoad* noad = new SkoarNoad(wstring(L"beat"), ESkoarNoad::beat, parent);;
    list<ESkoarToke::Kind>* desires = nullptr;

    if (++deep > 1000) {
        this->fail_too_deep();
    }

    // beat -> Crotchets
    desires = &desirables[19];
    if (toker->sees(desires) != nullptr) {
        noad->add_toke(L"Toke_Crotchets", toker->burn(ESkoarToke::Crotchets));
        --deep;
        return noad;
    }

    // beat -> Quavers
    desires = &desirables[20];
    if (toker->sees(desires) != nullptr) {
        noad->add_toke(L"Toke_Quavers", toker->burn(ESkoarToke::Quavers));
        --deep;
        return noad;
    }

    // beat -> Quarters
    desires = &desirables[21];
    if (toker->sees(desires) != nullptr) {
        noad->add_toke(L"Toke_Quarters", toker->burn(ESkoarToke::Quarters));
        --deep;
        return noad;
    }

    // beat -> Eighths
    desires = &desirables[22];
    if (toker->sees(desires) != nullptr) {
        noad->add_toke(L"Toke_Eighths", toker->burn(ESkoarToke::Eighths));
        --deep;
        return noad;
    }

    // beat -> Slash
    desires = &desirables[23];
    if (toker->sees(desires) != nullptr) {
        noad->add_toke(L"Toke_Slash", toker->burn(ESkoarToke::Slash));
        --deep;
        return noad;
    }

    // Error State
    this->fail();
    return nullptr;
}

SkoarNoad* SkoarParser::skrp_sig(SkoarNoad* parent) {
    SkoarNoad* noad = new SkoarNoad(wstring(L"skrp_sig"), ESkoarNoad::skrp_sig, parent);;
    list<ESkoarToke::Kind>* desires = nullptr;

    if (++deep > 1000) {
        this->fail_too_deep();
    }

    // skrp_sig -> ArgSpec SkoarpionSep
    desires = &desirables[24];
    if (toker->sees(desires) != nullptr) {
        noad->add_toke(L"Toke_ArgSpec", toker->burn(ESkoarToke::ArgSpec));
        noad->add_toke(L"Toke_SkoarpionSep", toker->burn(ESkoarToke::SkoarpionSep));
        --deep;
        return noad;
    }

    // skrp_sig -> SymbolName opt_arg_spec SkoarpionSep
    desires = &desirables[25];
    if (toker->sees(desires) != nullptr) {
        noad->add_toke(L"Toke_SymbolName", toker->burn(ESkoarToke::SymbolName));
        noad->add_noad(this->opt_arg_spec(noad));
        noad->add_toke(L"Toke_SkoarpionSep", toker->burn(ESkoarToke::SkoarpionSep));
        --deep;
        return noad;
    }

    // <e>
    --deep;
    return noad;
}

SkoarNoad* SkoarParser::skrp_suffix(SkoarNoad* parent) {
    SkoarNoad* noad = new SkoarNoad(wstring(L"skrp_suffix"), ESkoarNoad::skrp_suffix, parent);;
    list<ESkoarToke::Kind>* desires = nullptr;

    if (++deep > 1000) {
        this->fail_too_deep();
    }

    // skrp_suffix -> skrp_lines SkoarpionEnd
    desires = &desirables[26];
    if (toker->sees(desires) != nullptr) {
        this->skrp_lines(noad);
        noad->add_toke(L"Toke_SkoarpionEnd", toker->burn(ESkoarToke::SkoarpionEnd));
        --deep;
        return noad;
    }

    // Error State
    this->fail();
    return nullptr;
}

SkoarNoad* SkoarParser::skoarpion(SkoarNoad* parent) {
    SkoarNoad* noad = new SkoarNoad(wstring(L"skoarpion"), ESkoarNoad::skoarpion, parent);;
    list<ESkoarToke::Kind>* desires = nullptr;

    if (++deep > 1000) {
        this->fail_too_deep();
    }

    // skoarpion -> SkoarpionStart skrp_sig skrp_suffix
    desires = &desirables[27];
    if (toker->sees(desires) != nullptr) {
        noad->add_toke(L"Toke_SkoarpionStart", toker->burn(ESkoarToke::SkoarpionStart));
        noad->add_noad(this->skrp_sig(noad));
        noad->add_noad(this->skrp_suffix(noad));
        --deep;
        return noad;
    }

    // Error State
    this->fail();
    return nullptr;
}

SkoarNoad* SkoarParser::opt_arg_spec(SkoarNoad* parent) {
    SkoarNoad* noad = new SkoarNoad(wstring(L"opt_arg_spec"), ESkoarNoad::opt_arg_spec, parent);;
    list<ESkoarToke::Kind>* desires = nullptr;

    if (++deep > 1000) {
        this->fail_too_deep();
    }

    // opt_arg_spec -> ArgSpec
    desires = &desirables[28];
    if (toker->sees(desires) != nullptr) {
        noad->add_toke(L"Toke_ArgSpec", toker->burn(ESkoarToke::ArgSpec));
        --deep;
        return noad;
    }

    // <e>
    --deep;
    return noad;
}

SkoarNoad* SkoarParser::skrp_lines(SkoarNoad* parent) {
    SkoarNoad* noad = parent;
    list<ESkoarToke::Kind>* desires = nullptr;

    if (++deep > 1000) {
        this->fail_too_deep();
    }

    // skrp_lines -> optional_voice phrases skrp_moar_lines
    desires = &desirables[29];
    if (toker->sees(desires) != nullptr) {
        this->optional_voice(noad);
        this->phrases(noad);
        this->skrp_moar_lines(noad);
        --deep;
        return noad;
    }

    // Error State
    this->fail();
    return nullptr;
}

SkoarNoad* SkoarParser::skrp_moar_lines(SkoarNoad* parent) {
    SkoarNoad* noad = parent;
    list<ESkoarToke::Kind>* desires = nullptr;

    if (++deep > 1000) {
        this->fail_too_deep();
    }

    // skrp_moar_lines -> Newline skrp_lines
    desires = &desirables[30];
    if (toker->sees(desires) != nullptr) {
        noad->add_toke(L"Toke_Newline", toker->burn(ESkoarToke::Newline));
        this->skrp_lines(noad);
        --deep;
        return noad;
    }

    // <e>
    --deep;
    return noad;
}

SkoarNoad* SkoarParser::listy_suffix(SkoarNoad* parent) {
    SkoarNoad* noad = parent;
    list<ESkoarToke::Kind>* desires = nullptr;

    if (++deep > 1000) {
        this->fail_too_deep();
    }

    // listy_suffix -> listy_entries ListE
    desires = &desirables[31];
    if (toker->sees(desires) != nullptr) {
        this->listy_entries(noad);
        noad->add_toke(L"Toke_ListE", toker->burn(ESkoarToke::ListE));
        --deep;
        return noad;
    }

    // listy_suffix -> ListE
    desires = &desirables[32];
    if (toker->sees(desires) != nullptr) {
        noad->add_toke(L"Toke_ListE", toker->burn(ESkoarToke::ListE));
        --deep;
        return noad;
    }

    // Error State
    this->fail();
    return nullptr;
}

SkoarNoad* SkoarParser::listy(SkoarNoad* parent) {
    SkoarNoad* noad = new SkoarNoad(wstring(L"listy"), ESkoarNoad::listy, parent);;
    list<ESkoarToke::Kind>* desires = nullptr;

    if (++deep > 1000) {
        this->fail_too_deep();
    }

    // listy -> ListS listy_suffix
    desires = &desirables[33];
    if (toker->sees(desires) != nullptr) {
        noad->add_toke(L"Toke_ListS", toker->burn(ESkoarToke::ListS));
        this->listy_suffix(noad);
        --deep;
        return noad;
    }

    // Error State
    this->fail();
    return nullptr;
}

SkoarNoad* SkoarParser::listy_entries(SkoarNoad* parent) {
    SkoarNoad* noad = parent;
    list<ESkoarToke::Kind>* desires = nullptr;

    if (++deep > 1000) {
        this->fail_too_deep();
    }

    // listy_entries -> expr moar_listy_entries
    desires = &desirables[34];
    if (toker->sees(desires) != nullptr) {
        noad->add_noad(this->expr(noad));
        this->moar_listy_entries(noad);
        --deep;
        return noad;
    }

    // Error State
    this->fail();
    return nullptr;
}

SkoarNoad* SkoarParser::moar_listy_entries(SkoarNoad* parent) {
    SkoarNoad* noad = parent;
    list<ESkoarToke::Kind>* desires = nullptr;

    if (++deep > 1000) {
        this->fail_too_deep();
    }

    // moar_listy_entries -> ListSep listy_entries
    desires = &desirables[35];
    if (toker->sees(desires) != nullptr) {
        noad->add_toke(L"Toke_ListSep", toker->burn(ESkoarToke::ListSep));
        this->listy_entries(noad);
        --deep;
        return noad;
    }

    // moar_listy_entries -> Newline
    desires = &desirables[36];
    if (toker->sees(desires) != nullptr) {
        noad->add_toke(L"Toke_Newline", toker->burn(ESkoarToke::Newline));
        --deep;
        return noad;
    }

    // <e>
    --deep;
    return noad;
}

SkoarNoad* SkoarParser::coda(SkoarNoad* parent) {
    SkoarNoad* noad = new SkoarNoad(wstring(L"coda"), ESkoarNoad::coda, parent);;
    list<ESkoarToke::Kind>* desires = nullptr;

    if (++deep > 1000) {
        this->fail_too_deep();
    }

    // coda -> Coda optional_al_coda
    desires = &desirables[37];
    if (toker->sees(desires) != nullptr) {
        noad->add_toke(L"Toke_Coda", toker->burn(ESkoarToke::Coda));
        noad->add_noad(this->optional_al_coda(noad));
        --deep;
        return noad;
    }

    // Error State
    this->fail();
    return nullptr;
}

SkoarNoad* SkoarParser::optional_al_coda(SkoarNoad* parent) {
    SkoarNoad* noad = new SkoarNoad(wstring(L"optional_al_coda"), ESkoarNoad::optional_al_coda, parent);;
    list<ESkoarToke::Kind>* desires = nullptr;

    if (++deep > 1000) {
        this->fail_too_deep();
    }

    // optional_al_coda -> AlCoda
    desires = &desirables[38];
    if (toker->sees(desires) != nullptr) {
        noad->add_toke(L"Toke_AlCoda", toker->burn(ESkoarToke::AlCoda));
        --deep;
        return noad;
    }

    // <e>
    --deep;
    return noad;
}

SkoarNoad* SkoarParser::al_x(SkoarNoad* parent) {
    SkoarNoad* noad = new SkoarNoad(wstring(L"al_x"), ESkoarNoad::al_x, parent);;
    list<ESkoarToke::Kind>* desires = nullptr;

    if (++deep > 1000) {
        this->fail_too_deep();
    }

    // al_x -> AlCoda
    desires = &desirables[39];
    if (toker->sees(desires) != nullptr) {
        noad->add_toke(L"Toke_AlCoda", toker->burn(ESkoarToke::AlCoda));
        --deep;
        return noad;
    }

    // al_x -> AlSegno
    desires = &desirables[40];
    if (toker->sees(desires) != nullptr) {
        noad->add_toke(L"Toke_AlSegno", toker->burn(ESkoarToke::AlSegno));
        --deep;
        return noad;
    }

    // al_x -> AlFine
    desires = &desirables[41];
    if (toker->sees(desires) != nullptr) {
        noad->add_toke(L"Toke_AlFine", toker->burn(ESkoarToke::AlFine));
        --deep;
        return noad;
    }

    // <e>
    --deep;
    return noad;
}

SkoarNoad* SkoarParser::dynamic(SkoarNoad* parent) {
    SkoarNoad* noad = new SkoarNoad(wstring(L"dynamic"), ESkoarNoad::dynamic, parent);;
    list<ESkoarToke::Kind>* desires = nullptr;

    if (++deep > 1000) {
        this->fail_too_deep();
    }

    // dynamic -> DynPiano
    desires = &desirables[42];
    if (toker->sees(desires) != nullptr) {
        noad->add_toke(L"Toke_DynPiano", toker->burn(ESkoarToke::DynPiano));
        --deep;
        return noad;
    }

    // dynamic -> DynForte
    desires = &desirables[43];
    if (toker->sees(desires) != nullptr) {
        noad->add_toke(L"Toke_DynForte", toker->burn(ESkoarToke::DynForte));
        --deep;
        return noad;
    }

    // dynamic -> DynSFZ
    desires = &desirables[44];
    if (toker->sees(desires) != nullptr) {
        noad->add_toke(L"Toke_DynSFZ", toker->burn(ESkoarToke::DynSFZ));
        --deep;
        return noad;
    }

    // dynamic -> DynFP
    desires = &desirables[45];
    if (toker->sees(desires) != nullptr) {
        noad->add_toke(L"Toke_DynFP", toker->burn(ESkoarToke::DynFP));
        --deep;
        return noad;
    }

    // Error State
    this->fail();
    return nullptr;
}

SkoarNoad* SkoarParser::musical_keyword(SkoarNoad* parent) {
    SkoarNoad* noad = new SkoarNoad(wstring(L"musical_keyword"), ESkoarNoad::musical_keyword, parent);;
    list<ESkoarToke::Kind>* desires = nullptr;

    if (++deep > 1000) {
        this->fail_too_deep();
    }

    // musical_keyword -> dynamic
    desires = &desirables[46];
    if (toker->sees(desires) != nullptr) {
        noad->add_noad(this->dynamic(noad));
        --deep;
        return noad;
    }

    // musical_keyword -> ottavas
    desires = &desirables[47];
    if (toker->sees(desires) != nullptr) {
        noad->add_noad(this->ottavas(noad));
        --deep;
        return noad;
    }

    // musical_keyword -> pedally
    desires = &desirables[48];
    if (toker->sees(desires) != nullptr) {
        noad->add_noad(this->pedally(noad));
        --deep;
        return noad;
    }

    // musical_keyword -> musical_keyword_misc
    desires = &desirables[49];
    if (toker->sees(desires) != nullptr) {
        noad->add_noad(this->musical_keyword_misc(noad));
        --deep;
        return noad;
    }

    // Error State
    this->fail();
    return nullptr;
}

SkoarNoad* SkoarParser::ottavas(SkoarNoad* parent) {
    SkoarNoad* noad = new SkoarNoad(wstring(L"ottavas"), ESkoarNoad::ottavas, parent);;
    list<ESkoarToke::Kind>* desires = nullptr;

    if (++deep > 1000) {
        this->fail_too_deep();
    }

    // ottavas -> OctaveShift
    desires = &desirables[50];
    if (toker->sees(desires) != nullptr) {
        noad->add_toke(L"Toke_OctaveShift", toker->burn(ESkoarToke::OctaveShift));
        --deep;
        return noad;
    }

    // ottavas -> OttavaA
    desires = &desirables[51];
    if (toker->sees(desires) != nullptr) {
        noad->add_toke(L"Toke_OttavaA", toker->burn(ESkoarToke::OttavaA));
        --deep;
        return noad;
    }

    // ottavas -> OttavaB
    desires = &desirables[52];
    if (toker->sees(desires) != nullptr) {
        noad->add_toke(L"Toke_OttavaB", toker->burn(ESkoarToke::OttavaB));
        --deep;
        return noad;
    }

    // ottavas -> QuindicesimaA
    desires = &desirables[53];
    if (toker->sees(desires) != nullptr) {
        noad->add_toke(L"Toke_QuindicesimaA", toker->burn(ESkoarToke::QuindicesimaA));
        --deep;
        return noad;
    }

    // ottavas -> QuindicesimaB
    desires = &desirables[54];
    if (toker->sees(desires) != nullptr) {
        noad->add_toke(L"Toke_QuindicesimaB", toker->burn(ESkoarToke::QuindicesimaB));
        --deep;
        return noad;
    }

    // ottavas -> Loco
    desires = &desirables[55];
    if (toker->sees(desires) != nullptr) {
        noad->add_toke(L"Toke_Loco", toker->burn(ESkoarToke::Loco));
        --deep;
        return noad;
    }

    // Error State
    this->fail();
    return nullptr;
}

SkoarNoad* SkoarParser::pedally(SkoarNoad* parent) {
    SkoarNoad* noad = new SkoarNoad(wstring(L"pedally"), ESkoarNoad::pedally, parent);;
    list<ESkoarToke::Kind>* desires = nullptr;

    if (++deep > 1000) {
        this->fail_too_deep();
    }

    // pedally -> PedalDown
    desires = &desirables[56];
    if (toker->sees(desires) != nullptr) {
        noad->add_toke(L"Toke_PedalDown", toker->burn(ESkoarToke::PedalDown));
        --deep;
        return noad;
    }

    // pedally -> PedalUp
    desires = &desirables[57];
    if (toker->sees(desires) != nullptr) {
        noad->add_toke(L"Toke_PedalUp", toker->burn(ESkoarToke::PedalUp));
        --deep;
        return noad;
    }

    // Error State
    this->fail();
    return nullptr;
}

SkoarNoad* SkoarParser::musical_keyword_misc(SkoarNoad* parent) {
    SkoarNoad* noad = new SkoarNoad(wstring(L"musical_keyword_misc"), ESkoarNoad::musical_keyword_misc, parent);;
    list<ESkoarToke::Kind>* desires = nullptr;

    if (++deep > 1000) {
        this->fail_too_deep();
    }

    // musical_keyword_misc -> Rep
    desires = &desirables[58];
    if (toker->sees(desires) != nullptr) {
        noad->add_toke(L"Toke_Rep", toker->burn(ESkoarToke::Rep));
        --deep;
        return noad;
    }

    // musical_keyword_misc -> Portamento
    desires = &desirables[59];
    if (toker->sees(desires) != nullptr) {
        noad->add_toke(L"Toke_Portamento", toker->burn(ESkoarToke::Portamento));
        --deep;
        return noad;
    }

    // musical_keyword_misc -> Carrot
    desires = &desirables[60];
    if (toker->sees(desires) != nullptr) {
        noad->add_toke(L"Toke_Carrot", toker->burn(ESkoarToke::Carrot));
        --deep;
        return noad;
    }

    // Error State
    this->fail();
    return nullptr;
}

SkoarNoad* SkoarParser::cthulhu(SkoarNoad* parent) {
    SkoarNoad* noad = new SkoarNoad(wstring(L"cthulhu"), ESkoarNoad::cthulhu, parent);;
    list<ESkoarToke::Kind>* desires = nullptr;

    if (++deep > 1000) {
        this->fail_too_deep();
    }

    // cthulhu -> LWing Semicolon cthulhu_prime
    desires = &desirables[61];
    if (toker->sees(desires) != nullptr) {
        noad->add_toke(L"Toke_LWing", toker->burn(ESkoarToke::LWing));
        noad->add_toke(L"Toke_Semicolon", toker->burn(ESkoarToke::Semicolon));
        this->cthulhu_prime(noad);
        --deep;
        return noad;
    }

    // Error State
    this->fail();
    return nullptr;
}

SkoarNoad* SkoarParser::nouny(SkoarNoad* parent) {
    SkoarNoad* noad = new SkoarNoad(wstring(L"nouny"), ESkoarNoad::nouny, parent);;
    list<ESkoarToke::Kind>* desires = nullptr;

    if (++deep > 1000) {
        this->fail_too_deep();
    }

    // nouny -> cthulhu
    desires = &desirables[62];
    if (toker->sees(desires) != nullptr) {
        noad->add_noad(this->cthulhu(noad));
        --deep;
        return noad;
    }

    // nouny -> conditional
    desires = &desirables[63];
    if (toker->sees(desires) != nullptr) {
        noad->add_noad(this->conditional(noad));
        --deep;
        return noad;
    }

    // nouny -> loop
    desires = &desirables[64];
    if (toker->sees(desires) != nullptr) {
        noad->add_noad(this->loop(noad));
        --deep;
        return noad;
    }

    // nouny -> nouny_literal
    desires = &desirables[65];
    if (toker->sees(desires) != nullptr) {
        this->nouny_literal(noad);
        --deep;
        return noad;
    }

    // nouny -> musical_keyword
    desires = &desirables[66];
    if (toker->sees(desires) != nullptr) {
        noad->add_noad(this->musical_keyword(noad));
        --deep;
        return noad;
    }

    // nouny -> listy
    desires = &desirables[67];
    if (toker->sees(desires) != nullptr) {
        noad->add_noad(this->listy(noad));
        --deep;
        return noad;
    }

    // nouny -> deref
    desires = &desirables[68];
    if (toker->sees(desires) != nullptr) {
        noad->add_noad(this->deref(noad));
        --deep;
        return noad;
    }

    // nouny -> skoarpion
    desires = &desirables[69];
    if (toker->sees(desires) != nullptr) {
        noad->add_noad(this->skoarpion(noad));
        --deep;
        return noad;
    }

    // Error State
    this->fail();
    return nullptr;
}

SkoarNoad* SkoarParser::conditional(SkoarNoad* parent) {
    SkoarNoad* noad = new SkoarNoad(wstring(L"conditional"), ESkoarNoad::conditional, parent);;
    list<ESkoarToke::Kind>* desires = nullptr;

    if (++deep > 1000) {
        this->fail_too_deep();
    }

    // conditional -> CondS cond_ifs CondE
    desires = &desirables[70];
    if (toker->sees(desires) != nullptr) {
        noad->add_toke(L"Toke_CondS", toker->burn(ESkoarToke::CondS));
        this->cond_ifs(noad);
        noad->add_toke(L"Toke_CondE", toker->burn(ESkoarToke::CondE));
        --deep;
        return noad;
    }

    // Error State
    this->fail();
    return nullptr;
}

SkoarNoad* SkoarParser::loop(SkoarNoad* parent) {
    SkoarNoad* noad = new SkoarNoad(wstring(L"loop"), ESkoarNoad::loop, parent);;
    list<ESkoarToke::Kind>* desires = nullptr;

    if (++deep > 1000) {
        this->fail_too_deep();
    }

    // loop -> LoopS loop_body loop_condition LoopE
    desires = &desirables[71];
    if (toker->sees(desires) != nullptr) {
        noad->add_toke(L"Toke_LoopS", toker->burn(ESkoarToke::LoopS));
        noad->add_noad(this->loop_body(noad));
        noad->add_noad(this->loop_condition(noad));
        noad->add_toke(L"Toke_LoopE", toker->burn(ESkoarToke::LoopE));
        --deep;
        return noad;
    }

    // Error State
    this->fail();
    return nullptr;
}

SkoarNoad* SkoarParser::nouny_literal(SkoarNoad* parent) {
    SkoarNoad* noad = parent;
    list<ESkoarToke::Kind>* desires = nullptr;

    if (++deep > 1000) {
        this->fail_too_deep();
    }

    // nouny_literal -> Tuplet
    desires = &desirables[72];
    if (toker->sees(desires) != nullptr) {
        noad->add_toke(L"Toke_Tuplet", toker->burn(ESkoarToke::Tuplet));
        --deep;
        return noad;
    }

    // nouny_literal -> Caesura
    desires = &desirables[73];
    if (toker->sees(desires) != nullptr) {
        noad->add_toke(L"Toke_Caesura", toker->burn(ESkoarToke::Caesura));
        --deep;
        return noad;
    }

    // nouny_literal -> Freq
    desires = &desirables[74];
    if (toker->sees(desires) != nullptr) {
        noad->add_toke(L"Toke_Freq", toker->burn(ESkoarToke::Freq));
        --deep;
        return noad;
    }

    // nouny_literal -> Int
    desires = &desirables[75];
    if (toker->sees(desires) != nullptr) {
        noad->add_toke(L"Toke_Int", toker->burn(ESkoarToke::Int));
        --deep;
        return noad;
    }

    // nouny_literal -> Float
    desires = &desirables[76];
    if (toker->sees(desires) != nullptr) {
        noad->add_toke(L"Toke_Float", toker->burn(ESkoarToke::Float));
        --deep;
        return noad;
    }

    // nouny_literal -> String
    desires = &desirables[77];
    if (toker->sees(desires) != nullptr) {
        noad->add_toke(L"Toke_String", toker->burn(ESkoarToke::String));
        --deep;
        return noad;
    }

    // nouny_literal -> Choard
    desires = &desirables[78];
    if (toker->sees(desires) != nullptr) {
        noad->add_toke(L"Toke_Choard", toker->burn(ESkoarToke::Choard));
        --deep;
        return noad;
    }

    // nouny_literal -> NamedNoat
    desires = &desirables[79];
    if (toker->sees(desires) != nullptr) {
        noad->add_toke(L"Toke_NamedNoat", toker->burn(ESkoarToke::NamedNoat));
        --deep;
        return noad;
    }

    // nouny_literal -> Symbol
    desires = &desirables[80];
    if (toker->sees(desires) != nullptr) {
        noad->add_toke(L"Toke_Symbol", toker->burn(ESkoarToke::Symbol));
        --deep;
        return noad;
    }

    // nouny_literal -> Fairy
    desires = &desirables[81];
    if (toker->sees(desires) != nullptr) {
        noad->add_toke(L"Toke_Fairy", toker->burn(ESkoarToke::Fairy));
        --deep;
        return noad;
    }

    // nouny_literal -> HashLevel
    desires = &desirables[82];
    if (toker->sees(desires) != nullptr) {
        noad->add_toke(L"Toke_HashLevel", toker->burn(ESkoarToke::HashLevel));
        --deep;
        return noad;
    }

    // nouny_literal -> False
    desires = &desirables[83];
    if (toker->sees(desires) != nullptr) {
        noad->add_toke(L"Toke_False", toker->burn(ESkoarToke::False));
        --deep;
        return noad;
    }

    // nouny_literal -> True
    desires = &desirables[84];
    if (toker->sees(desires) != nullptr) {
        noad->add_toke(L"Toke_True", toker->burn(ESkoarToke::True));
        --deep;
        return noad;
    }

    // nouny_literal -> Crap
    desires = &desirables[85];
    if (toker->sees(desires) != nullptr) {
        noad->add_toke(L"Toke_Crap", toker->burn(ESkoarToke::Crap));
        --deep;
        return noad;
    }

    // Error State
    this->fail();
    return nullptr;
}

SkoarNoad* SkoarParser::deref(SkoarNoad* parent) {
    SkoarNoad* noad = new SkoarNoad(wstring(L"deref"), ESkoarNoad::deref, parent);;
    list<ESkoarToke::Kind>* desires = nullptr;

    if (++deep > 1000) {
        this->fail_too_deep();
    }

    // deref -> Deref deref_prime
    desires = &desirables[86];
    if (toker->sees(desires) != nullptr) {
        noad->add_toke(L"Toke_Deref", toker->burn(ESkoarToke::Deref));
        this->deref_prime(noad);
        --deep;
        return noad;
    }

    // Error State
    this->fail();
    return nullptr;
}

SkoarNoad* SkoarParser::deref_prime(SkoarNoad* parent) {
    SkoarNoad* noad = parent;
    list<ESkoarToke::Kind>* desires = nullptr;

    if (++deep > 1000) {
        this->fail_too_deep();
    }

    // deref_prime -> MsgNameWithArgs listy_suffix
    desires = &desirables[87];
    if (toker->sees(desires) != nullptr) {
        noad->add_toke(L"Toke_MsgNameWithArgs", toker->burn(ESkoarToke::MsgNameWithArgs));
        this->listy_suffix(noad);
        --deep;
        return noad;
    }

    // deref_prime -> MsgName
    desires = &desirables[88];
    if (toker->sees(desires) != nullptr) {
        noad->add_toke(L"Toke_MsgName", toker->burn(ESkoarToke::MsgName));
        --deep;
        return noad;
    }

    // Error State
    this->fail();
    return nullptr;
}

SkoarNoad* SkoarParser::msgable(SkoarNoad* parent) {
    SkoarNoad* noad = new SkoarNoad(wstring(L"msgable"), ESkoarNoad::msgable, parent);;
    list<ESkoarToke::Kind>* desires = nullptr;

    if (++deep > 1000) {
        this->fail_too_deep();
    }

    // msgable -> nouny msg_chain_node
    desires = &desirables[89];
    if (toker->sees(desires) != nullptr) {
        noad->add_noad(this->nouny(noad));
        this->msg_chain_node(noad);
        --deep;
        return noad;
    }

    // Error State
    this->fail();
    return nullptr;
}

SkoarNoad* SkoarParser::expr_prime(SkoarNoad* parent) {
    SkoarNoad* noad = new SkoarNoad(wstring(L"expr_prime"), ESkoarNoad::expr_prime, parent);;
    list<ESkoarToke::Kind>* desires = nullptr;

    if (++deep > 1000) {
        this->fail_too_deep();
    }

    // expr_prime -> assignment expr_prime
    desires = &desirables[90];
    if (toker->sees(desires) != nullptr) {
        noad->add_noad(this->assignment(noad));
        noad->add_noad(this->expr_prime(noad));
        --deep;
        return noad;
    }

    // expr_prime -> math expr_prime
    desires = &desirables[91];
    if (toker->sees(desires) != nullptr) {
        noad->add_noad(this->math(noad));
        noad->add_noad(this->expr_prime(noad));
        --deep;
        return noad;
    }

    // expr_prime -> boolean
    desires = &desirables[92];
    if (toker->sees(desires) != nullptr) {
        noad->add_noad(this->boolean(noad));
        --deep;
        return noad;
    }

    // expr_prime -> times
    desires = &desirables[93];
    if (toker->sees(desires) != nullptr) {
        noad->add_noad(this->times(noad));
        --deep;
        return noad;
    }

    // <e>
    --deep;
    return noad;
}

SkoarNoad* SkoarParser::assignment(SkoarNoad* parent) {
    SkoarNoad* noad = new SkoarNoad(wstring(L"assignment"), ESkoarNoad::assignment, parent);;
    list<ESkoarToke::Kind>* desires = nullptr;

    if (++deep > 1000) {
        this->fail_too_deep();
    }

    // assignment -> AssOp settable
    desires = &desirables[94];
    if (toker->sees(desires) != nullptr) {
        noad->add_toke(L"Toke_AssOp", toker->burn(ESkoarToke::AssOp));
        this->settable(noad);
        --deep;
        return noad;
    }

    // Error State
    this->fail();
    return nullptr;
}

SkoarNoad* SkoarParser::math(SkoarNoad* parent) {
    SkoarNoad* noad = new SkoarNoad(wstring(L"math"), ESkoarNoad::math, parent);;
    list<ESkoarToke::Kind>* desires = nullptr;

    if (++deep > 1000) {
        this->fail_too_deep();
    }

    // math -> MathOp msgable
    desires = &desirables[95];
    if (toker->sees(desires) != nullptr) {
        noad->add_toke(L"Toke_MathOp", toker->burn(ESkoarToke::MathOp));
        noad->add_noad(this->msgable(noad));
        --deep;
        return noad;
    }

    // Error State
    this->fail();
    return nullptr;
}

SkoarNoad* SkoarParser::boolean(SkoarNoad* parent) {
    SkoarNoad* noad = new SkoarNoad(wstring(L"boolean"), ESkoarNoad::boolean, parent);;
    list<ESkoarToke::Kind>* desires = nullptr;

    if (++deep > 1000) {
        this->fail_too_deep();
    }

    // boolean -> BooleanOp expr
    desires = &desirables[96];
    if (toker->sees(desires) != nullptr) {
        noad->add_toke(L"Toke_BooleanOp", toker->burn(ESkoarToke::BooleanOp));
        noad->add_noad(this->expr(noad));
        --deep;
        return noad;
    }

    // Error State
    this->fail();
    return nullptr;
}

SkoarNoad* SkoarParser::times(SkoarNoad* parent) {
    SkoarNoad* noad = new SkoarNoad(wstring(L"times"), ESkoarNoad::times, parent);;
    list<ESkoarToke::Kind>* desires = nullptr;

    if (++deep > 1000) {
        this->fail_too_deep();
    }

    // times -> Times
    desires = &desirables[97];
    if (toker->sees(desires) != nullptr) {
        noad->add_toke(L"Toke_Times", toker->burn(ESkoarToke::Times));
        --deep;
        return noad;
    }

    // Error State
    this->fail();
    return nullptr;
}

SkoarNoad* SkoarParser::settable(SkoarNoad* parent) {
    SkoarNoad* noad = parent;
    list<ESkoarToke::Kind>* desires = nullptr;

    if (++deep > 1000) {
        this->fail_too_deep();
    }

    // settable -> Caesura
    desires = &desirables[98];
    if (toker->sees(desires) != nullptr) {
        noad->add_toke(L"Toke_Caesura", toker->burn(ESkoarToke::Caesura));
        --deep;
        return noad;
    }

    // settable -> Symbol
    desires = &desirables[99];
    if (toker->sees(desires) != nullptr) {
        noad->add_toke(L"Toke_Symbol", toker->burn(ESkoarToke::Symbol));
        --deep;
        return noad;
    }

    // settable -> listy
    desires = &desirables[100];
    if (toker->sees(desires) != nullptr) {
        noad->add_noad(this->listy(noad));
        --deep;
        return noad;
    }

    // settable -> Quarters
    desires = &desirables[101];
    if (toker->sees(desires) != nullptr) {
        noad->add_toke(L"Toke_Quarters", toker->burn(ESkoarToke::Quarters));
        --deep;
        return noad;
    }

    // settable -> Eighths
    desires = &desirables[102];
    if (toker->sees(desires) != nullptr) {
        noad->add_toke(L"Toke_Eighths", toker->burn(ESkoarToke::Eighths));
        --deep;
        return noad;
    }

    // settable -> Fairy
    desires = &desirables[103];
    if (toker->sees(desires) != nullptr) {
        noad->add_toke(L"Toke_Fairy", toker->burn(ESkoarToke::Fairy));
        --deep;
        return noad;
    }

    // Error State
    this->fail();
    return nullptr;
}

SkoarNoad* SkoarParser::msg_chain_node(SkoarNoad* parent) {
    SkoarNoad* noad = parent;
    list<ESkoarToke::Kind>* desires = nullptr;

    if (++deep > 1000) {
        this->fail_too_deep();
    }

    // msg_chain_node -> MsgOp msg msg_chain_node
    desires = &desirables[104];
    if (toker->sees(desires) != nullptr) {
        noad->add_toke(L"Toke_MsgOp", toker->burn(ESkoarToke::MsgOp));
        noad->add_noad(this->msg(noad));
        this->msg_chain_node(noad);
        --deep;
        return noad;
    }

    // <e>
    --deep;
    return noad;
}

SkoarNoad* SkoarParser::msg(SkoarNoad* parent) {
    SkoarNoad* noad = new SkoarNoad(wstring(L"msg"), ESkoarNoad::msg, parent);;
    list<ESkoarToke::Kind>* desires = nullptr;

    if (++deep > 1000) {
        this->fail_too_deep();
    }

    // msg -> MsgNameWithArgs listy_suffix
    desires = &desirables[105];
    if (toker->sees(desires) != nullptr) {
        noad->add_toke(L"Toke_MsgNameWithArgs", toker->burn(ESkoarToke::MsgNameWithArgs));
        this->listy_suffix(noad);
        --deep;
        return noad;
    }

    // msg -> MsgName
    desires = &desirables[106];
    if (toker->sees(desires) != nullptr) {
        noad->add_toke(L"Toke_MsgName", toker->burn(ESkoarToke::MsgName));
        --deep;
        return noad;
    }

    // msg -> listy
    desires = &desirables[107];
    if (toker->sees(desires) != nullptr) {
        noad->add_noad(this->listy(noad));
        --deep;
        return noad;
    }

    // msg -> loop
    desires = &desirables[108];
    if (toker->sees(desires) != nullptr) {
        noad->add_noad(this->loop(noad));
        --deep;
        return noad;
    }

    // Error State
    this->fail();
    return nullptr;
}

SkoarNoad* SkoarParser::cthulhu_prime(SkoarNoad* parent) {
    SkoarNoad* noad = parent;
    list<ESkoarToke::Kind>* desires = nullptr;

    if (++deep > 1000) {
        this->fail_too_deep();
    }

    // cthulhu_prime -> expr Semicolon RWing
    desires = &desirables[109];
    if (toker->sees(desires) != nullptr) {
        noad->add_noad(this->expr(noad));
        noad->add_toke(L"Toke_Semicolon", toker->burn(ESkoarToke::Semicolon));
        noad->add_toke(L"Toke_RWing", toker->burn(ESkoarToke::RWing));
        --deep;
        return noad;
    }

    // cthulhu_prime -> Nosey Semicolon RWing
    desires = &desirables[110];
    if (toker->sees(desires) != nullptr) {
        noad->add_toke(L"Toke_Nosey", toker->burn(ESkoarToke::Nosey));
        noad->add_toke(L"Toke_Semicolon", toker->burn(ESkoarToke::Semicolon));
        noad->add_toke(L"Toke_RWing", toker->burn(ESkoarToke::RWing));
        --deep;
        return noad;
    }

    // Error State
    this->fail();
    return nullptr;
}

SkoarNoad* SkoarParser::cond_ifs(SkoarNoad* parent) {
    SkoarNoad* noad = parent;
    list<ESkoarToke::Kind>* desires = nullptr;

    if (++deep > 1000) {
        this->fail_too_deep();
    }

    // cond_ifs -> cond_if cond_ifs_suffix
    desires = &desirables[111];
    if (toker->sees(desires) != nullptr) {
        noad->add_noad(this->cond_if(noad));
        this->cond_ifs_suffix(noad);
        --deep;
        return noad;
    }

    // Error State
    this->fail();
    return nullptr;
}

SkoarNoad* SkoarParser::cond_if(SkoarNoad* parent) {
    SkoarNoad* noad = new SkoarNoad(wstring(L"cond_if"), ESkoarNoad::cond_if, parent);;
    list<ESkoarToke::Kind>* desires = nullptr;

    if (++deep > 1000) {
        this->fail_too_deep();
    }

    // cond_if -> optional_voice expr CondIf if_body cond_else
    desires = &desirables[112];
    if (toker->sees(desires) != nullptr) {
        this->optional_voice(noad);
        noad->add_noad(this->expr(noad));
        noad->add_toke(L"Toke_CondIf", toker->burn(ESkoarToke::CondIf));
        noad->add_noad(this->if_body(noad));
        this->cond_else(noad);
        --deep;
        return noad;
    }

    // Error State
    this->fail();
    return nullptr;
}

SkoarNoad* SkoarParser::cond_ifs_suffix(SkoarNoad* parent) {
    SkoarNoad* noad = parent;
    list<ESkoarToke::Kind>* desires = nullptr;

    if (++deep > 1000) {
        this->fail_too_deep();
    }

    // cond_ifs_suffix -> Newline cond_ifs
    desires = &desirables[113];
    if (toker->sees(desires) != nullptr) {
        noad->add_toke(L"Toke_Newline", toker->burn(ESkoarToke::Newline));
        this->cond_ifs(noad);
        --deep;
        return noad;
    }

    // <e>
    --deep;
    return noad;
}

SkoarNoad* SkoarParser::if_body(SkoarNoad* parent) {
    SkoarNoad* noad = new SkoarNoad(wstring(L"if_body"), ESkoarNoad::if_body, parent);;
    list<ESkoarToke::Kind>* desires = nullptr;

    if (++deep > 1000) {
        this->fail_too_deep();
    }

    // if_body -> phrases
    desires = &desirables[114];
    if (toker->sees(desires) != nullptr) {
        this->phrases(noad);
        --deep;
        return noad;
    }

    // Error State
    this->fail();
    return nullptr;
}

SkoarNoad* SkoarParser::cond_else(SkoarNoad* parent) {
    SkoarNoad* noad = parent;
    list<ESkoarToke::Kind>* desires = nullptr;

    if (++deep > 1000) {
        this->fail_too_deep();
    }

    // cond_else -> CondIf if_body
    desires = &desirables[115];
    if (toker->sees(desires) != nullptr) {
        noad->add_toke(L"Toke_CondIf", toker->burn(ESkoarToke::CondIf));
        noad->add_noad(this->if_body(noad));
        --deep;
        return noad;
    }

    // <e>
    --deep;
    return noad;
}

SkoarNoad* SkoarParser::loop_body(SkoarNoad* parent) {
    SkoarNoad* noad = new SkoarNoad(wstring(L"loop_body"), ESkoarNoad::loop_body, parent);;
    list<ESkoarToke::Kind>* desires = nullptr;

    if (++deep > 1000) {
        this->fail_too_deep();
    }

    // loop_body -> phrases
    desires = &desirables[116];
    if (toker->sees(desires) != nullptr) {
        this->phrases(noad);
        --deep;
        return noad;
    }

    // Error State
    this->fail();
    return nullptr;
}

SkoarNoad* SkoarParser::loop_condition(SkoarNoad* parent) {
    SkoarNoad* noad = new SkoarNoad(wstring(L"loop_condition"), ESkoarNoad::loop_condition, parent);;
    list<ESkoarToke::Kind>* desires = nullptr;

    if (++deep > 1000) {
        this->fail_too_deep();
    }

    // loop_condition -> LoopSep expr
    desires = &desirables[117];
    if (toker->sees(desires) != nullptr) {
        noad->add_toke(L"Toke_LoopSep", toker->burn(ESkoarToke::LoopSep));
        noad->add_noad(this->expr(noad));
        --deep;
        return noad;
    }

    // <e>
    --deep;
    return noad;
}

