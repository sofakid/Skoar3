// ======================================================================
// lex.cpp - Generated by Code_Cpp_Lexer on 2018-12-13 00:16:17 for C++14
// ======================================================================
#include "lex.hpp"
#include "exception.hpp"
#include "memories.hpp"

static std::wsmatch matches;
// ------------------
// Abstract SkoarToke
// ------------------
 SkoarToke::SkoarToke() {
    kind = ESkoarToke::Unknown;
    style = SkoarStyles::EStyle::nostyle;
}

 SkoarToke::SkoarToke(std::wstring s, size_t offs, size_t n) {
    this->lexeme = s;
    this->offs = offs;
    this->size = n;
    kind = ESkoarToke::Unknown;
    style = SkoarStyles::EStyle::nostyle;
}

 SkoarToke::~SkoarToke() {
}

// how many characters to burn from the buffer
size_t SkoarToke::burn() {
    return size;
}

// --------------
// Eof is special
// --------------
 Toke_Eof::Toke_Eof() {
    kind = ESkoarToke::Eof;

#if SKOAR_DEBUG_MEMORY
    SkoarMemories::o().allocToke(L"Eof");
#endif
}

 Toke_Eof::~Toke_Eof() {

#if SKOAR_DEBUG_MEMORY
    SkoarMemories::o().deallocToke(L"Eof");
#endif
}

size_t Toke_Eof::burn(std::wstring * buf, size_t offs) {
    if (buf->size() > offs) {
        throw SkoarError(L"Tried to burn Eof when there's more input.");
    }

    return 0;
}

SkoarToke* Toke_Eof::match_toke(std::wstring * buf, size_t offs) {
    if (buf->size() == offs) {
        return new Toke_Eof();
    }

    return nullptr;
}

// ---------------------
// Whitespace is special
// ---------------------
const std::wregex Toke_Whitespace::rgx = std::wregex(L"[ \\t]*", std::regex_constants::optimize);

size_t Toke_Whitespace::burn(std::wstring * buf, size_t offs) {
    auto found = std::regex_search(buf->cbegin() + offs, buf->cend(), matches, Toke_Whitespace::rgx, std::regex_constants::match_continuous);
    if (!found) {
        return 0;
    }

    return matches[0].length();
}

// --------------
// Everyday Tokes
// --------------
const std::wregex Toke_AUGen::rgx = std::wregex(L"a[A-Z][a-zA-Z0-9_]*(?![a-zA-Z0-9_]*<)", std::regex_constants::optimize);
 Toke_AUGen::Toke_AUGen(std::wstring s, size_t offs, size_t n) {
    this->lexeme = s;
    this->offs = offs;
    this->size = n;
    this->kind = ESkoarToke::AUGen;
    this->style = SkoarStyles::Toke::style<ESkoarToke::AUGen>();

#if SKOAR_DEBUG_MEMORY
    SkoarMemories::o().allocToke(L"AUGen");
#endif
}

 Toke_AUGen::~Toke_AUGen() {

#if SKOAR_DEBUG_MEMORY
    SkoarMemories::o().deallocToke(L"AUGen");
#endif
}

SkoarToke* Toke_AUGen::match_toke(std::wstring * buf, size_t offs) {
    auto found = std::regex_search(buf->cbegin() + offs, buf->cend(), matches, Toke_AUGen::rgx, std::regex_constants::match_continuous);
    if (!found) {
        return nullptr;
    }

    auto s = std::wstring(matches.str());
    return new Toke_AUGen(s, offs, s.length());
}

const std::wregex Toke_AUGenWithArgs::rgx = std::wregex(L"a[A-Z][a-zA-Z0-9_]*<", std::regex_constants::optimize);
 Toke_AUGenWithArgs::Toke_AUGenWithArgs(std::wstring s, size_t offs, size_t n) {
    this->lexeme = s;
    this->offs = offs;
    this->size = n;
    this->kind = ESkoarToke::AUGenWithArgs;
    this->style = SkoarStyles::Toke::style<ESkoarToke::AUGenWithArgs>();

#if SKOAR_DEBUG_MEMORY
    SkoarMemories::o().allocToke(L"AUGenWithArgs");
#endif
}

 Toke_AUGenWithArgs::~Toke_AUGenWithArgs() {

#if SKOAR_DEBUG_MEMORY
    SkoarMemories::o().deallocToke(L"AUGenWithArgs");
#endif
}

SkoarToke* Toke_AUGenWithArgs::match_toke(std::wstring * buf, size_t offs) {
    auto found = std::regex_search(buf->cbegin() + offs, buf->cend(), matches, Toke_AUGenWithArgs::rgx, std::regex_constants::match_continuous);
    if (!found) {
        return nullptr;
    }

    auto s = std::wstring(matches.str());
    return new Toke_AUGenWithArgs(s, offs, s.length());
}

const std::wregex Toke_AlCoda::rgx = std::wregex(L"al [cC]oda(\\s*:\\s*[a-zA-Z0-9_]+)?", std::regex_constants::optimize);
 Toke_AlCoda::Toke_AlCoda(std::wstring s, size_t offs, size_t n) {
    this->lexeme = s;
    this->offs = offs;
    this->size = n;
    this->kind = ESkoarToke::AlCoda;
    this->style = SkoarStyles::Toke::style<ESkoarToke::AlCoda>();

#if SKOAR_DEBUG_MEMORY
    SkoarMemories::o().allocToke(L"AlCoda");
#endif
}

 Toke_AlCoda::~Toke_AlCoda() {

#if SKOAR_DEBUG_MEMORY
    SkoarMemories::o().deallocToke(L"AlCoda");
#endif
}

SkoarToke* Toke_AlCoda::match_toke(std::wstring * buf, size_t offs) {
    auto found = std::regex_search(buf->cbegin() + offs, buf->cend(), matches, Toke_AlCoda::rgx, std::regex_constants::match_continuous);
    if (!found) {
        return nullptr;
    }

    auto s = std::wstring(matches.str());
    return new Toke_AlCoda(s, offs, s.length());
}

const std::wregex Toke_Bars::rgx = std::wregex(L":?\\|+(?![>]):?", std::regex_constants::optimize);
 Toke_Bars::Toke_Bars(std::wstring s, size_t offs, size_t n) {
    this->lexeme = s;
    this->offs = offs;
    this->size = n;
    this->kind = ESkoarToke::Bars;
    this->style = SkoarStyles::Toke::style<ESkoarToke::Bars>();

#if SKOAR_DEBUG_MEMORY
    SkoarMemories::o().allocToke(L"Bars");
#endif
}

 Toke_Bars::~Toke_Bars() {

#if SKOAR_DEBUG_MEMORY
    SkoarMemories::o().deallocToke(L"Bars");
#endif
}

SkoarToke* Toke_Bars::match_toke(std::wstring * buf, size_t offs) {
    auto found = std::regex_search(buf->cbegin() + offs, buf->cend(), matches, Toke_Bars::rgx, std::regex_constants::match_continuous);
    if (!found) {
        return nullptr;
    }

    auto s = std::wstring(matches.str());
    return new Toke_Bars(s, offs, s.length());
}

const std::wregex Toke_BooleanAnd::rgx = std::wregex(L"and", std::regex_constants::optimize);
 Toke_BooleanAnd::Toke_BooleanAnd(std::wstring s, size_t offs, size_t n) {
    this->lexeme = s;
    this->offs = offs;
    this->size = n;
    this->kind = ESkoarToke::BooleanAnd;
    this->style = SkoarStyles::Toke::style<ESkoarToke::BooleanAnd>();

#if SKOAR_DEBUG_MEMORY
    SkoarMemories::o().allocToke(L"BooleanAnd");
#endif
}

 Toke_BooleanAnd::~Toke_BooleanAnd() {

#if SKOAR_DEBUG_MEMORY
    SkoarMemories::o().deallocToke(L"BooleanAnd");
#endif
}

SkoarToke* Toke_BooleanAnd::match_toke(std::wstring * buf, size_t offs) {
    auto found = std::regex_search(buf->cbegin() + offs, buf->cend(), matches, Toke_BooleanAnd::rgx, std::regex_constants::match_continuous);
    if (!found) {
        return nullptr;
    }

    auto s = std::wstring(matches.str());
    return new Toke_BooleanAnd(s, offs, s.length());
}

const std::wregex Toke_BooleanOr::rgx = std::wregex(L"or", std::regex_constants::optimize);
 Toke_BooleanOr::Toke_BooleanOr(std::wstring s, size_t offs, size_t n) {
    this->lexeme = s;
    this->offs = offs;
    this->size = n;
    this->kind = ESkoarToke::BooleanOr;
    this->style = SkoarStyles::Toke::style<ESkoarToke::BooleanOr>();

#if SKOAR_DEBUG_MEMORY
    SkoarMemories::o().allocToke(L"BooleanOr");
#endif
}

 Toke_BooleanOr::~Toke_BooleanOr() {

#if SKOAR_DEBUG_MEMORY
    SkoarMemories::o().deallocToke(L"BooleanOr");
#endif
}

SkoarToke* Toke_BooleanOr::match_toke(std::wstring * buf, size_t offs) {
    auto found = std::regex_search(buf->cbegin() + offs, buf->cend(), matches, Toke_BooleanOr::rgx, std::regex_constants::match_continuous);
    if (!found) {
        return nullptr;
    }

    auto s = std::wstring(matches.str());
    return new Toke_BooleanOr(s, offs, s.length());
}

const std::wregex Toke_BracketE::rgx = std::wregex(L"_\\)", std::regex_constants::optimize);
 Toke_BracketE::Toke_BracketE(std::wstring s, size_t offs, size_t n) {
    this->lexeme = s;
    this->offs = offs;
    this->size = n;
    this->kind = ESkoarToke::BracketE;
    this->style = SkoarStyles::Toke::style<ESkoarToke::BracketE>();

#if SKOAR_DEBUG_MEMORY
    SkoarMemories::o().allocToke(L"BracketE");
#endif
}

 Toke_BracketE::~Toke_BracketE() {

#if SKOAR_DEBUG_MEMORY
    SkoarMemories::o().deallocToke(L"BracketE");
#endif
}

SkoarToke* Toke_BracketE::match_toke(std::wstring * buf, size_t offs) {
    auto found = std::regex_search(buf->cbegin() + offs, buf->cend(), matches, Toke_BracketE::rgx, std::regex_constants::match_continuous);
    if (!found) {
        return nullptr;
    }

    auto s = std::wstring(matches.str());
    return new Toke_BracketE(s, offs, s.length());
}

const std::wregex Toke_BracketS::rgx = std::wregex(L"_\\(", std::regex_constants::optimize);
 Toke_BracketS::Toke_BracketS(std::wstring s, size_t offs, size_t n) {
    this->lexeme = s;
    this->offs = offs;
    this->size = n;
    this->kind = ESkoarToke::BracketS;
    this->style = SkoarStyles::Toke::style<ESkoarToke::BracketS>();

#if SKOAR_DEBUG_MEMORY
    SkoarMemories::o().allocToke(L"BracketS");
#endif
}

 Toke_BracketS::~Toke_BracketS() {

#if SKOAR_DEBUG_MEMORY
    SkoarMemories::o().deallocToke(L"BracketS");
#endif
}

SkoarToke* Toke_BracketS::match_toke(std::wstring * buf, size_t offs) {
    auto found = std::regex_search(buf->cbegin() + offs, buf->cend(), matches, Toke_BracketS::rgx, std::regex_constants::match_continuous);
    if (!found) {
        return nullptr;
    }

    auto s = std::wstring(matches.str());
    return new Toke_BracketS(s, offs, s.length());
}

const std::wregex Toke_Carrot::rgx = std::wregex(L"\\^(?!\\^[(])", std::regex_constants::optimize);
 Toke_Carrot::Toke_Carrot(std::wstring s, size_t offs, size_t n) {
    this->lexeme = s;
    this->offs = offs;
    this->size = n;
    this->kind = ESkoarToke::Carrot;
    this->style = SkoarStyles::Toke::style<ESkoarToke::Carrot>();

#if SKOAR_DEBUG_MEMORY
    SkoarMemories::o().allocToke(L"Carrot");
#endif
}

 Toke_Carrot::~Toke_Carrot() {

#if SKOAR_DEBUG_MEMORY
    SkoarMemories::o().deallocToke(L"Carrot");
#endif
}

SkoarToke* Toke_Carrot::match_toke(std::wstring * buf, size_t offs) {
    auto found = std::regex_search(buf->cbegin() + offs, buf->cend(), matches, Toke_Carrot::rgx, std::regex_constants::match_continuous);
    if (!found) {
        return nullptr;
    }

    auto s = std::wstring(matches.str());
    return new Toke_Carrot(s, offs, s.length());
}

const std::wregex Toke_Cat::rgx = std::wregex(L"=\\^\\.\\^=", std::regex_constants::optimize);
 Toke_Cat::Toke_Cat(std::wstring s, size_t offs, size_t n) {
    this->lexeme = s;
    this->offs = offs;
    this->size = n;
    this->kind = ESkoarToke::Cat;
    this->style = SkoarStyles::Toke::style<ESkoarToke::Cat>();

#if SKOAR_DEBUG_MEMORY
    SkoarMemories::o().allocToke(L"Cat");
#endif
}

 Toke_Cat::~Toke_Cat() {

#if SKOAR_DEBUG_MEMORY
    SkoarMemories::o().deallocToke(L"Cat");
#endif
}

SkoarToke* Toke_Cat::match_toke(std::wstring * buf, size_t offs) {
    auto found = std::regex_search(buf->cbegin() + offs, buf->cend(), matches, Toke_Cat::rgx, std::regex_constants::match_continuous);
    if (!found) {
        return nullptr;
    }

    auto s = std::wstring(matches.str());
    return new Toke_Cat(s, offs, s.length());
}

const std::wregex Toke_Choard::rgx = std::wregex(L"~*[ABCDEFG](?![.ce-hj-ln-rt-zA-LN-Z]|a[l ])(#|b)?([Mm0-9]|sus|dim|aug|dom)*~*", std::regex_constants::optimize);
 Toke_Choard::Toke_Choard(std::wstring s, size_t offs, size_t n) {
    this->lexeme = s;
    this->offs = offs;
    this->size = n;
    this->kind = ESkoarToke::Choard;
    this->style = SkoarStyles::Toke::style<ESkoarToke::Choard>();

#if SKOAR_DEBUG_MEMORY
    SkoarMemories::o().allocToke(L"Choard");
#endif
}

 Toke_Choard::~Toke_Choard() {

#if SKOAR_DEBUG_MEMORY
    SkoarMemories::o().deallocToke(L"Choard");
#endif
}

SkoarToke* Toke_Choard::match_toke(std::wstring * buf, size_t offs) {
    auto found = std::regex_search(buf->cbegin() + offs, buf->cend(), matches, Toke_Choard::rgx, std::regex_constants::match_continuous);
    if (!found) {
        return nullptr;
    }

    auto s = std::wstring(matches.str());
    return new Toke_Choard(s, offs, s.length());
}

const std::wregex Toke_CmpEqNeq::rgx = std::wregex(L"==|!=", std::regex_constants::optimize);
 Toke_CmpEqNeq::Toke_CmpEqNeq(std::wstring s, size_t offs, size_t n) {
    this->lexeme = s;
    this->offs = offs;
    this->size = n;
    this->kind = ESkoarToke::CmpEqNeq;
    this->style = SkoarStyles::Toke::style<ESkoarToke::CmpEqNeq>();

#if SKOAR_DEBUG_MEMORY
    SkoarMemories::o().allocToke(L"CmpEqNeq");
#endif
}

 Toke_CmpEqNeq::~Toke_CmpEqNeq() {

#if SKOAR_DEBUG_MEMORY
    SkoarMemories::o().deallocToke(L"CmpEqNeq");
#endif
}

SkoarToke* Toke_CmpEqNeq::match_toke(std::wstring * buf, size_t offs) {
    auto found = std::regex_search(buf->cbegin() + offs, buf->cend(), matches, Toke_CmpEqNeq::rgx, std::regex_constants::match_continuous);
    if (!found) {
        return nullptr;
    }

    auto s = std::wstring(matches.str());
    return new Toke_CmpEqNeq(s, offs, s.length());
}

const std::wregex Toke_CmpGtLt::rgx = std::wregex(L"<=|>=|_<|_>", std::regex_constants::optimize);
 Toke_CmpGtLt::Toke_CmpGtLt(std::wstring s, size_t offs, size_t n) {
    this->lexeme = s;
    this->offs = offs;
    this->size = n;
    this->kind = ESkoarToke::CmpGtLt;
    this->style = SkoarStyles::Toke::style<ESkoarToke::CmpGtLt>();

#if SKOAR_DEBUG_MEMORY
    SkoarMemories::o().allocToke(L"CmpGtLt");
#endif
}

 Toke_CmpGtLt::~Toke_CmpGtLt() {

#if SKOAR_DEBUG_MEMORY
    SkoarMemories::o().deallocToke(L"CmpGtLt");
#endif
}

SkoarToke* Toke_CmpGtLt::match_toke(std::wstring * buf, size_t offs) {
    auto found = std::regex_search(buf->cbegin() + offs, buf->cend(), matches, Toke_CmpGtLt::rgx, std::regex_constants::match_continuous);
    if (!found) {
        return nullptr;
    }

    auto s = std::wstring(matches.str());
    return new Toke_CmpGtLt(s, offs, s.length());
}

const std::wregex Toke_Coda::rgx = std::wregex(L"\\([+]\\)(\\s*:\\s*[a-zA-Z0-9_]+)?", std::regex_constants::optimize);
 Toke_Coda::Toke_Coda(std::wstring s, size_t offs, size_t n) {
    this->lexeme = s;
    this->offs = offs;
    this->size = n;
    this->kind = ESkoarToke::Coda;
    this->style = SkoarStyles::Toke::style<ESkoarToke::Coda>();

#if SKOAR_DEBUG_MEMORY
    SkoarMemories::o().allocToke(L"Coda");
#endif
}

 Toke_Coda::~Toke_Coda() {

#if SKOAR_DEBUG_MEMORY
    SkoarMemories::o().deallocToke(L"Coda");
#endif
}

SkoarToke* Toke_Coda::match_toke(std::wstring * buf, size_t offs) {
    auto found = std::regex_search(buf->cbegin() + offs, buf->cend(), matches, Toke_Coda::rgx, std::regex_constants::match_continuous);
    if (!found) {
        return nullptr;
    }

    auto s = std::wstring(matches.str());
    return new Toke_Coda(s, offs, s.length());
}

const std::wregex Toke_Comment::rgx = std::wregex(L";.*", std::regex_constants::optimize);
 Toke_Comment::Toke_Comment(std::wstring s, size_t offs, size_t n) {
    this->lexeme = s;
    this->offs = offs;
    this->size = n;
    this->kind = ESkoarToke::Comment;
    this->style = SkoarStyles::Toke::style<ESkoarToke::Comment>();

#if SKOAR_DEBUG_MEMORY
    SkoarMemories::o().allocToke(L"Comment");
#endif
}

 Toke_Comment::~Toke_Comment() {

#if SKOAR_DEBUG_MEMORY
    SkoarMemories::o().deallocToke(L"Comment");
#endif
}

SkoarToke* Toke_Comment::match_toke(std::wstring * buf, size_t offs) {
    auto found = std::regex_search(buf->cbegin() + offs, buf->cend(), matches, Toke_Comment::rgx, std::regex_constants::match_continuous);
    if (!found) {
        return nullptr;
    }

    auto s = std::wstring(matches.str());
    return new Toke_Comment(s, offs, s.length());
}

const std::wregex Toke_CondE::rgx = std::wregex(L"[?][}]", std::regex_constants::optimize);
 Toke_CondE::Toke_CondE(std::wstring s, size_t offs, size_t n) {
    this->lexeme = s;
    this->offs = offs;
    this->size = n;
    this->kind = ESkoarToke::CondE;
    this->style = SkoarStyles::Toke::style<ESkoarToke::CondE>();

#if SKOAR_DEBUG_MEMORY
    SkoarMemories::o().allocToke(L"CondE");
#endif
}

 Toke_CondE::~Toke_CondE() {

#if SKOAR_DEBUG_MEMORY
    SkoarMemories::o().deallocToke(L"CondE");
#endif
}

SkoarToke* Toke_CondE::match_toke(std::wstring * buf, size_t offs) {
    auto found = std::regex_search(buf->cbegin() + offs, buf->cend(), matches, Toke_CondE::rgx, std::regex_constants::match_continuous);
    if (!found) {
        return nullptr;
    }

    auto s = std::wstring(matches.str());
    return new Toke_CondE(s, offs, s.length());
}

const std::wregex Toke_CondIf::rgx = std::wregex(L"[?][?](?![}])", std::regex_constants::optimize);
 Toke_CondIf::Toke_CondIf(std::wstring s, size_t offs, size_t n) {
    this->lexeme = s;
    this->offs = offs;
    this->size = n;
    this->kind = ESkoarToke::CondIf;
    this->style = SkoarStyles::Toke::style<ESkoarToke::CondIf>();

#if SKOAR_DEBUG_MEMORY
    SkoarMemories::o().allocToke(L"CondIf");
#endif
}

 Toke_CondIf::~Toke_CondIf() {

#if SKOAR_DEBUG_MEMORY
    SkoarMemories::o().deallocToke(L"CondIf");
#endif
}

SkoarToke* Toke_CondIf::match_toke(std::wstring * buf, size_t offs) {
    auto found = std::regex_search(buf->cbegin() + offs, buf->cend(), matches, Toke_CondIf::rgx, std::regex_constants::match_continuous);
    if (!found) {
        return nullptr;
    }

    auto s = std::wstring(matches.str());
    return new Toke_CondIf(s, offs, s.length());
}

const std::wregex Toke_CondS::rgx = std::wregex(L"[{][?]", std::regex_constants::optimize);
 Toke_CondS::Toke_CondS(std::wstring s, size_t offs, size_t n) {
    this->lexeme = s;
    this->offs = offs;
    this->size = n;
    this->kind = ESkoarToke::CondS;
    this->style = SkoarStyles::Toke::style<ESkoarToke::CondS>();

#if SKOAR_DEBUG_MEMORY
    SkoarMemories::o().allocToke(L"CondS");
#endif
}

 Toke_CondS::~Toke_CondS() {

#if SKOAR_DEBUG_MEMORY
    SkoarMemories::o().deallocToke(L"CondS");
#endif
}

SkoarToke* Toke_CondS::match_toke(std::wstring * buf, size_t offs) {
    auto found = std::regex_search(buf->cbegin() + offs, buf->cend(), matches, Toke_CondS::rgx, std::regex_constants::match_continuous);
    if (!found) {
        return nullptr;
    }

    auto s = std::wstring(matches.str());
    return new Toke_CondS(s, offs, s.length());
}

const std::wregex Toke_Crotchets::rgx = std::wregex(L"[}]+\\.?", std::regex_constants::optimize);
 Toke_Crotchets::Toke_Crotchets(std::wstring s, size_t offs, size_t n) {
    this->lexeme = s;
    this->offs = offs;
    this->size = n;
    this->kind = ESkoarToke::Crotchets;
    this->style = SkoarStyles::Toke::style<ESkoarToke::Crotchets>();

#if SKOAR_DEBUG_MEMORY
    SkoarMemories::o().allocToke(L"Crotchets");
#endif
}

 Toke_Crotchets::~Toke_Crotchets() {

#if SKOAR_DEBUG_MEMORY
    SkoarMemories::o().deallocToke(L"Crotchets");
#endif
}

SkoarToke* Toke_Crotchets::match_toke(std::wstring * buf, size_t offs) {
    auto found = std::regex_search(buf->cbegin() + offs, buf->cend(), matches, Toke_Crotchets::rgx, std::regex_constants::match_continuous);
    if (!found) {
        return nullptr;
    }

    auto s = std::wstring(matches.str());
    return new Toke_Crotchets(s, offs, s.length());
}

const std::wregex Toke_DUGen::rgx = std::wregex(L"d[A-Z][a-zA-Z0-9_]*(?![a-zA-Z0-9_]*<)", std::regex_constants::optimize);
 Toke_DUGen::Toke_DUGen(std::wstring s, size_t offs, size_t n) {
    this->lexeme = s;
    this->offs = offs;
    this->size = n;
    this->kind = ESkoarToke::DUGen;
    this->style = SkoarStyles::Toke::style<ESkoarToke::DUGen>();

#if SKOAR_DEBUG_MEMORY
    SkoarMemories::o().allocToke(L"DUGen");
#endif
}

 Toke_DUGen::~Toke_DUGen() {

#if SKOAR_DEBUG_MEMORY
    SkoarMemories::o().deallocToke(L"DUGen");
#endif
}

SkoarToke* Toke_DUGen::match_toke(std::wstring * buf, size_t offs) {
    auto found = std::regex_search(buf->cbegin() + offs, buf->cend(), matches, Toke_DUGen::rgx, std::regex_constants::match_continuous);
    if (!found) {
        return nullptr;
    }

    auto s = std::wstring(matches.str());
    return new Toke_DUGen(s, offs, s.length());
}

const std::wregex Toke_DUGenWithArgs::rgx = std::wregex(L"d[A-Z][a-zA-Z0-9_]*<", std::regex_constants::optimize);
 Toke_DUGenWithArgs::Toke_DUGenWithArgs(std::wstring s, size_t offs, size_t n) {
    this->lexeme = s;
    this->offs = offs;
    this->size = n;
    this->kind = ESkoarToke::DUGenWithArgs;
    this->style = SkoarStyles::Toke::style<ESkoarToke::DUGenWithArgs>();

#if SKOAR_DEBUG_MEMORY
    SkoarMemories::o().allocToke(L"DUGenWithArgs");
#endif
}

 Toke_DUGenWithArgs::~Toke_DUGenWithArgs() {

#if SKOAR_DEBUG_MEMORY
    SkoarMemories::o().deallocToke(L"DUGenWithArgs");
#endif
}

SkoarToke* Toke_DUGenWithArgs::match_toke(std::wstring * buf, size_t offs) {
    auto found = std::regex_search(buf->cbegin() + offs, buf->cend(), matches, Toke_DUGenWithArgs::rgx, std::regex_constants::match_continuous);
    if (!found) {
        return nullptr;
    }

    auto s = std::wstring(matches.str());
    return new Toke_DUGenWithArgs(s, offs, s.length());
}

const std::wregex Toke_Deref::rgx = std::wregex(L"!(?![!}]|=)", std::regex_constants::optimize);
 Toke_Deref::Toke_Deref(std::wstring s, size_t offs, size_t n) {
    this->lexeme = s;
    this->offs = offs;
    this->size = n;
    this->kind = ESkoarToke::Deref;
    this->style = SkoarStyles::Toke::style<ESkoarToke::Deref>();

#if SKOAR_DEBUG_MEMORY
    SkoarMemories::o().allocToke(L"Deref");
#endif
}

 Toke_Deref::~Toke_Deref() {

#if SKOAR_DEBUG_MEMORY
    SkoarMemories::o().deallocToke(L"Deref");
#endif
}

SkoarToke* Toke_Deref::match_toke(std::wstring * buf, size_t offs) {
    auto found = std::regex_search(buf->cbegin() + offs, buf->cend(), matches, Toke_Deref::rgx, std::regex_constants::match_continuous);
    if (!found) {
        return nullptr;
    }

    auto s = std::wstring(matches.str());
    return new Toke_Deref(s, offs, s.length());
}

const std::wregex Toke_Duration::rgx = std::wregex(L"[0-9]+:[0-9]+(\\.[0-9]+)?", std::regex_constants::optimize);
 Toke_Duration::Toke_Duration(std::wstring s, size_t offs, size_t n) {
    this->lexeme = s;
    this->offs = offs;
    this->size = n;
    this->kind = ESkoarToke::Duration;
    this->style = SkoarStyles::Toke::style<ESkoarToke::Duration>();

#if SKOAR_DEBUG_MEMORY
    SkoarMemories::o().allocToke(L"Duration");
#endif
}

 Toke_Duration::~Toke_Duration() {

#if SKOAR_DEBUG_MEMORY
    SkoarMemories::o().deallocToke(L"Duration");
#endif
}

SkoarToke* Toke_Duration::match_toke(std::wstring * buf, size_t offs) {
    auto found = std::regex_search(buf->cbegin() + offs, buf->cend(), matches, Toke_Duration::rgx, std::regex_constants::match_continuous);
    if (!found) {
        return nullptr;
    }

    auto s = std::wstring(matches.str());
    return new Toke_Duration(s, offs, s.length());
}

const std::wregex Toke_Eighths::rgx = std::wregex(L"\\.?\\]+(?:__?)?\\.?", std::regex_constants::optimize);
 Toke_Eighths::Toke_Eighths(std::wstring s, size_t offs, size_t n) {
    this->lexeme = s;
    this->offs = offs;
    this->size = n;
    this->kind = ESkoarToke::Eighths;
    this->style = SkoarStyles::Toke::style<ESkoarToke::Eighths>();

#if SKOAR_DEBUG_MEMORY
    SkoarMemories::o().allocToke(L"Eighths");
#endif
}

 Toke_Eighths::~Toke_Eighths() {

#if SKOAR_DEBUG_MEMORY
    SkoarMemories::o().deallocToke(L"Eighths");
#endif
}

SkoarToke* Toke_Eighths::match_toke(std::wstring * buf, size_t offs) {
    auto found = std::regex_search(buf->cbegin() + offs, buf->cend(), matches, Toke_Eighths::rgx, std::regex_constants::match_continuous);
    if (!found) {
        return nullptr;
    }

    auto s = std::wstring(matches.str());
    return new Toke_Eighths(s, offs, s.length());
}

const std::wregex Toke_ExactBeat::rgx = std::wregex(L"[(](?![+])", std::regex_constants::optimize);
 Toke_ExactBeat::Toke_ExactBeat(std::wstring s, size_t offs, size_t n) {
    this->lexeme = s;
    this->offs = offs;
    this->size = n;
    this->kind = ESkoarToke::ExactBeat;
    this->style = SkoarStyles::Toke::style<ESkoarToke::ExactBeat>();

#if SKOAR_DEBUG_MEMORY
    SkoarMemories::o().allocToke(L"ExactBeat");
#endif
}

 Toke_ExactBeat::~Toke_ExactBeat() {

#if SKOAR_DEBUG_MEMORY
    SkoarMemories::o().deallocToke(L"ExactBeat");
#endif
}

SkoarToke* Toke_ExactBeat::match_toke(std::wstring * buf, size_t offs) {
    auto found = std::regex_search(buf->cbegin() + offs, buf->cend(), matches, Toke_ExactBeat::rgx, std::regex_constants::match_continuous);
    if (!found) {
        return nullptr;
    }

    auto s = std::wstring(matches.str());
    return new Toke_ExactBeat(s, offs, s.length());
}

const std::wregex Toke_ExactRest::rgx = std::wregex(L"[{](?![=?:!])", std::regex_constants::optimize);
 Toke_ExactRest::Toke_ExactRest(std::wstring s, size_t offs, size_t n) {
    this->lexeme = s;
    this->offs = offs;
    this->size = n;
    this->kind = ESkoarToke::ExactRest;
    this->style = SkoarStyles::Toke::style<ESkoarToke::ExactRest>();

#if SKOAR_DEBUG_MEMORY
    SkoarMemories::o().allocToke(L"ExactRest");
#endif
}

 Toke_ExactRest::~Toke_ExactRest() {

#if SKOAR_DEBUG_MEMORY
    SkoarMemories::o().deallocToke(L"ExactRest");
#endif
}

SkoarToke* Toke_ExactRest::match_toke(std::wstring * buf, size_t offs) {
    auto found = std::regex_search(buf->cbegin() + offs, buf->cend(), matches, Toke_ExactRest::rgx, std::regex_constants::match_continuous);
    if (!found) {
        return nullptr;
    }

    auto s = std::wstring(matches.str());
    return new Toke_ExactRest(s, offs, s.length());
}

const std::wregex Toke_ExpoartsE::rgx = std::wregex(L"\\]", std::regex_constants::optimize);
 Toke_ExpoartsE::Toke_ExpoartsE(std::wstring s, size_t offs, size_t n) {
    this->lexeme = s;
    this->offs = offs;
    this->size = n;
    this->kind = ESkoarToke::ExpoartsE;
    this->style = SkoarStyles::Toke::style<ESkoarToke::ExpoartsE>();

#if SKOAR_DEBUG_MEMORY
    SkoarMemories::o().allocToke(L"ExpoartsE");
#endif
}

 Toke_ExpoartsE::~Toke_ExpoartsE() {

#if SKOAR_DEBUG_MEMORY
    SkoarMemories::o().deallocToke(L"ExpoartsE");
#endif
}

SkoarToke* Toke_ExpoartsE::match_toke(std::wstring * buf, size_t offs) {
    auto found = std::regex_search(buf->cbegin() + offs, buf->cend(), matches, Toke_ExpoartsE::rgx, std::regex_constants::match_continuous);
    if (!found) {
        return nullptr;
    }

    auto s = std::wstring(matches.str());
    return new Toke_ExpoartsE(s, offs, s.length());
}

const std::wregex Toke_ExpoartsS::rgx = std::wregex(L"\\[", std::regex_constants::optimize);
 Toke_ExpoartsS::Toke_ExpoartsS(std::wstring s, size_t offs, size_t n) {
    this->lexeme = s;
    this->offs = offs;
    this->size = n;
    this->kind = ESkoarToke::ExpoartsS;
    this->style = SkoarStyles::Toke::style<ESkoarToke::ExpoartsS>();

#if SKOAR_DEBUG_MEMORY
    SkoarMemories::o().allocToke(L"ExpoartsS");
#endif
}

 Toke_ExpoartsS::~Toke_ExpoartsS() {

#if SKOAR_DEBUG_MEMORY
    SkoarMemories::o().deallocToke(L"ExpoartsS");
#endif
}

SkoarToke* Toke_ExpoartsS::match_toke(std::wstring * buf, size_t offs) {
    auto found = std::regex_search(buf->cbegin() + offs, buf->cend(), matches, Toke_ExpoartsS::rgx, std::regex_constants::match_continuous);
    if (!found) {
        return nullptr;
    }

    auto s = std::wstring(matches.str());
    return new Toke_ExpoartsS(s, offs, s.length());
}

const std::wregex Toke_Fairy::rgx = std::wregex(L"[$]", std::regex_constants::optimize);
 Toke_Fairy::Toke_Fairy(std::wstring s, size_t offs, size_t n) {
    this->lexeme = s;
    this->offs = offs;
    this->size = n;
    this->kind = ESkoarToke::Fairy;
    this->style = SkoarStyles::Toke::style<ESkoarToke::Fairy>();

#if SKOAR_DEBUG_MEMORY
    SkoarMemories::o().allocToke(L"Fairy");
#endif
}

 Toke_Fairy::~Toke_Fairy() {

#if SKOAR_DEBUG_MEMORY
    SkoarMemories::o().deallocToke(L"Fairy");
#endif
}

SkoarToke* Toke_Fairy::match_toke(std::wstring * buf, size_t offs) {
    auto found = std::regex_search(buf->cbegin() + offs, buf->cend(), matches, Toke_Fairy::rgx, std::regex_constants::match_continuous);
    if (!found) {
        return nullptr;
    }

    auto s = std::wstring(matches.str());
    return new Toke_Fairy(s, offs, s.length());
}

const std::wregex Toke_False::rgx = std::wregex(L"no|false", std::regex_constants::optimize);
 Toke_False::Toke_False(std::wstring s, size_t offs, size_t n) {
    this->lexeme = s;
    this->offs = offs;
    this->size = n;
    this->kind = ESkoarToke::False;
    this->style = SkoarStyles::Toke::style<ESkoarToke::False>();

#if SKOAR_DEBUG_MEMORY
    SkoarMemories::o().allocToke(L"False");
#endif
}

 Toke_False::~Toke_False() {

#if SKOAR_DEBUG_MEMORY
    SkoarMemories::o().deallocToke(L"False");
#endif
}

SkoarToke* Toke_False::match_toke(std::wstring * buf, size_t offs) {
    auto found = std::regex_search(buf->cbegin() + offs, buf->cend(), matches, Toke_False::rgx, std::regex_constants::match_continuous);
    if (!found) {
        return nullptr;
    }

    auto s = std::wstring(matches.str());
    return new Toke_False(s, offs, s.length());
}

const std::wregex Toke_Float::rgx = std::wregex(L"(-)?(0|[1-9][0-9]*)\\.[0-9]+(?!Hz|:[0-9])", std::regex_constants::optimize);
 Toke_Float::Toke_Float(std::wstring s, size_t offs, size_t n) {
    this->lexeme = s;
    this->offs = offs;
    this->size = n;
    this->kind = ESkoarToke::Float;
    this->style = SkoarStyles::Toke::style<ESkoarToke::Float>();

#if SKOAR_DEBUG_MEMORY
    SkoarMemories::o().allocToke(L"Float");
#endif
}

 Toke_Float::~Toke_Float() {

#if SKOAR_DEBUG_MEMORY
    SkoarMemories::o().deallocToke(L"Float");
#endif
}

SkoarToke* Toke_Float::match_toke(std::wstring * buf, size_t offs) {
    auto found = std::regex_search(buf->cbegin() + offs, buf->cend(), matches, Toke_Float::rgx, std::regex_constants::match_continuous);
    if (!found) {
        return nullptr;
    }

    auto s = std::wstring(matches.str());
    return new Toke_Float(s, offs, s.length());
}

const std::wregex Toke_Freq::rgx = std::wregex(L"(0|[1-9][0-9]*)(\\.[0-9]+)?Hz", std::regex_constants::optimize);
 Toke_Freq::Toke_Freq(std::wstring s, size_t offs, size_t n) {
    this->lexeme = s;
    this->offs = offs;
    this->size = n;
    this->kind = ESkoarToke::Freq;
    this->style = SkoarStyles::Toke::style<ESkoarToke::Freq>();

#if SKOAR_DEBUG_MEMORY
    SkoarMemories::o().allocToke(L"Freq");
#endif
}

 Toke_Freq::~Toke_Freq() {

#if SKOAR_DEBUG_MEMORY
    SkoarMemories::o().deallocToke(L"Freq");
#endif
}

SkoarToke* Toke_Freq::match_toke(std::wstring * buf, size_t offs) {
    auto found = std::regex_search(buf->cbegin() + offs, buf->cend(), matches, Toke_Freq::rgx, std::regex_constants::match_continuous);
    if (!found) {
        return nullptr;
    }

    auto s = std::wstring(matches.str());
    return new Toke_Freq(s, offs, s.length());
}

const std::wregex Toke_HashLevel::rgx = std::wregex(L"\\[#*[ ]*\\]", std::regex_constants::optimize);
 Toke_HashLevel::Toke_HashLevel(std::wstring s, size_t offs, size_t n) {
    this->lexeme = s;
    this->offs = offs;
    this->size = n;
    this->kind = ESkoarToke::HashLevel;
    this->style = SkoarStyles::Toke::style<ESkoarToke::HashLevel>();

#if SKOAR_DEBUG_MEMORY
    SkoarMemories::o().allocToke(L"HashLevel");
#endif
}

 Toke_HashLevel::~Toke_HashLevel() {

#if SKOAR_DEBUG_MEMORY
    SkoarMemories::o().deallocToke(L"HashLevel");
#endif
}

SkoarToke* Toke_HashLevel::match_toke(std::wstring * buf, size_t offs) {
    auto found = std::regex_search(buf->cbegin() + offs, buf->cend(), matches, Toke_HashLevel::rgx, std::regex_constants::match_continuous);
    if (!found) {
        return nullptr;
    }

    auto s = std::wstring(matches.str());
    return new Toke_HashLevel(s, offs, s.length());
}

const std::wregex Toke_Int::rgx = std::wregex(L"(-)?(0|[1-9][0-9]*)(?![0-9]*Hz|[0-9]*\\.[0-9]|:[0-9])", std::regex_constants::optimize);
 Toke_Int::Toke_Int(std::wstring s, size_t offs, size_t n) {
    this->lexeme = s;
    this->offs = offs;
    this->size = n;
    this->kind = ESkoarToke::Int;
    this->style = SkoarStyles::Toke::style<ESkoarToke::Int>();

#if SKOAR_DEBUG_MEMORY
    SkoarMemories::o().allocToke(L"Int");
#endif
}

 Toke_Int::~Toke_Int() {

#if SKOAR_DEBUG_MEMORY
    SkoarMemories::o().deallocToke(L"Int");
#endif
}

SkoarToke* Toke_Int::match_toke(std::wstring * buf, size_t offs) {
    auto found = std::regex_search(buf->cbegin() + offs, buf->cend(), matches, Toke_Int::rgx, std::regex_constants::match_continuous);
    if (!found) {
        return nullptr;
    }

    auto s = std::wstring(matches.str());
    return new Toke_Int(s, offs, s.length());
}

const std::wregex Toke_KUGen::rgx = std::wregex(L"c[A-Z][a-zA-Z0-9_]*(?![a-zA-Z0-9_]*<)", std::regex_constants::optimize);
 Toke_KUGen::Toke_KUGen(std::wstring s, size_t offs, size_t n) {
    this->lexeme = s;
    this->offs = offs;
    this->size = n;
    this->kind = ESkoarToke::KUGen;
    this->style = SkoarStyles::Toke::style<ESkoarToke::KUGen>();

#if SKOAR_DEBUG_MEMORY
    SkoarMemories::o().allocToke(L"KUGen");
#endif
}

 Toke_KUGen::~Toke_KUGen() {

#if SKOAR_DEBUG_MEMORY
    SkoarMemories::o().deallocToke(L"KUGen");
#endif
}

SkoarToke* Toke_KUGen::match_toke(std::wstring * buf, size_t offs) {
    auto found = std::regex_search(buf->cbegin() + offs, buf->cend(), matches, Toke_KUGen::rgx, std::regex_constants::match_continuous);
    if (!found) {
        return nullptr;
    }

    auto s = std::wstring(matches.str());
    return new Toke_KUGen(s, offs, s.length());
}

const std::wregex Toke_KUGenWithArgs::rgx = std::wregex(L"c[A-Z][a-zA-Z0-9_]*<", std::regex_constants::optimize);
 Toke_KUGenWithArgs::Toke_KUGenWithArgs(std::wstring s, size_t offs, size_t n) {
    this->lexeme = s;
    this->offs = offs;
    this->size = n;
    this->kind = ESkoarToke::KUGenWithArgs;
    this->style = SkoarStyles::Toke::style<ESkoarToke::KUGenWithArgs>();

#if SKOAR_DEBUG_MEMORY
    SkoarMemories::o().allocToke(L"KUGenWithArgs");
#endif
}

 Toke_KUGenWithArgs::~Toke_KUGenWithArgs() {

#if SKOAR_DEBUG_MEMORY
    SkoarMemories::o().deallocToke(L"KUGenWithArgs");
#endif
}

SkoarToke* Toke_KUGenWithArgs::match_toke(std::wstring * buf, size_t offs) {
    auto found = std::regex_search(buf->cbegin() + offs, buf->cend(), matches, Toke_KUGenWithArgs::rgx, std::regex_constants::match_continuous);
    if (!found) {
        return nullptr;
    }

    auto s = std::wstring(matches.str());
    return new Toke_KUGenWithArgs(s, offs, s.length());
}

const std::wregex Toke_LWing::rgx = std::wregex(L"\\^\\^[(]", std::regex_constants::optimize);
 Toke_LWing::Toke_LWing(std::wstring s, size_t offs, size_t n) {
    this->lexeme = s;
    this->offs = offs;
    this->size = n;
    this->kind = ESkoarToke::LWing;
    this->style = SkoarStyles::Toke::style<ESkoarToke::LWing>();

#if SKOAR_DEBUG_MEMORY
    SkoarMemories::o().allocToke(L"LWing");
#endif
}

 Toke_LWing::~Toke_LWing() {

#if SKOAR_DEBUG_MEMORY
    SkoarMemories::o().deallocToke(L"LWing");
#endif
}

SkoarToke* Toke_LWing::match_toke(std::wstring * buf, size_t offs) {
    auto found = std::regex_search(buf->cbegin() + offs, buf->cend(), matches, Toke_LWing::rgx, std::regex_constants::match_continuous);
    if (!found) {
        return nullptr;
    }

    auto s = std::wstring(matches.str());
    return new Toke_LWing(s, offs, s.length());
}

const std::wregex Toke_ListE::rgx = std::wregex(L">(?![=])", std::regex_constants::optimize);
 Toke_ListE::Toke_ListE(std::wstring s, size_t offs, size_t n) {
    this->lexeme = s;
    this->offs = offs;
    this->size = n;
    this->kind = ESkoarToke::ListE;
    this->style = SkoarStyles::Toke::style<ESkoarToke::ListE>();

#if SKOAR_DEBUG_MEMORY
    SkoarMemories::o().allocToke(L"ListE");
#endif
}

 Toke_ListE::~Toke_ListE() {

#if SKOAR_DEBUG_MEMORY
    SkoarMemories::o().deallocToke(L"ListE");
#endif
}

SkoarToke* Toke_ListE::match_toke(std::wstring * buf, size_t offs) {
    auto found = std::regex_search(buf->cbegin() + offs, buf->cend(), matches, Toke_ListE::rgx, std::regex_constants::match_continuous);
    if (!found) {
        return nullptr;
    }

    auto s = std::wstring(matches.str());
    return new Toke_ListE(s, offs, s.length());
}

const std::wregex Toke_ListS::rgx = std::wregex(L"<(?![=?])|<(?=[=]\\^\\.)", std::regex_constants::optimize);
 Toke_ListS::Toke_ListS(std::wstring s, size_t offs, size_t n) {
    this->lexeme = s;
    this->offs = offs;
    this->size = n;
    this->kind = ESkoarToke::ListS;
    this->style = SkoarStyles::Toke::style<ESkoarToke::ListS>();

#if SKOAR_DEBUG_MEMORY
    SkoarMemories::o().allocToke(L"ListS");
#endif
}

 Toke_ListS::~Toke_ListS() {

#if SKOAR_DEBUG_MEMORY
    SkoarMemories::o().deallocToke(L"ListS");
#endif
}

SkoarToke* Toke_ListS::match_toke(std::wstring * buf, size_t offs) {
    auto found = std::regex_search(buf->cbegin() + offs, buf->cend(), matches, Toke_ListS::rgx, std::regex_constants::match_continuous);
    if (!found) {
        return nullptr;
    }

    auto s = std::wstring(matches.str());
    return new Toke_ListS(s, offs, s.length());
}

const std::wregex Toke_ListSep::rgx = std::wregex(L",", std::regex_constants::optimize);
 Toke_ListSep::Toke_ListSep(std::wstring s, size_t offs, size_t n) {
    this->lexeme = s;
    this->offs = offs;
    this->size = n;
    this->kind = ESkoarToke::ListSep;
    this->style = SkoarStyles::Toke::style<ESkoarToke::ListSep>();

#if SKOAR_DEBUG_MEMORY
    SkoarMemories::o().allocToke(L"ListSep");
#endif
}

 Toke_ListSep::~Toke_ListSep() {

#if SKOAR_DEBUG_MEMORY
    SkoarMemories::o().deallocToke(L"ListSep");
#endif
}

SkoarToke* Toke_ListSep::match_toke(std::wstring * buf, size_t offs) {
    auto found = std::regex_search(buf->cbegin() + offs, buf->cend(), matches, Toke_ListSep::rgx, std::regex_constants::match_continuous);
    if (!found) {
        return nullptr;
    }

    auto s = std::wstring(matches.str());
    return new Toke_ListSep(s, offs, s.length());
}

const std::wregex Toke_LoopE::rgx = std::wregex(L":[}]", std::regex_constants::optimize);
 Toke_LoopE::Toke_LoopE(std::wstring s, size_t offs, size_t n) {
    this->lexeme = s;
    this->offs = offs;
    this->size = n;
    this->kind = ESkoarToke::LoopE;
    this->style = SkoarStyles::Toke::style<ESkoarToke::LoopE>();

#if SKOAR_DEBUG_MEMORY
    SkoarMemories::o().allocToke(L"LoopE");
#endif
}

 Toke_LoopE::~Toke_LoopE() {

#if SKOAR_DEBUG_MEMORY
    SkoarMemories::o().deallocToke(L"LoopE");
#endif
}

SkoarToke* Toke_LoopE::match_toke(std::wstring * buf, size_t offs) {
    auto found = std::regex_search(buf->cbegin() + offs, buf->cend(), matches, Toke_LoopE::rgx, std::regex_constants::match_continuous);
    if (!found) {
        return nullptr;
    }

    auto s = std::wstring(matches.str());
    return new Toke_LoopE(s, offs, s.length());
}

const std::wregex Toke_LoopS::rgx = std::wregex(L"[{]:", std::regex_constants::optimize);
 Toke_LoopS::Toke_LoopS(std::wstring s, size_t offs, size_t n) {
    this->lexeme = s;
    this->offs = offs;
    this->size = n;
    this->kind = ESkoarToke::LoopS;
    this->style = SkoarStyles::Toke::style<ESkoarToke::LoopS>();

#if SKOAR_DEBUG_MEMORY
    SkoarMemories::o().allocToke(L"LoopS");
#endif
}

 Toke_LoopS::~Toke_LoopS() {

#if SKOAR_DEBUG_MEMORY
    SkoarMemories::o().deallocToke(L"LoopS");
#endif
}

SkoarToke* Toke_LoopS::match_toke(std::wstring * buf, size_t offs) {
    auto found = std::regex_search(buf->cbegin() + offs, buf->cend(), matches, Toke_LoopS::rgx, std::regex_constants::match_continuous);
    if (!found) {
        return nullptr;
    }

    auto s = std::wstring(matches.str());
    return new Toke_LoopS(s, offs, s.length());
}

const std::wregex Toke_LoopSep::rgx = std::wregex(L"::(?![|])", std::regex_constants::optimize);
 Toke_LoopSep::Toke_LoopSep(std::wstring s, size_t offs, size_t n) {
    this->lexeme = s;
    this->offs = offs;
    this->size = n;
    this->kind = ESkoarToke::LoopSep;
    this->style = SkoarStyles::Toke::style<ESkoarToke::LoopSep>();

#if SKOAR_DEBUG_MEMORY
    SkoarMemories::o().allocToke(L"LoopSep");
#endif
}

 Toke_LoopSep::~Toke_LoopSep() {

#if SKOAR_DEBUG_MEMORY
    SkoarMemories::o().deallocToke(L"LoopSep");
#endif
}

SkoarToke* Toke_LoopSep::match_toke(std::wstring * buf, size_t offs) {
    auto found = std::regex_search(buf->cbegin() + offs, buf->cend(), matches, Toke_LoopSep::rgx, std::regex_constants::match_continuous);
    if (!found) {
        return nullptr;
    }

    auto s = std::wstring(matches.str());
    return new Toke_LoopSep(s, offs, s.length());
}

const std::wregex Toke_Lute::rgx = std::wregex(L"&(?!<)", std::regex_constants::optimize);
 Toke_Lute::Toke_Lute(std::wstring s, size_t offs, size_t n) {
    this->lexeme = s;
    this->offs = offs;
    this->size = n;
    this->kind = ESkoarToke::Lute;
    this->style = SkoarStyles::Toke::style<ESkoarToke::Lute>();

#if SKOAR_DEBUG_MEMORY
    SkoarMemories::o().allocToke(L"Lute");
#endif
}

 Toke_Lute::~Toke_Lute() {

#if SKOAR_DEBUG_MEMORY
    SkoarMemories::o().deallocToke(L"Lute");
#endif
}

SkoarToke* Toke_Lute::match_toke(std::wstring * buf, size_t offs) {
    auto found = std::regex_search(buf->cbegin() + offs, buf->cend(), matches, Toke_Lute::rgx, std::regex_constants::match_continuous);
    if (!found) {
        return nullptr;
    }

    auto s = std::wstring(matches.str());
    return new Toke_Lute(s, offs, s.length());
}

const std::wregex Toke_LuteWithArgs::rgx = std::wregex(L"&<", std::regex_constants::optimize);
 Toke_LuteWithArgs::Toke_LuteWithArgs(std::wstring s, size_t offs, size_t n) {
    this->lexeme = s;
    this->offs = offs;
    this->size = n;
    this->kind = ESkoarToke::LuteWithArgs;
    this->style = SkoarStyles::Toke::style<ESkoarToke::LuteWithArgs>();

#if SKOAR_DEBUG_MEMORY
    SkoarMemories::o().allocToke(L"LuteWithArgs");
#endif
}

 Toke_LuteWithArgs::~Toke_LuteWithArgs() {

#if SKOAR_DEBUG_MEMORY
    SkoarMemories::o().deallocToke(L"LuteWithArgs");
#endif
}

SkoarToke* Toke_LuteWithArgs::match_toke(std::wstring * buf, size_t offs) {
    auto found = std::regex_search(buf->cbegin() + offs, buf->cend(), matches, Toke_LuteWithArgs::rgx, std::regex_constants::match_continuous);
    if (!found) {
        return nullptr;
    }

    auto s = std::wstring(matches.str());
    return new Toke_LuteWithArgs(s, offs, s.length());
}

const std::wregex Toke_MathOpAddSub::rgx = std::wregex(L"[+\\-](?!>)", std::regex_constants::optimize);
 Toke_MathOpAddSub::Toke_MathOpAddSub(std::wstring s, size_t offs, size_t n) {
    this->lexeme = s;
    this->offs = offs;
    this->size = n;
    this->kind = ESkoarToke::MathOpAddSub;
    this->style = SkoarStyles::Toke::style<ESkoarToke::MathOpAddSub>();

#if SKOAR_DEBUG_MEMORY
    SkoarMemories::o().allocToke(L"MathOpAddSub");
#endif
}

 Toke_MathOpAddSub::~Toke_MathOpAddSub() {

#if SKOAR_DEBUG_MEMORY
    SkoarMemories::o().deallocToke(L"MathOpAddSub");
#endif
}

SkoarToke* Toke_MathOpAddSub::match_toke(std::wstring * buf, size_t offs) {
    auto found = std::regex_search(buf->cbegin() + offs, buf->cend(), matches, Toke_MathOpAddSub::rgx, std::regex_constants::match_continuous);
    if (!found) {
        return nullptr;
    }

    auto s = std::wstring(matches.str());
    return new Toke_MathOpAddSub(s, offs, s.length());
}

const std::wregex Toke_MathOpMulDivMod::rgx = std::wregex(L"[*/%](?!>)", std::regex_constants::optimize);
 Toke_MathOpMulDivMod::Toke_MathOpMulDivMod(std::wstring s, size_t offs, size_t n) {
    this->lexeme = s;
    this->offs = offs;
    this->size = n;
    this->kind = ESkoarToke::MathOpMulDivMod;
    this->style = SkoarStyles::Toke::style<ESkoarToke::MathOpMulDivMod>();

#if SKOAR_DEBUG_MEMORY
    SkoarMemories::o().allocToke(L"MathOpMulDivMod");
#endif
}

 Toke_MathOpMulDivMod::~Toke_MathOpMulDivMod() {

#if SKOAR_DEBUG_MEMORY
    SkoarMemories::o().deallocToke(L"MathOpMulDivMod");
#endif
}

SkoarToke* Toke_MathOpMulDivMod::match_toke(std::wstring * buf, size_t offs) {
    auto found = std::regex_search(buf->cbegin() + offs, buf->cend(), matches, Toke_MathOpMulDivMod::rgx, std::regex_constants::match_continuous);
    if (!found) {
        return nullptr;
    }

    auto s = std::wstring(matches.str());
    return new Toke_MathOpMulDivMod(s, offs, s.length());
}

const std::wregex Toke_MeditationE::rgx = std::wregex(L"=[}]", std::regex_constants::optimize);
 Toke_MeditationE::Toke_MeditationE(std::wstring s, size_t offs, size_t n) {
    this->lexeme = s;
    this->offs = offs;
    this->size = n;
    this->kind = ESkoarToke::MeditationE;
    this->style = SkoarStyles::Toke::style<ESkoarToke::MeditationE>();

#if SKOAR_DEBUG_MEMORY
    SkoarMemories::o().allocToke(L"MeditationE");
#endif
}

 Toke_MeditationE::~Toke_MeditationE() {

#if SKOAR_DEBUG_MEMORY
    SkoarMemories::o().deallocToke(L"MeditationE");
#endif
}

SkoarToke* Toke_MeditationE::match_toke(std::wstring * buf, size_t offs) {
    auto found = std::regex_search(buf->cbegin() + offs, buf->cend(), matches, Toke_MeditationE::rgx, std::regex_constants::match_continuous);
    if (!found) {
        return nullptr;
    }

    auto s = std::wstring(matches.str());
    return new Toke_MeditationE(s, offs, s.length());
}

const std::wregex Toke_MeditationS::rgx = std::wregex(L"[{]=", std::regex_constants::optimize);
 Toke_MeditationS::Toke_MeditationS(std::wstring s, size_t offs, size_t n) {
    this->lexeme = s;
    this->offs = offs;
    this->size = n;
    this->kind = ESkoarToke::MeditationS;
    this->style = SkoarStyles::Toke::style<ESkoarToke::MeditationS>();

#if SKOAR_DEBUG_MEMORY
    SkoarMemories::o().allocToke(L"MeditationS");
#endif
}

 Toke_MeditationS::~Toke_MeditationS() {

#if SKOAR_DEBUG_MEMORY
    SkoarMemories::o().deallocToke(L"MeditationS");
#endif
}

SkoarToke* Toke_MeditationS::match_toke(std::wstring * buf, size_t offs) {
    auto found = std::regex_search(buf->cbegin() + offs, buf->cend(), matches, Toke_MeditationS::rgx, std::regex_constants::match_continuous);
    if (!found) {
        return nullptr;
    }

    auto s = std::wstring(matches.str());
    return new Toke_MeditationS(s, offs, s.length());
}

const std::wregex Toke_MsgName::rgx = std::wregex(L"[a-zA-Z_][a-zA-Z0-9_]*(?!<)", std::regex_constants::optimize);
 Toke_MsgName::Toke_MsgName(std::wstring s, size_t offs, size_t n) {
    this->lexeme = s;
    this->offs = offs;
    this->size = n;
    this->kind = ESkoarToke::MsgName;
    this->style = SkoarStyles::Toke::style<ESkoarToke::MsgName>();

#if SKOAR_DEBUG_MEMORY
    SkoarMemories::o().allocToke(L"MsgName");
#endif
}

 Toke_MsgName::~Toke_MsgName() {

#if SKOAR_DEBUG_MEMORY
    SkoarMemories::o().deallocToke(L"MsgName");
#endif
}

SkoarToke* Toke_MsgName::match_toke(std::wstring * buf, size_t offs) {
    auto found = std::regex_search(buf->cbegin() + offs, buf->cend(), matches, Toke_MsgName::rgx, std::regex_constants::match_continuous);
    if (!found) {
        return nullptr;
    }

    auto s = std::wstring(matches.str());
    return new Toke_MsgName(s, offs, s.length());
}

const std::wregex Toke_MsgNameWithArgs::rgx = std::wregex(L"[a-zA-Z_][a-zA-Z0-9_]*<", std::regex_constants::optimize);
 Toke_MsgNameWithArgs::Toke_MsgNameWithArgs(std::wstring s, size_t offs, size_t n) {
    this->lexeme = s;
    this->offs = offs;
    this->size = n;
    this->kind = ESkoarToke::MsgNameWithArgs;
    this->style = SkoarStyles::Toke::style<ESkoarToke::MsgNameWithArgs>();

#if SKOAR_DEBUG_MEMORY
    SkoarMemories::o().allocToke(L"MsgNameWithArgs");
#endif
}

 Toke_MsgNameWithArgs::~Toke_MsgNameWithArgs() {

#if SKOAR_DEBUG_MEMORY
    SkoarMemories::o().deallocToke(L"MsgNameWithArgs");
#endif
}

SkoarToke* Toke_MsgNameWithArgs::match_toke(std::wstring * buf, size_t offs) {
    auto found = std::regex_search(buf->cbegin() + offs, buf->cend(), matches, Toke_MsgNameWithArgs::rgx, std::regex_constants::match_continuous);
    if (!found) {
        return nullptr;
    }

    auto s = std::wstring(matches.str());
    return new Toke_MsgNameWithArgs(s, offs, s.length());
}

const std::wregex Toke_MsgOp::rgx = std::wregex(L"\\.(?![)\\]])", std::regex_constants::optimize);
 Toke_MsgOp::Toke_MsgOp(std::wstring s, size_t offs, size_t n) {
    this->lexeme = s;
    this->offs = offs;
    this->size = n;
    this->kind = ESkoarToke::MsgOp;
    this->style = SkoarStyles::Toke::style<ESkoarToke::MsgOp>();

#if SKOAR_DEBUG_MEMORY
    SkoarMemories::o().allocToke(L"MsgOp");
#endif
}

 Toke_MsgOp::~Toke_MsgOp() {

#if SKOAR_DEBUG_MEMORY
    SkoarMemories::o().deallocToke(L"MsgOp");
#endif
}

SkoarToke* Toke_MsgOp::match_toke(std::wstring * buf, size_t offs) {
    auto found = std::regex_search(buf->cbegin() + offs, buf->cend(), matches, Toke_MsgOp::rgx, std::regex_constants::match_continuous);
    if (!found) {
        return nullptr;
    }

    auto s = std::wstring(matches.str());
    return new Toke_MsgOp(s, offs, s.length());
}

const std::wregex Toke_NamedNoat::rgx = std::wregex(L"(?:_?)(?:[a-g](?![ac-zA-Z_]))(#|b)?(?![ \\t]*:(?![}:|]))", std::regex_constants::optimize);
 Toke_NamedNoat::Toke_NamedNoat(std::wstring s, size_t offs, size_t n) {
    this->lexeme = s;
    this->offs = offs;
    this->size = n;
    this->kind = ESkoarToke::NamedNoat;
    this->style = SkoarStyles::Toke::style<ESkoarToke::NamedNoat>();

#if SKOAR_DEBUG_MEMORY
    SkoarMemories::o().allocToke(L"NamedNoat");
#endif
}

 Toke_NamedNoat::~Toke_NamedNoat() {

#if SKOAR_DEBUG_MEMORY
    SkoarMemories::o().deallocToke(L"NamedNoat");
#endif
}

SkoarToke* Toke_NamedNoat::match_toke(std::wstring * buf, size_t offs) {
    auto found = std::regex_search(buf->cbegin() + offs, buf->cend(), matches, Toke_NamedNoat::rgx, std::regex_constants::match_continuous);
    if (!found) {
        return nullptr;
    }

    auto s = std::wstring(matches.str());
    return new Toke_NamedNoat(s, offs, s.length());
}

const std::wregex Toke_Newline::rgx = std::wregex(L"[ \\t]*[\\n\\r][\\n\\r \\t]*", std::regex_constants::optimize);
 Toke_Newline::Toke_Newline(std::wstring s, size_t offs, size_t n) {
    this->lexeme = s;
    this->offs = offs;
    this->size = n;
    this->kind = ESkoarToke::Newline;
    this->style = SkoarStyles::Toke::style<ESkoarToke::Newline>();

#if SKOAR_DEBUG_MEMORY
    SkoarMemories::o().allocToke(L"Newline");
#endif
}

 Toke_Newline::~Toke_Newline() {

#if SKOAR_DEBUG_MEMORY
    SkoarMemories::o().deallocToke(L"Newline");
#endif
}

SkoarToke* Toke_Newline::match_toke(std::wstring * buf, size_t offs) {
    auto found = std::regex_search(buf->cbegin() + offs, buf->cend(), matches, Toke_Newline::rgx, std::regex_constants::match_continuous);
    if (!found) {
        return nullptr;
    }

    auto s = std::wstring(matches.str());
    return new Toke_Newline(s, offs, s.length());
}

const std::wregex Toke_Nosey::rgx = std::wregex(L",", std::regex_constants::optimize);
 Toke_Nosey::Toke_Nosey(std::wstring s, size_t offs, size_t n) {
    this->lexeme = s;
    this->offs = offs;
    this->size = n;
    this->kind = ESkoarToke::Nosey;
    this->style = SkoarStyles::Toke::style<ESkoarToke::Nosey>();

#if SKOAR_DEBUG_MEMORY
    SkoarMemories::o().allocToke(L"Nosey");
#endif
}

 Toke_Nosey::~Toke_Nosey() {

#if SKOAR_DEBUG_MEMORY
    SkoarMemories::o().deallocToke(L"Nosey");
#endif
}

SkoarToke* Toke_Nosey::match_toke(std::wstring * buf, size_t offs) {
    auto found = std::regex_search(buf->cbegin() + offs, buf->cend(), matches, Toke_Nosey::rgx, std::regex_constants::match_continuous);
    if (!found) {
        return nullptr;
    }

    auto s = std::wstring(matches.str());
    return new Toke_Nosey(s, offs, s.length());
}

const std::wregex Toke_OctaveShift::rgx = std::wregex(L"~+o|o~+", std::regex_constants::optimize);
 Toke_OctaveShift::Toke_OctaveShift(std::wstring s, size_t offs, size_t n) {
    this->lexeme = s;
    this->offs = offs;
    this->size = n;
    this->kind = ESkoarToke::OctaveShift;
    this->style = SkoarStyles::Toke::style<ESkoarToke::OctaveShift>();

#if SKOAR_DEBUG_MEMORY
    SkoarMemories::o().allocToke(L"OctaveShift");
#endif
}

 Toke_OctaveShift::~Toke_OctaveShift() {

#if SKOAR_DEBUG_MEMORY
    SkoarMemories::o().deallocToke(L"OctaveShift");
#endif
}

SkoarToke* Toke_OctaveShift::match_toke(std::wstring * buf, size_t offs) {
    auto found = std::regex_search(buf->cbegin() + offs, buf->cend(), matches, Toke_OctaveShift::rgx, std::regex_constants::match_continuous);
    if (!found) {
        return nullptr;
    }

    auto s = std::wstring(matches.str());
    return new Toke_OctaveShift(s, offs, s.length());
}

const std::wregex Toke_Quarters::rgx = std::wregex(L"\\.?[)]+(?:__?)?\\.?", std::regex_constants::optimize);
 Toke_Quarters::Toke_Quarters(std::wstring s, size_t offs, size_t n) {
    this->lexeme = s;
    this->offs = offs;
    this->size = n;
    this->kind = ESkoarToke::Quarters;
    this->style = SkoarStyles::Toke::style<ESkoarToke::Quarters>();

#if SKOAR_DEBUG_MEMORY
    SkoarMemories::o().allocToke(L"Quarters");
#endif
}

 Toke_Quarters::~Toke_Quarters() {

#if SKOAR_DEBUG_MEMORY
    SkoarMemories::o().deallocToke(L"Quarters");
#endif
}

SkoarToke* Toke_Quarters::match_toke(std::wstring * buf, size_t offs) {
    auto found = std::regex_search(buf->cbegin() + offs, buf->cend(), matches, Toke_Quarters::rgx, std::regex_constants::match_continuous);
    if (!found) {
        return nullptr;
    }

    auto s = std::wstring(matches.str());
    return new Toke_Quarters(s, offs, s.length());
}

const std::wregex Toke_Quavers::rgx = std::wregex(L"o+/\\.?", std::regex_constants::optimize);
 Toke_Quavers::Toke_Quavers(std::wstring s, size_t offs, size_t n) {
    this->lexeme = s;
    this->offs = offs;
    this->size = n;
    this->kind = ESkoarToke::Quavers;
    this->style = SkoarStyles::Toke::style<ESkoarToke::Quavers>();

#if SKOAR_DEBUG_MEMORY
    SkoarMemories::o().allocToke(L"Quavers");
#endif
}

 Toke_Quavers::~Toke_Quavers() {

#if SKOAR_DEBUG_MEMORY
    SkoarMemories::o().deallocToke(L"Quavers");
#endif
}

SkoarToke* Toke_Quavers::match_toke(std::wstring * buf, size_t offs) {
    auto found = std::regex_search(buf->cbegin() + offs, buf->cend(), matches, Toke_Quavers::rgx, std::regex_constants::match_continuous);
    if (!found) {
        return nullptr;
    }

    auto s = std::wstring(matches.str());
    return new Toke_Quavers(s, offs, s.length());
}

const std::wregex Toke_RWing::rgx = std::wregex(L"[)]\\^\\^", std::regex_constants::optimize);
 Toke_RWing::Toke_RWing(std::wstring s, size_t offs, size_t n) {
    this->lexeme = s;
    this->offs = offs;
    this->size = n;
    this->kind = ESkoarToke::RWing;
    this->style = SkoarStyles::Toke::style<ESkoarToke::RWing>();

#if SKOAR_DEBUG_MEMORY
    SkoarMemories::o().allocToke(L"RWing");
#endif
}

 Toke_RWing::~Toke_RWing() {

#if SKOAR_DEBUG_MEMORY
    SkoarMemories::o().deallocToke(L"RWing");
#endif
}

SkoarToke* Toke_RWing::match_toke(std::wstring * buf, size_t offs) {
    auto found = std::regex_search(buf->cbegin() + offs, buf->cend(), matches, Toke_RWing::rgx, std::regex_constants::match_continuous);
    if (!found) {
        return nullptr;
    }

    auto s = std::wstring(matches.str());
    return new Toke_RWing(s, offs, s.length());
}

const std::wregex Toke_Semicolon::rgx = std::wregex(L";", std::regex_constants::optimize);
 Toke_Semicolon::Toke_Semicolon(std::wstring s, size_t offs, size_t n) {
    this->lexeme = s;
    this->offs = offs;
    this->size = n;
    this->kind = ESkoarToke::Semicolon;
    this->style = SkoarStyles::Toke::style<ESkoarToke::Semicolon>();

#if SKOAR_DEBUG_MEMORY
    SkoarMemories::o().allocToke(L"Semicolon");
#endif
}

 Toke_Semicolon::~Toke_Semicolon() {

#if SKOAR_DEBUG_MEMORY
    SkoarMemories::o().deallocToke(L"Semicolon");
#endif
}

SkoarToke* Toke_Semicolon::match_toke(std::wstring * buf, size_t offs) {
    auto found = std::regex_search(buf->cbegin() + offs, buf->cend(), matches, Toke_Semicolon::rgx, std::regex_constants::match_continuous);
    if (!found) {
        return nullptr;
    }

    auto s = std::wstring(matches.str());
    return new Toke_Semicolon(s, offs, s.length());
}

const std::wregex Toke_SkoarpionArgs::rgx = std::wregex(L"!!", std::regex_constants::optimize);
 Toke_SkoarpionArgs::Toke_SkoarpionArgs(std::wstring s, size_t offs, size_t n) {
    this->lexeme = s;
    this->offs = offs;
    this->size = n;
    this->kind = ESkoarToke::SkoarpionArgs;
    this->style = SkoarStyles::Toke::style<ESkoarToke::SkoarpionArgs>();

#if SKOAR_DEBUG_MEMORY
    SkoarMemories::o().allocToke(L"SkoarpionArgs");
#endif
}

 Toke_SkoarpionArgs::~Toke_SkoarpionArgs() {

#if SKOAR_DEBUG_MEMORY
    SkoarMemories::o().deallocToke(L"SkoarpionArgs");
#endif
}

SkoarToke* Toke_SkoarpionArgs::match_toke(std::wstring * buf, size_t offs) {
    auto found = std::regex_search(buf->cbegin() + offs, buf->cend(), matches, Toke_SkoarpionArgs::rgx, std::regex_constants::match_continuous);
    if (!found) {
        return nullptr;
    }

    auto s = std::wstring(matches.str());
    return new Toke_SkoarpionArgs(s, offs, s.length());
}

const std::wregex Toke_SkoarpionEnd::rgx = std::wregex(L"![}]", std::regex_constants::optimize);
 Toke_SkoarpionEnd::Toke_SkoarpionEnd(std::wstring s, size_t offs, size_t n) {
    this->lexeme = s;
    this->offs = offs;
    this->size = n;
    this->kind = ESkoarToke::SkoarpionEnd;
    this->style = SkoarStyles::Toke::style<ESkoarToke::SkoarpionEnd>();

#if SKOAR_DEBUG_MEMORY
    SkoarMemories::o().allocToke(L"SkoarpionEnd");
#endif
}

 Toke_SkoarpionEnd::~Toke_SkoarpionEnd() {

#if SKOAR_DEBUG_MEMORY
    SkoarMemories::o().deallocToke(L"SkoarpionEnd");
#endif
}

SkoarToke* Toke_SkoarpionEnd::match_toke(std::wstring * buf, size_t offs) {
    auto found = std::regex_search(buf->cbegin() + offs, buf->cend(), matches, Toke_SkoarpionEnd::rgx, std::regex_constants::match_continuous);
    if (!found) {
        return nullptr;
    }

    auto s = std::wstring(matches.str());
    return new Toke_SkoarpionEnd(s, offs, s.length());
}

const std::wregex Toke_SkoarpionStart::rgx = std::wregex(L"[{]!", std::regex_constants::optimize);
 Toke_SkoarpionStart::Toke_SkoarpionStart(std::wstring s, size_t offs, size_t n) {
    this->lexeme = s;
    this->offs = offs;
    this->size = n;
    this->kind = ESkoarToke::SkoarpionStart;
    this->style = SkoarStyles::Toke::style<ESkoarToke::SkoarpionStart>();

#if SKOAR_DEBUG_MEMORY
    SkoarMemories::o().allocToke(L"SkoarpionStart");
#endif
}

 Toke_SkoarpionStart::~Toke_SkoarpionStart() {

#if SKOAR_DEBUG_MEMORY
    SkoarMemories::o().deallocToke(L"SkoarpionStart");
#endif
}

SkoarToke* Toke_SkoarpionStart::match_toke(std::wstring * buf, size_t offs) {
    auto found = std::regex_search(buf->cbegin() + offs, buf->cend(), matches, Toke_SkoarpionStart::rgx, std::regex_constants::match_continuous);
    if (!found) {
        return nullptr;
    }

    auto s = std::wstring(matches.str());
    return new Toke_SkoarpionStart(s, offs, s.length());
}

const std::wregex Toke_String::rgx = std::wregex(L"'[^']*'", std::regex_constants::optimize);
 Toke_String::Toke_String(std::wstring s, size_t offs, size_t n) {
    this->lexeme = s;
    this->offs = offs;
    this->size = n;
    this->kind = ESkoarToke::String;
    this->style = SkoarStyles::Toke::style<ESkoarToke::String>();

#if SKOAR_DEBUG_MEMORY
    SkoarMemories::o().allocToke(L"String");
#endif
}

 Toke_String::~Toke_String() {

#if SKOAR_DEBUG_MEMORY
    SkoarMemories::o().deallocToke(L"String");
#endif
}

SkoarToke* Toke_String::match_toke(std::wstring * buf, size_t offs) {
    auto found = std::regex_search(buf->cbegin() + offs, buf->cend(), matches, Toke_String::rgx, std::regex_constants::match_continuous);
    if (!found) {
        return nullptr;
    }

    auto s = std::wstring(matches.str());
    return new Toke_String(s, offs, s.length());
}

const std::wregex Toke_Symbol::rgx = std::wregex(L"@[a-zA-Z0-9_][a-zA-Z0-9_]*", std::regex_constants::optimize);
 Toke_Symbol::Toke_Symbol(std::wstring s, size_t offs, size_t n) {
    this->lexeme = s;
    this->offs = offs;
    this->size = n;
    this->kind = ESkoarToke::Symbol;
    this->style = SkoarStyles::Toke::style<ESkoarToke::Symbol>();

#if SKOAR_DEBUG_MEMORY
    SkoarMemories::o().allocToke(L"Symbol");
#endif
}

 Toke_Symbol::~Toke_Symbol() {

#if SKOAR_DEBUG_MEMORY
    SkoarMemories::o().deallocToke(L"Symbol");
#endif
}

SkoarToke* Toke_Symbol::match_toke(std::wstring * buf, size_t offs) {
    auto found = std::regex_search(buf->cbegin() + offs, buf->cend(), matches, Toke_Symbol::rgx, std::regex_constants::match_continuous);
    if (!found) {
        return nullptr;
    }

    auto s = std::wstring(matches.str());
    return new Toke_Symbol(s, offs, s.length());
}

const std::wregex Toke_SymbolColon::rgx = std::wregex(L"[a-zA-Z_][a-zA-Z0-9_]*[ \\t]*:(?![:|}])", std::regex_constants::optimize);
 Toke_SymbolColon::Toke_SymbolColon(std::wstring s, size_t offs, size_t n) {
    this->lexeme = s;
    this->offs = offs;
    this->size = n;
    this->kind = ESkoarToke::SymbolColon;
    this->style = SkoarStyles::Toke::style<ESkoarToke::SymbolColon>();

#if SKOAR_DEBUG_MEMORY
    SkoarMemories::o().allocToke(L"SymbolColon");
#endif
}

 Toke_SymbolColon::~Toke_SymbolColon() {

#if SKOAR_DEBUG_MEMORY
    SkoarMemories::o().deallocToke(L"SymbolColon");
#endif
}

SkoarToke* Toke_SymbolColon::match_toke(std::wstring * buf, size_t offs) {
    auto found = std::regex_search(buf->cbegin() + offs, buf->cend(), matches, Toke_SymbolColon::rgx, std::regex_constants::match_continuous);
    if (!found) {
        return nullptr;
    }

    auto s = std::wstring(matches.str());
    return new Toke_SymbolColon(s, offs, s.length());
}

const std::wregex Toke_SymbolName::rgx = std::wregex(L"[a-zA-Z0-9_][a-zA-Z0-9_]*(?![[a-zA-Z0-9_fi \\t]*:)", std::regex_constants::optimize);
 Toke_SymbolName::Toke_SymbolName(std::wstring s, size_t offs, size_t n) {
    this->lexeme = s;
    this->offs = offs;
    this->size = n;
    this->kind = ESkoarToke::SymbolName;
    this->style = SkoarStyles::Toke::style<ESkoarToke::SymbolName>();

#if SKOAR_DEBUG_MEMORY
    SkoarMemories::o().allocToke(L"SymbolName");
#endif
}

 Toke_SymbolName::~Toke_SymbolName() {

#if SKOAR_DEBUG_MEMORY
    SkoarMemories::o().deallocToke(L"SymbolName");
#endif
}

SkoarToke* Toke_SymbolName::match_toke(std::wstring * buf, size_t offs) {
    auto found = std::regex_search(buf->cbegin() + offs, buf->cend(), matches, Toke_SymbolName::rgx, std::regex_constants::match_continuous);
    if (!found) {
        return nullptr;
    }

    auto s = std::wstring(matches.str());
    return new Toke_SymbolName(s, offs, s.length());
}

const std::wregex Toke_Times::rgx = std::wregex(L"[Tt]imes", std::regex_constants::optimize);
 Toke_Times::Toke_Times(std::wstring s, size_t offs, size_t n) {
    this->lexeme = s;
    this->offs = offs;
    this->size = n;
    this->kind = ESkoarToke::Times;
    this->style = SkoarStyles::Toke::style<ESkoarToke::Times>();

#if SKOAR_DEBUG_MEMORY
    SkoarMemories::o().allocToke(L"Times");
#endif
}

 Toke_Times::~Toke_Times() {

#if SKOAR_DEBUG_MEMORY
    SkoarMemories::o().deallocToke(L"Times");
#endif
}

SkoarToke* Toke_Times::match_toke(std::wstring * buf, size_t offs) {
    auto found = std::regex_search(buf->cbegin() + offs, buf->cend(), matches, Toke_Times::rgx, std::regex_constants::match_continuous);
    if (!found) {
        return nullptr;
    }

    auto s = std::wstring(matches.str());
    return new Toke_Times(s, offs, s.length());
}

const std::wregex Toke_True::rgx = std::wregex(L"yes|true", std::regex_constants::optimize);
 Toke_True::Toke_True(std::wstring s, size_t offs, size_t n) {
    this->lexeme = s;
    this->offs = offs;
    this->size = n;
    this->kind = ESkoarToke::True;
    this->style = SkoarStyles::Toke::style<ESkoarToke::True>();

#if SKOAR_DEBUG_MEMORY
    SkoarMemories::o().allocToke(L"True");
#endif
}

 Toke_True::~Toke_True() {

#if SKOAR_DEBUG_MEMORY
    SkoarMemories::o().deallocToke(L"True");
#endif
}

SkoarToke* Toke_True::match_toke(std::wstring * buf, size_t offs) {
    auto found = std::regex_search(buf->cbegin() + offs, buf->cend(), matches, Toke_True::rgx, std::regex_constants::match_continuous);
    if (!found) {
        return nullptr;
    }

    auto s = std::wstring(matches.str());
    return new Toke_True(s, offs, s.length());
}

const std::wregex Toke_Tuplet::rgx = std::wregex(L"/\\d+(:\\d+)?|(du|tri|quadru)plets?|(quin|sex|sep|oc)tuplets?", std::regex_constants::optimize);
 Toke_Tuplet::Toke_Tuplet(std::wstring s, size_t offs, size_t n) {
    this->lexeme = s;
    this->offs = offs;
    this->size = n;
    this->kind = ESkoarToke::Tuplet;
    this->style = SkoarStyles::Toke::style<ESkoarToke::Tuplet>();

#if SKOAR_DEBUG_MEMORY
    SkoarMemories::o().allocToke(L"Tuplet");
#endif
}

 Toke_Tuplet::~Toke_Tuplet() {

#if SKOAR_DEBUG_MEMORY
    SkoarMemories::o().deallocToke(L"Tuplet");
#endif
}

SkoarToke* Toke_Tuplet::match_toke(std::wstring * buf, size_t offs) {
    auto found = std::regex_search(buf->cbegin() + offs, buf->cend(), matches, Toke_Tuplet::rgx, std::regex_constants::match_continuous);
    if (!found) {
        return nullptr;
    }

    auto s = std::wstring(matches.str());
    return new Toke_Tuplet(s, offs, s.length());
}

const std::wregex Toke_Voice::rgx = std::wregex(L"\\.(([a-zA-Z_][a-zA-Z0-9_]*)?|\\.+)", std::regex_constants::optimize);
 Toke_Voice::Toke_Voice(std::wstring s, size_t offs, size_t n) {
    this->lexeme = s;
    this->offs = offs;
    this->size = n;
    this->kind = ESkoarToke::Voice;
    this->style = SkoarStyles::Toke::style<ESkoarToke::Voice>();

#if SKOAR_DEBUG_MEMORY
    SkoarMemories::o().allocToke(L"Voice");
#endif
}

 Toke_Voice::~Toke_Voice() {

#if SKOAR_DEBUG_MEMORY
    SkoarMemories::o().deallocToke(L"Voice");
#endif
}

SkoarToke* Toke_Voice::match_toke(std::wstring * buf, size_t offs) {
    auto found = std::regex_search(buf->cbegin() + offs, buf->cend(), matches, Toke_Voice::rgx, std::regex_constants::match_continuous);
    if (!found) {
        return nullptr;
    }

    auto s = std::wstring(matches.str());
    return new Toke_Voice(s, offs, s.length());
}


   
SkoarDispensary::SkoarDispensary() :
   table({
        { ESkoarToke::AUGen, 
            [](std::wstring *buf, size_t offs) {
                return Toke_AUGen::match_toke(buf, offs);
            }
        },
        { ESkoarToke::AUGenWithArgs, 
            [](std::wstring *buf, size_t offs) {
                return Toke_AUGenWithArgs::match_toke(buf, offs);
            }
        },
        { ESkoarToke::AlCoda, 
            [](std::wstring *buf, size_t offs) {
                return Toke_AlCoda::match_toke(buf, offs);
            }
        },
        { ESkoarToke::Bars, 
            [](std::wstring *buf, size_t offs) {
                return Toke_Bars::match_toke(buf, offs);
            }
        },
        { ESkoarToke::BooleanAnd, 
            [](std::wstring *buf, size_t offs) {
                return Toke_BooleanAnd::match_toke(buf, offs);
            }
        },
        { ESkoarToke::BooleanOr, 
            [](std::wstring *buf, size_t offs) {
                return Toke_BooleanOr::match_toke(buf, offs);
            }
        },
        { ESkoarToke::BracketE, 
            [](std::wstring *buf, size_t offs) {
                return Toke_BracketE::match_toke(buf, offs);
            }
        },
        { ESkoarToke::BracketS, 
            [](std::wstring *buf, size_t offs) {
                return Toke_BracketS::match_toke(buf, offs);
            }
        },
        { ESkoarToke::Carrot, 
            [](std::wstring *buf, size_t offs) {
                return Toke_Carrot::match_toke(buf, offs);
            }
        },
        { ESkoarToke::Cat, 
            [](std::wstring *buf, size_t offs) {
                return Toke_Cat::match_toke(buf, offs);
            }
        },
        { ESkoarToke::Choard, 
            [](std::wstring *buf, size_t offs) {
                return Toke_Choard::match_toke(buf, offs);
            }
        },
        { ESkoarToke::CmpEqNeq, 
            [](std::wstring *buf, size_t offs) {
                return Toke_CmpEqNeq::match_toke(buf, offs);
            }
        },
        { ESkoarToke::CmpGtLt, 
            [](std::wstring *buf, size_t offs) {
                return Toke_CmpGtLt::match_toke(buf, offs);
            }
        },
        { ESkoarToke::Coda, 
            [](std::wstring *buf, size_t offs) {
                return Toke_Coda::match_toke(buf, offs);
            }
        },
        { ESkoarToke::Comment, 
            [](std::wstring *buf, size_t offs) {
                return Toke_Comment::match_toke(buf, offs);
            }
        },
        { ESkoarToke::CondE, 
            [](std::wstring *buf, size_t offs) {
                return Toke_CondE::match_toke(buf, offs);
            }
        },
        { ESkoarToke::CondIf, 
            [](std::wstring *buf, size_t offs) {
                return Toke_CondIf::match_toke(buf, offs);
            }
        },
        { ESkoarToke::CondS, 
            [](std::wstring *buf, size_t offs) {
                return Toke_CondS::match_toke(buf, offs);
            }
        },
        { ESkoarToke::Crotchets, 
            [](std::wstring *buf, size_t offs) {
                return Toke_Crotchets::match_toke(buf, offs);
            }
        },
        { ESkoarToke::DUGen, 
            [](std::wstring *buf, size_t offs) {
                return Toke_DUGen::match_toke(buf, offs);
            }
        },
        { ESkoarToke::DUGenWithArgs, 
            [](std::wstring *buf, size_t offs) {
                return Toke_DUGenWithArgs::match_toke(buf, offs);
            }
        },
        { ESkoarToke::Deref, 
            [](std::wstring *buf, size_t offs) {
                return Toke_Deref::match_toke(buf, offs);
            }
        },
        { ESkoarToke::Duration, 
            [](std::wstring *buf, size_t offs) {
                return Toke_Duration::match_toke(buf, offs);
            }
        },
        { ESkoarToke::Eighths, 
            [](std::wstring *buf, size_t offs) {
                return Toke_Eighths::match_toke(buf, offs);
            }
        },
        { ESkoarToke::ExactBeat, 
            [](std::wstring *buf, size_t offs) {
                return Toke_ExactBeat::match_toke(buf, offs);
            }
        },
        { ESkoarToke::ExactRest, 
            [](std::wstring *buf, size_t offs) {
                return Toke_ExactRest::match_toke(buf, offs);
            }
        },
        { ESkoarToke::ExpoartsE, 
            [](std::wstring *buf, size_t offs) {
                return Toke_ExpoartsE::match_toke(buf, offs);
            }
        },
        { ESkoarToke::ExpoartsS, 
            [](std::wstring *buf, size_t offs) {
                return Toke_ExpoartsS::match_toke(buf, offs);
            }
        },
        { ESkoarToke::Fairy, 
            [](std::wstring *buf, size_t offs) {
                return Toke_Fairy::match_toke(buf, offs);
            }
        },
        { ESkoarToke::False, 
            [](std::wstring *buf, size_t offs) {
                return Toke_False::match_toke(buf, offs);
            }
        },
        { ESkoarToke::Float, 
            [](std::wstring *buf, size_t offs) {
                return Toke_Float::match_toke(buf, offs);
            }
        },
        { ESkoarToke::Freq, 
            [](std::wstring *buf, size_t offs) {
                return Toke_Freq::match_toke(buf, offs);
            }
        },
        { ESkoarToke::HashLevel, 
            [](std::wstring *buf, size_t offs) {
                return Toke_HashLevel::match_toke(buf, offs);
            }
        },
        { ESkoarToke::Int, 
            [](std::wstring *buf, size_t offs) {
                return Toke_Int::match_toke(buf, offs);
            }
        },
        { ESkoarToke::KUGen, 
            [](std::wstring *buf, size_t offs) {
                return Toke_KUGen::match_toke(buf, offs);
            }
        },
        { ESkoarToke::KUGenWithArgs, 
            [](std::wstring *buf, size_t offs) {
                return Toke_KUGenWithArgs::match_toke(buf, offs);
            }
        },
        { ESkoarToke::LWing, 
            [](std::wstring *buf, size_t offs) {
                return Toke_LWing::match_toke(buf, offs);
            }
        },
        { ESkoarToke::ListE, 
            [](std::wstring *buf, size_t offs) {
                return Toke_ListE::match_toke(buf, offs);
            }
        },
        { ESkoarToke::ListS, 
            [](std::wstring *buf, size_t offs) {
                return Toke_ListS::match_toke(buf, offs);
            }
        },
        { ESkoarToke::ListSep, 
            [](std::wstring *buf, size_t offs) {
                return Toke_ListSep::match_toke(buf, offs);
            }
        },
        { ESkoarToke::LoopE, 
            [](std::wstring *buf, size_t offs) {
                return Toke_LoopE::match_toke(buf, offs);
            }
        },
        { ESkoarToke::LoopS, 
            [](std::wstring *buf, size_t offs) {
                return Toke_LoopS::match_toke(buf, offs);
            }
        },
        { ESkoarToke::LoopSep, 
            [](std::wstring *buf, size_t offs) {
                return Toke_LoopSep::match_toke(buf, offs);
            }
        },
        { ESkoarToke::Lute, 
            [](std::wstring *buf, size_t offs) {
                return Toke_Lute::match_toke(buf, offs);
            }
        },
        { ESkoarToke::LuteWithArgs, 
            [](std::wstring *buf, size_t offs) {
                return Toke_LuteWithArgs::match_toke(buf, offs);
            }
        },
        { ESkoarToke::MathOpAddSub, 
            [](std::wstring *buf, size_t offs) {
                return Toke_MathOpAddSub::match_toke(buf, offs);
            }
        },
        { ESkoarToke::MathOpMulDivMod, 
            [](std::wstring *buf, size_t offs) {
                return Toke_MathOpMulDivMod::match_toke(buf, offs);
            }
        },
        { ESkoarToke::MeditationE, 
            [](std::wstring *buf, size_t offs) {
                return Toke_MeditationE::match_toke(buf, offs);
            }
        },
        { ESkoarToke::MeditationS, 
            [](std::wstring *buf, size_t offs) {
                return Toke_MeditationS::match_toke(buf, offs);
            }
        },
        { ESkoarToke::MsgName, 
            [](std::wstring *buf, size_t offs) {
                return Toke_MsgName::match_toke(buf, offs);
            }
        },
        { ESkoarToke::MsgNameWithArgs, 
            [](std::wstring *buf, size_t offs) {
                return Toke_MsgNameWithArgs::match_toke(buf, offs);
            }
        },
        { ESkoarToke::MsgOp, 
            [](std::wstring *buf, size_t offs) {
                return Toke_MsgOp::match_toke(buf, offs);
            }
        },
        { ESkoarToke::NamedNoat, 
            [](std::wstring *buf, size_t offs) {
                return Toke_NamedNoat::match_toke(buf, offs);
            }
        },
        { ESkoarToke::Newline, 
            [](std::wstring *buf, size_t offs) {
                return Toke_Newline::match_toke(buf, offs);
            }
        },
        { ESkoarToke::Nosey, 
            [](std::wstring *buf, size_t offs) {
                return Toke_Nosey::match_toke(buf, offs);
            }
        },
        { ESkoarToke::OctaveShift, 
            [](std::wstring *buf, size_t offs) {
                return Toke_OctaveShift::match_toke(buf, offs);
            }
        },
        { ESkoarToke::Quarters, 
            [](std::wstring *buf, size_t offs) {
                return Toke_Quarters::match_toke(buf, offs);
            }
        },
        { ESkoarToke::Quavers, 
            [](std::wstring *buf, size_t offs) {
                return Toke_Quavers::match_toke(buf, offs);
            }
        },
        { ESkoarToke::RWing, 
            [](std::wstring *buf, size_t offs) {
                return Toke_RWing::match_toke(buf, offs);
            }
        },
        { ESkoarToke::Semicolon, 
            [](std::wstring *buf, size_t offs) {
                return Toke_Semicolon::match_toke(buf, offs);
            }
        },
        { ESkoarToke::SkoarpionArgs, 
            [](std::wstring *buf, size_t offs) {
                return Toke_SkoarpionArgs::match_toke(buf, offs);
            }
        },
        { ESkoarToke::SkoarpionEnd, 
            [](std::wstring *buf, size_t offs) {
                return Toke_SkoarpionEnd::match_toke(buf, offs);
            }
        },
        { ESkoarToke::SkoarpionStart, 
            [](std::wstring *buf, size_t offs) {
                return Toke_SkoarpionStart::match_toke(buf, offs);
            }
        },
        { ESkoarToke::String, 
            [](std::wstring *buf, size_t offs) {
                return Toke_String::match_toke(buf, offs);
            }
        },
        { ESkoarToke::Symbol, 
            [](std::wstring *buf, size_t offs) {
                return Toke_Symbol::match_toke(buf, offs);
            }
        },
        { ESkoarToke::SymbolColon, 
            [](std::wstring *buf, size_t offs) {
                return Toke_SymbolColon::match_toke(buf, offs);
            }
        },
        { ESkoarToke::SymbolName, 
            [](std::wstring *buf, size_t offs) {
                return Toke_SymbolName::match_toke(buf, offs);
            }
        },
        { ESkoarToke::Times, 
            [](std::wstring *buf, size_t offs) {
                return Toke_Times::match_toke(buf, offs);
            }
        },
        { ESkoarToke::True, 
            [](std::wstring *buf, size_t offs) {
                return Toke_True::match_toke(buf, offs);
            }
        },
        { ESkoarToke::Tuplet, 
            [](std::wstring *buf, size_t offs) {
                return Toke_Tuplet::match_toke(buf, offs);
            }
        },
        { ESkoarToke::Voice, 
            [](std::wstring *buf, size_t offs) {
                return Toke_Voice::match_toke(buf, offs);
            }
        }
   })
{
}

SkoarToke* SkoarDispensary::match_toke(ESkoarToke::Kind want, std::wstring *buf, size_t offs) {
    auto f = table[want];
    if (f) 
        return f(buf, offs);
    return nullptr;
}
