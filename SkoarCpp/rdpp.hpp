// =====================================================================================================================
// rdpp.hpp - Generated by Code_Parser_Cpp - Create Recursive Descent Predictive Parser on 2017-12-03 06:30:42 for C++14
// =====================================================================================================================
#pragma once
#include "skoarcery.hpp"
#include "noad_fwd.hpp"
#include "exception_fwd.hpp"
#include "toker.hpp"
#include "spells.hpp"

struct SkoarStats {

    SkoarStats();

    // use a float so it never overflows when adding a small constant to it, 
    // just eventually stops making a difference.
    map<ESkoarToke::Kind, float> tokeFreq;
    ListOfSkoarTokeKinds* desirables;

};

class SkoarParser {
public:
    void fail(SkoarNoadPtr noad);
    void fail_too_deep(SkoarNoadPtr noad);

    SkoarToker *toker;
    int deep;
     SkoarParser(SkoarToker * tokr);
    static void init();
    SkoarNoadPtr branches(SkoarNoadPtr parent);
    SkoarNoadPtr skoar(SkoarNoadPtr parent);
    SkoarNoadPtr branch(SkoarNoadPtr parent);
    SkoarNoadPtr opt_voiced_phrases(SkoarNoadPtr parent);
    SkoarNoadPtr optional_voice(SkoarNoadPtr parent);
    SkoarNoadPtr phrases(SkoarNoadPtr parent);
    SkoarNoadPtr phrasey(SkoarNoadPtr parent);
    SkoarNoadPtr marker(SkoarNoadPtr parent);
    SkoarNoadPtr expr(SkoarNoadPtr parent);
    SkoarNoadPtr al_goto(SkoarNoadPtr parent);
    SkoarNoadPtr beat(SkoarNoadPtr parent);
    SkoarNoadPtr phrasish(SkoarNoadPtr parent);
    SkoarNoadPtr phrasishes(SkoarNoadPtr parent);
    SkoarNoadPtr opt_args(SkoarNoadPtr parent);
    SkoarNoadPtr opt_cloasures(SkoarNoadPtr parent);
    SkoarNoadPtr opt_expoarts(SkoarNoadPtr parent);
    SkoarNoadPtr opt_sig(SkoarNoadPtr parent);
    SkoarNoadPtr args(SkoarNoadPtr parent);
    SkoarNoadPtr opt_newline(SkoarNoadPtr parent);
    SkoarNoadPtr args_entries(SkoarNoadPtr parent);
    SkoarNoadPtr moar_args_entries(SkoarNoadPtr parent);
    SkoarNoadPtr moar_args_entries_prime(SkoarNoadPtr parent);
    SkoarNoadPtr skrp_suffix(SkoarNoadPtr parent);
    SkoarNoadPtr skoarpion(SkoarNoadPtr parent);
    SkoarNoadPtr skrp_lines(SkoarNoadPtr parent);
    SkoarNoadPtr cloasures(SkoarNoadPtr parent);
    SkoarNoadPtr cloasures_suffix(SkoarNoadPtr parent);
    SkoarNoadPtr cloasures_entries(SkoarNoadPtr parent);
    SkoarNoadPtr cloasures_end(SkoarNoadPtr parent);
    SkoarNoadPtr moar_cloasures_entries(SkoarNoadPtr parent);
    SkoarNoadPtr expoarts(SkoarNoadPtr parent);
    SkoarNoadPtr expoarts_suffix(SkoarNoadPtr parent);
    SkoarNoadPtr expoarts_entries(SkoarNoadPtr parent);
    SkoarNoadPtr expoarts_end(SkoarNoadPtr parent);
    SkoarNoadPtr moar_expoarts_entries(SkoarNoadPtr parent);
    SkoarNoadPtr skrp_moar_lines(SkoarNoadPtr parent);
    SkoarNoadPtr listy_suffix(SkoarNoadPtr parent);
    SkoarNoadPtr listy(SkoarNoadPtr parent);
    SkoarNoadPtr listy_entries(SkoarNoadPtr parent);
    SkoarNoadPtr moar_listy_entries(SkoarNoadPtr parent);
    SkoarNoadPtr regular_beat(SkoarNoadPtr parent);
    SkoarNoadPtr exact_beat(SkoarNoadPtr parent);
    SkoarNoadPtr exact_rest(SkoarNoadPtr parent);
    SkoarNoadPtr ottavas(SkoarNoadPtr parent);
    SkoarNoadPtr musical_keyword(SkoarNoadPtr parent);
    SkoarNoadPtr musical_keyword_misc(SkoarNoadPtr parent);
    SkoarNoadPtr cthulhu(SkoarNoadPtr parent);
    SkoarNoadPtr nouny(SkoarNoadPtr parent);
    SkoarNoadPtr meditation(SkoarNoadPtr parent);
    SkoarNoadPtr conditional(SkoarNoadPtr parent);
    SkoarNoadPtr loop(SkoarNoadPtr parent);
    SkoarNoadPtr nouny_literal(SkoarNoadPtr parent);
    SkoarNoadPtr deref(SkoarNoadPtr parent);
    SkoarNoadPtr ugen(SkoarNoadPtr parent);
    SkoarNoadPtr lute(SkoarNoadPtr parent);
    SkoarNoadPtr deref_prime(SkoarNoadPtr parent);
    SkoarNoadPtr cthulhu_prime(SkoarNoadPtr parent);
    SkoarNoadPtr boolean_expr(SkoarNoadPtr parent);
    SkoarNoadPtr cond_if(SkoarNoadPtr parent);
    SkoarNoadPtr if_body(SkoarNoadPtr parent);
    SkoarNoadPtr cond_else(SkoarNoadPtr parent);
    SkoarNoadPtr loop_body(SkoarNoadPtr parent);
    SkoarNoadPtr loop_condition(SkoarNoadPtr parent);
    SkoarNoadPtr ugen_with_args(SkoarNoadPtr parent);
    SkoarNoadPtr ugen_simple(SkoarNoadPtr parent);
    SkoarNoadPtr times(SkoarNoadPtr parent);
    SkoarNoadPtr assignment(SkoarNoadPtr parent);
    SkoarNoadPtr opt_times(SkoarNoadPtr parent);
    SkoarNoadPtr boolean_or(SkoarNoadPtr parent);
    SkoarNoadPtr boolean_and(SkoarNoadPtr parent);
    SkoarNoadPtr boolean_or_prime(SkoarNoadPtr parent);
    SkoarNoadPtr cmp_eq_neq(SkoarNoadPtr parent);
    SkoarNoadPtr boolean_and_prime(SkoarNoadPtr parent);
    SkoarNoadPtr cmp_gt_lt(SkoarNoadPtr parent);
    SkoarNoadPtr cmp_eq_neq_prime(SkoarNoadPtr parent);
    SkoarNoadPtr math_add_sub(SkoarNoadPtr parent);
    SkoarNoadPtr cmp_gt_lt_prime(SkoarNoadPtr parent);
    SkoarNoadPtr math_mul_div_mod(SkoarNoadPtr parent);
    SkoarNoadPtr math_add_sub_prime(SkoarNoadPtr parent);
    SkoarNoadPtr msgable(SkoarNoadPtr parent);
    SkoarNoadPtr math_mul_div_mod_prime(SkoarNoadPtr parent);
    SkoarNoadPtr msg_chain_node(SkoarNoadPtr parent);
    SkoarNoadPtr msg(SkoarNoadPtr parent);
    void sortDesirables();
};

