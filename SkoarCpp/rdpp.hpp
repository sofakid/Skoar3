// =====================================================================================================================
// rdpp.cpp - Generated by Code_Parser_Cpp - Create Recursive Descent Predictive Parser on 2015-08-04 19:34:48 for C++14
// =====================================================================================================================
#pragma once
#include "skoarcery.hpp"
#include "noad_fwd.hpp"
#include "toker.hpp"

class SkoarParser {
public:
    void fail();
    void fail_too_deep();

    SkoarToker *toker;
    int deep;
    map<wstring, list<SkoarToke*>> desirables;
             SkoarParser(SkoarToker * toker);
    void init_desirables();
    SkoarNoad* expr_prime(SkoarNoad* parent);
    SkoarNoad* skoar(SkoarNoad* parent);
    SkoarNoad* nouny_literal(SkoarNoad* parent);
    SkoarNoad* cthulhu(SkoarNoad* parent);
    SkoarNoad* musical_keyword(SkoarNoad* parent);
    SkoarNoad* musical_keyword_misc(SkoarNoad* parent);
    SkoarNoad* pedally(SkoarNoad* parent);
    SkoarNoad* al_x(SkoarNoad* parent);
    SkoarNoad* branches(SkoarNoad* parent);
    SkoarNoad* dal_goto(SkoarNoad* parent);
    SkoarNoad* nouny(SkoarNoad* parent);
    SkoarNoad* optional_voice(SkoarNoad* parent);
    SkoarNoad* skrp_sig(SkoarNoad* parent);
    SkoarNoad* settable(SkoarNoad* parent);
    SkoarNoad* boolean(SkoarNoad* parent);
    SkoarNoad* moar_listy_entries(SkoarNoad* parent);
    SkoarNoad* cond_if(SkoarNoad* parent);
    SkoarNoad* coda(SkoarNoad* parent);
    SkoarNoad* listy_suffix(SkoarNoad* parent);
    SkoarNoad* cthulhu_prime(SkoarNoad* parent);
    SkoarNoad* loop(SkoarNoad* parent);
    SkoarNoad* msgable(SkoarNoad* parent);
    SkoarNoad* marker(SkoarNoad* parent);
    SkoarNoad* loop_body(SkoarNoad* parent);
    SkoarNoad* cond_else(SkoarNoad* parent);
    SkoarNoad* optional_al_coda(SkoarNoad* parent);
    SkoarNoad* math(SkoarNoad* parent);
    SkoarNoad* skrp_suffix(SkoarNoad* parent);
    SkoarNoad* branch(SkoarNoad* parent);
    SkoarNoad* phrases(SkoarNoad* parent);
    SkoarNoad* deref_prime(SkoarNoad* parent);
    SkoarNoad* loop_condition(SkoarNoad* parent);
    SkoarNoad* listy_entries(SkoarNoad* parent);
    SkoarNoad* msg(SkoarNoad* parent);
    SkoarNoad* opt_arg_spec(SkoarNoad* parent);
    SkoarNoad* deref(SkoarNoad* parent);
    SkoarNoad* phrasey(SkoarNoad* parent);
    SkoarNoad* dynamic(SkoarNoad* parent);
    SkoarNoad* expr(SkoarNoad* parent);
    SkoarNoad* skoarpion(SkoarNoad* parent);
    SkoarNoad* cond_ifs_suffix(SkoarNoad* parent);
    SkoarNoad* skrp_moar_lines(SkoarNoad* parent);
    SkoarNoad* cond_ifs(SkoarNoad* parent);
    SkoarNoad* skrp_lines(SkoarNoad* parent);
    SkoarNoad* msg_chain_node(SkoarNoad* parent);
    SkoarNoad* ottavas(SkoarNoad* parent);
    SkoarNoad* conditional(SkoarNoad* parent);
    SkoarNoad* assignment(SkoarNoad* parent);
    SkoarNoad* listy(SkoarNoad* parent);
    SkoarNoad* if_body(SkoarNoad* parent);
    SkoarNoad* beat(SkoarNoad* parent);
    SkoarNoad* times(SkoarNoad* parent);
};

