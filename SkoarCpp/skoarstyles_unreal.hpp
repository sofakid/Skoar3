// =========================================================================================
// skoarstyles_unreal.hpp.cpp - Generated by Code_Cpp_Lexer on 2017-03-12 01:36:19 for C++14
// =========================================================================================
#pragma once
#include "skoar_public.hpp"
#include "CodeEditorStyle.h"

typedef function<void(std::string &, FColor &)> StyleSpell;


    /*struct FSkoarSyntaxTextStyle
	{
		FSkoarSyntaxTextStyle()
            : AlCodaTextStyle(FSkoarEditorStyle::Get().GetWidgetStyle<FTextBlockStyle>("SyntaxHighlight.Skoar.Toke.AlCoda"))
            , AlFineTextStyle(FSkoarEditorStyle::Get().GetWidgetStyle<FTextBlockStyle>("SyntaxHighlight.Skoar.Toke.AlFine"))
            , AlSegnoTextStyle(FSkoarEditorStyle::Get().GetWidgetStyle<FTextBlockStyle>("SyntaxHighlight.Skoar.Toke.AlSegno"))
            , ArgSpecTextStyle(FSkoarEditorStyle::Get().GetWidgetStyle<FTextBlockStyle>("SyntaxHighlight.Skoar.Toke.ArgSpec"))
            , AssOpTextStyle(FSkoarEditorStyle::Get().GetWidgetStyle<FTextBlockStyle>("SyntaxHighlight.Skoar.Toke.AssOp"))
            , BarsTextStyle(FSkoarEditorStyle::Get().GetWidgetStyle<FTextBlockStyle>("SyntaxHighlight.Skoar.Toke.Bars"))
            , BooleanOpTextStyle(FSkoarEditorStyle::Get().GetWidgetStyle<FTextBlockStyle>("SyntaxHighlight.Skoar.Toke.BooleanOp"))
            , CaesuraTextStyle(FSkoarEditorStyle::Get().GetWidgetStyle<FTextBlockStyle>("SyntaxHighlight.Skoar.Toke.Caesura"))
            , CarrotTextStyle(FSkoarEditorStyle::Get().GetWidgetStyle<FTextBlockStyle>("SyntaxHighlight.Skoar.Toke.Carrot"))
            , ChoardTextStyle(FSkoarEditorStyle::Get().GetWidgetStyle<FTextBlockStyle>("SyntaxHighlight.Skoar.Toke.Choard"))
            , CodaTextStyle(FSkoarEditorStyle::Get().GetWidgetStyle<FTextBlockStyle>("SyntaxHighlight.Skoar.Toke.Coda"))
            , CommentTextStyle(FSkoarEditorStyle::Get().GetWidgetStyle<FTextBlockStyle>("SyntaxHighlight.Skoar.Toke.Comment"))
            , CondETextStyle(FSkoarEditorStyle::Get().GetWidgetStyle<FTextBlockStyle>("SyntaxHighlight.Skoar.Toke.CondE"))
            , CondIfTextStyle(FSkoarEditorStyle::Get().GetWidgetStyle<FTextBlockStyle>("SyntaxHighlight.Skoar.Toke.CondIf"))
            , CondSTextStyle(FSkoarEditorStyle::Get().GetWidgetStyle<FTextBlockStyle>("SyntaxHighlight.Skoar.Toke.CondS"))
            , CrapTextStyle(FSkoarEditorStyle::Get().GetWidgetStyle<FTextBlockStyle>("SyntaxHighlight.Skoar.Toke.Crap"))
            , CrotchetsTextStyle(FSkoarEditorStyle::Get().GetWidgetStyle<FTextBlockStyle>("SyntaxHighlight.Skoar.Toke.Crotchets"))
            , DaCapoTextStyle(FSkoarEditorStyle::Get().GetWidgetStyle<FTextBlockStyle>("SyntaxHighlight.Skoar.Toke.DaCapo"))
            , DalSegnoTextStyle(FSkoarEditorStyle::Get().GetWidgetStyle<FTextBlockStyle>("SyntaxHighlight.Skoar.Toke.DalSegno"))
            , DerefTextStyle(FSkoarEditorStyle::Get().GetWidgetStyle<FTextBlockStyle>("SyntaxHighlight.Skoar.Toke.Deref"))
            , DynFPTextStyle(FSkoarEditorStyle::Get().GetWidgetStyle<FTextBlockStyle>("SyntaxHighlight.Skoar.Toke.DynFP"))
            , DynForteTextStyle(FSkoarEditorStyle::Get().GetWidgetStyle<FTextBlockStyle>("SyntaxHighlight.Skoar.Toke.DynForte"))
            , DynPianoTextStyle(FSkoarEditorStyle::Get().GetWidgetStyle<FTextBlockStyle>("SyntaxHighlight.Skoar.Toke.DynPiano"))
            , DynSFZTextStyle(FSkoarEditorStyle::Get().GetWidgetStyle<FTextBlockStyle>("SyntaxHighlight.Skoar.Toke.DynSFZ"))
            , EighthsTextStyle(FSkoarEditorStyle::Get().GetWidgetStyle<FTextBlockStyle>("SyntaxHighlight.Skoar.Toke.Eighths"))
            , FairyTextStyle(FSkoarEditorStyle::Get().GetWidgetStyle<FTextBlockStyle>("SyntaxHighlight.Skoar.Toke.Fairy"))
            , FalseTextStyle(FSkoarEditorStyle::Get().GetWidgetStyle<FTextBlockStyle>("SyntaxHighlight.Skoar.Toke.False"))
            , FineTextStyle(FSkoarEditorStyle::Get().GetWidgetStyle<FTextBlockStyle>("SyntaxHighlight.Skoar.Toke.Fine"))
            , FloatTextStyle(FSkoarEditorStyle::Get().GetWidgetStyle<FTextBlockStyle>("SyntaxHighlight.Skoar.Toke.Float"))
            , FreqTextStyle(FSkoarEditorStyle::Get().GetWidgetStyle<FTextBlockStyle>("SyntaxHighlight.Skoar.Toke.Freq"))
            , HashLevelTextStyle(FSkoarEditorStyle::Get().GetWidgetStyle<FTextBlockStyle>("SyntaxHighlight.Skoar.Toke.HashLevel"))
            , IntTextStyle(FSkoarEditorStyle::Get().GetWidgetStyle<FTextBlockStyle>("SyntaxHighlight.Skoar.Toke.Int"))
            , LWingTextStyle(FSkoarEditorStyle::Get().GetWidgetStyle<FTextBlockStyle>("SyntaxHighlight.Skoar.Toke.LWing"))
            , ListETextStyle(FSkoarEditorStyle::Get().GetWidgetStyle<FTextBlockStyle>("SyntaxHighlight.Skoar.Toke.ListE"))
            , ListSTextStyle(FSkoarEditorStyle::Get().GetWidgetStyle<FTextBlockStyle>("SyntaxHighlight.Skoar.Toke.ListS"))
            , ListSepTextStyle(FSkoarEditorStyle::Get().GetWidgetStyle<FTextBlockStyle>("SyntaxHighlight.Skoar.Toke.ListSep"))
            , LocoTextStyle(FSkoarEditorStyle::Get().GetWidgetStyle<FTextBlockStyle>("SyntaxHighlight.Skoar.Toke.Loco"))
            , LoopETextStyle(FSkoarEditorStyle::Get().GetWidgetStyle<FTextBlockStyle>("SyntaxHighlight.Skoar.Toke.LoopE"))
            , LoopSTextStyle(FSkoarEditorStyle::Get().GetWidgetStyle<FTextBlockStyle>("SyntaxHighlight.Skoar.Toke.LoopS"))
            , LoopSepTextStyle(FSkoarEditorStyle::Get().GetWidgetStyle<FTextBlockStyle>("SyntaxHighlight.Skoar.Toke.LoopSep"))
            , MathOpTextStyle(FSkoarEditorStyle::Get().GetWidgetStyle<FTextBlockStyle>("SyntaxHighlight.Skoar.Toke.MathOp"))
            , MeterTextStyle(FSkoarEditorStyle::Get().GetWidgetStyle<FTextBlockStyle>("SyntaxHighlight.Skoar.Toke.Meter"))
            , MsgNameTextStyle(FSkoarEditorStyle::Get().GetWidgetStyle<FTextBlockStyle>("SyntaxHighlight.Skoar.Toke.MsgName"))
            , MsgNameWithArgsTextStyle(FSkoarEditorStyle::Get().GetWidgetStyle<FTextBlockStyle>("SyntaxHighlight.Skoar.Toke.MsgNameWithArgs"))
            , MsgOpTextStyle(FSkoarEditorStyle::Get().GetWidgetStyle<FTextBlockStyle>("SyntaxHighlight.Skoar.Toke.MsgOp"))
            , NamedNoatTextStyle(FSkoarEditorStyle::Get().GetWidgetStyle<FTextBlockStyle>("SyntaxHighlight.Skoar.Toke.NamedNoat"))
            , NewlineTextStyle(FSkoarEditorStyle::Get().GetWidgetStyle<FTextBlockStyle>("SyntaxHighlight.Skoar.Toke.Newline"))
            , NoseyTextStyle(FSkoarEditorStyle::Get().GetWidgetStyle<FTextBlockStyle>("SyntaxHighlight.Skoar.Toke.Nosey"))
            , OctaveShiftTextStyle(FSkoarEditorStyle::Get().GetWidgetStyle<FTextBlockStyle>("SyntaxHighlight.Skoar.Toke.OctaveShift"))
            , OttavaATextStyle(FSkoarEditorStyle::Get().GetWidgetStyle<FTextBlockStyle>("SyntaxHighlight.Skoar.Toke.OttavaA"))
            , OttavaBTextStyle(FSkoarEditorStyle::Get().GetWidgetStyle<FTextBlockStyle>("SyntaxHighlight.Skoar.Toke.OttavaB"))
            , PedalDownTextStyle(FSkoarEditorStyle::Get().GetWidgetStyle<FTextBlockStyle>("SyntaxHighlight.Skoar.Toke.PedalDown"))
            , PedalUpTextStyle(FSkoarEditorStyle::Get().GetWidgetStyle<FTextBlockStyle>("SyntaxHighlight.Skoar.Toke.PedalUp"))
            , PortamentoTextStyle(FSkoarEditorStyle::Get().GetWidgetStyle<FTextBlockStyle>("SyntaxHighlight.Skoar.Toke.Portamento"))
            , QuartersTextStyle(FSkoarEditorStyle::Get().GetWidgetStyle<FTextBlockStyle>("SyntaxHighlight.Skoar.Toke.Quarters"))
            , QuaversTextStyle(FSkoarEditorStyle::Get().GetWidgetStyle<FTextBlockStyle>("SyntaxHighlight.Skoar.Toke.Quavers"))
            , QuindicesimaATextStyle(FSkoarEditorStyle::Get().GetWidgetStyle<FTextBlockStyle>("SyntaxHighlight.Skoar.Toke.QuindicesimaA"))
            , QuindicesimaBTextStyle(FSkoarEditorStyle::Get().GetWidgetStyle<FTextBlockStyle>("SyntaxHighlight.Skoar.Toke.QuindicesimaB"))
            , RWingTextStyle(FSkoarEditorStyle::Get().GetWidgetStyle<FTextBlockStyle>("SyntaxHighlight.Skoar.Toke.RWing"))
            , RepTextStyle(FSkoarEditorStyle::Get().GetWidgetStyle<FTextBlockStyle>("SyntaxHighlight.Skoar.Toke.Rep"))
            , SegnoTextStyle(FSkoarEditorStyle::Get().GetWidgetStyle<FTextBlockStyle>("SyntaxHighlight.Skoar.Toke.Segno"))
            , SemicolonTextStyle(FSkoarEditorStyle::Get().GetWidgetStyle<FTextBlockStyle>("SyntaxHighlight.Skoar.Toke.Semicolon"))
            , SkoarpionEndTextStyle(FSkoarEditorStyle::Get().GetWidgetStyle<FTextBlockStyle>("SyntaxHighlight.Skoar.Toke.SkoarpionEnd"))
            , SkoarpionSepTextStyle(FSkoarEditorStyle::Get().GetWidgetStyle<FTextBlockStyle>("SyntaxHighlight.Skoar.Toke.SkoarpionSep"))
            , SkoarpionStartTextStyle(FSkoarEditorStyle::Get().GetWidgetStyle<FTextBlockStyle>("SyntaxHighlight.Skoar.Toke.SkoarpionStart"))
            , SlashTextStyle(FSkoarEditorStyle::Get().GetWidgetStyle<FTextBlockStyle>("SyntaxHighlight.Skoar.Toke.Slash"))
            , StringTextStyle(FSkoarEditorStyle::Get().GetWidgetStyle<FTextBlockStyle>("SyntaxHighlight.Skoar.Toke.String"))
            , SymbolTextStyle(FSkoarEditorStyle::Get().GetWidgetStyle<FTextBlockStyle>("SyntaxHighlight.Skoar.Toke.Symbol"))
            , SymbolNameTextStyle(FSkoarEditorStyle::Get().GetWidgetStyle<FTextBlockStyle>("SyntaxHighlight.Skoar.Toke.SymbolName"))
            , TimesTextStyle(FSkoarEditorStyle::Get().GetWidgetStyle<FTextBlockStyle>("SyntaxHighlight.Skoar.Toke.Times"))
            , TrueTextStyle(FSkoarEditorStyle::Get().GetWidgetStyle<FTextBlockStyle>("SyntaxHighlight.Skoar.Toke.True"))
            , TupletTextStyle(FSkoarEditorStyle::Get().GetWidgetStyle<FTextBlockStyle>("SyntaxHighlight.Skoar.Toke.Tuplet"))
            , VoiceTextStyle(FSkoarEditorStyle::Get().GetWidgetStyle<FTextBlockStyle>("SyntaxHighlight.Skoar.Toke.Voice"))
            , VoltaTextStyle(FSkoarEditorStyle::Get().GetWidgetStyle<FTextBlockStyle>("SyntaxHighlight.Skoar.Toke.Volta"))
            , al_xTextStyle(FSkoarEditorStyle::Get().GetWidgetStyle<FTextBlockStyle>("SyntaxHighlight.Skoar.Noad.al_x"))
            , assignmentTextStyle(FSkoarEditorStyle::Get().GetWidgetStyle<FTextBlockStyle>("SyntaxHighlight.Skoar.Noad.assignment"))
            , beatTextStyle(FSkoarEditorStyle::Get().GetWidgetStyle<FTextBlockStyle>("SyntaxHighlight.Skoar.Noad.beat"))
            , booleanTextStyle(FSkoarEditorStyle::Get().GetWidgetStyle<FTextBlockStyle>("SyntaxHighlight.Skoar.Noad.boolean"))
            , branchTextStyle(FSkoarEditorStyle::Get().GetWidgetStyle<FTextBlockStyle>("SyntaxHighlight.Skoar.Noad.branch"))
            , branchesTextStyle(FSkoarEditorStyle::Get().GetWidgetStyle<FTextBlockStyle>("SyntaxHighlight.Skoar.Noad.branches"))
            , codaTextStyle(FSkoarEditorStyle::Get().GetWidgetStyle<FTextBlockStyle>("SyntaxHighlight.Skoar.Noad.coda"))
            , cond_elseTextStyle(FSkoarEditorStyle::Get().GetWidgetStyle<FTextBlockStyle>("SyntaxHighlight.Skoar.Noad.cond_else"))
            , cond_ifTextStyle(FSkoarEditorStyle::Get().GetWidgetStyle<FTextBlockStyle>("SyntaxHighlight.Skoar.Noad.cond_if"))
            , cond_ifsTextStyle(FSkoarEditorStyle::Get().GetWidgetStyle<FTextBlockStyle>("SyntaxHighlight.Skoar.Noad.cond_ifs"))
            , cond_ifs_suffixTextStyle(FSkoarEditorStyle::Get().GetWidgetStyle<FTextBlockStyle>("SyntaxHighlight.Skoar.Noad.cond_ifs_suffix"))
            , conditionalTextStyle(FSkoarEditorStyle::Get().GetWidgetStyle<FTextBlockStyle>("SyntaxHighlight.Skoar.Noad.conditional"))
            , cthulhuTextStyle(FSkoarEditorStyle::Get().GetWidgetStyle<FTextBlockStyle>("SyntaxHighlight.Skoar.Noad.cthulhu"))
            , cthulhu_primeTextStyle(FSkoarEditorStyle::Get().GetWidgetStyle<FTextBlockStyle>("SyntaxHighlight.Skoar.Noad.cthulhu_prime"))
            , dal_gotoTextStyle(FSkoarEditorStyle::Get().GetWidgetStyle<FTextBlockStyle>("SyntaxHighlight.Skoar.Noad.dal_goto"))
            , derefTextStyle(FSkoarEditorStyle::Get().GetWidgetStyle<FTextBlockStyle>("SyntaxHighlight.Skoar.Noad.deref"))
            , deref_primeTextStyle(FSkoarEditorStyle::Get().GetWidgetStyle<FTextBlockStyle>("SyntaxHighlight.Skoar.Noad.deref_prime"))
            , dynamicTextStyle(FSkoarEditorStyle::Get().GetWidgetStyle<FTextBlockStyle>("SyntaxHighlight.Skoar.Noad.dynamic"))
            , exprTextStyle(FSkoarEditorStyle::Get().GetWidgetStyle<FTextBlockStyle>("SyntaxHighlight.Skoar.Noad.expr"))
            , expr_primeTextStyle(FSkoarEditorStyle::Get().GetWidgetStyle<FTextBlockStyle>("SyntaxHighlight.Skoar.Noad.expr_prime"))
            , if_bodyTextStyle(FSkoarEditorStyle::Get().GetWidgetStyle<FTextBlockStyle>("SyntaxHighlight.Skoar.Noad.if_body"))
            , listyTextStyle(FSkoarEditorStyle::Get().GetWidgetStyle<FTextBlockStyle>("SyntaxHighlight.Skoar.Noad.listy"))
            , listy_entriesTextStyle(FSkoarEditorStyle::Get().GetWidgetStyle<FTextBlockStyle>("SyntaxHighlight.Skoar.Noad.listy_entries"))
            , listy_suffixTextStyle(FSkoarEditorStyle::Get().GetWidgetStyle<FTextBlockStyle>("SyntaxHighlight.Skoar.Noad.listy_suffix"))
            , loopTextStyle(FSkoarEditorStyle::Get().GetWidgetStyle<FTextBlockStyle>("SyntaxHighlight.Skoar.Noad.loop"))
            , loop_bodyTextStyle(FSkoarEditorStyle::Get().GetWidgetStyle<FTextBlockStyle>("SyntaxHighlight.Skoar.Noad.loop_body"))
            , loop_conditionTextStyle(FSkoarEditorStyle::Get().GetWidgetStyle<FTextBlockStyle>("SyntaxHighlight.Skoar.Noad.loop_condition"))
            , markerTextStyle(FSkoarEditorStyle::Get().GetWidgetStyle<FTextBlockStyle>("SyntaxHighlight.Skoar.Noad.marker"))
            , mathTextStyle(FSkoarEditorStyle::Get().GetWidgetStyle<FTextBlockStyle>("SyntaxHighlight.Skoar.Noad.math"))
            , moar_listy_entriesTextStyle(FSkoarEditorStyle::Get().GetWidgetStyle<FTextBlockStyle>("SyntaxHighlight.Skoar.Noad.moar_listy_entries"))
            , msgTextStyle(FSkoarEditorStyle::Get().GetWidgetStyle<FTextBlockStyle>("SyntaxHighlight.Skoar.Noad.msg"))
            , msg_chain_nodeTextStyle(FSkoarEditorStyle::Get().GetWidgetStyle<FTextBlockStyle>("SyntaxHighlight.Skoar.Noad.msg_chain_node"))
            , msgableTextStyle(FSkoarEditorStyle::Get().GetWidgetStyle<FTextBlockStyle>("SyntaxHighlight.Skoar.Noad.msgable"))
            , musical_keywordTextStyle(FSkoarEditorStyle::Get().GetWidgetStyle<FTextBlockStyle>("SyntaxHighlight.Skoar.Noad.musical_keyword"))
            , musical_keyword_miscTextStyle(FSkoarEditorStyle::Get().GetWidgetStyle<FTextBlockStyle>("SyntaxHighlight.Skoar.Noad.musical_keyword_misc"))
            , nounyTextStyle(FSkoarEditorStyle::Get().GetWidgetStyle<FTextBlockStyle>("SyntaxHighlight.Skoar.Noad.nouny"))
            , nouny_literalTextStyle(FSkoarEditorStyle::Get().GetWidgetStyle<FTextBlockStyle>("SyntaxHighlight.Skoar.Noad.nouny_literal"))
            , opt_arg_specTextStyle(FSkoarEditorStyle::Get().GetWidgetStyle<FTextBlockStyle>("SyntaxHighlight.Skoar.Noad.opt_arg_spec"))
            , optional_al_codaTextStyle(FSkoarEditorStyle::Get().GetWidgetStyle<FTextBlockStyle>("SyntaxHighlight.Skoar.Noad.optional_al_coda"))
            , optional_voiceTextStyle(FSkoarEditorStyle::Get().GetWidgetStyle<FTextBlockStyle>("SyntaxHighlight.Skoar.Noad.optional_voice"))
            , ottavasTextStyle(FSkoarEditorStyle::Get().GetWidgetStyle<FTextBlockStyle>("SyntaxHighlight.Skoar.Noad.ottavas"))
            , pedallyTextStyle(FSkoarEditorStyle::Get().GetWidgetStyle<FTextBlockStyle>("SyntaxHighlight.Skoar.Noad.pedally"))
            , phrasesTextStyle(FSkoarEditorStyle::Get().GetWidgetStyle<FTextBlockStyle>("SyntaxHighlight.Skoar.Noad.phrases"))
            , phraseyTextStyle(FSkoarEditorStyle::Get().GetWidgetStyle<FTextBlockStyle>("SyntaxHighlight.Skoar.Noad.phrasey"))
            , settableTextStyle(FSkoarEditorStyle::Get().GetWidgetStyle<FTextBlockStyle>("SyntaxHighlight.Skoar.Noad.settable"))
            , skoarTextStyle(FSkoarEditorStyle::Get().GetWidgetStyle<FTextBlockStyle>("SyntaxHighlight.Skoar.Noad.skoar"))
            , skoarpionTextStyle(FSkoarEditorStyle::Get().GetWidgetStyle<FTextBlockStyle>("SyntaxHighlight.Skoar.Noad.skoarpion"))
            , skrp_linesTextStyle(FSkoarEditorStyle::Get().GetWidgetStyle<FTextBlockStyle>("SyntaxHighlight.Skoar.Noad.skrp_lines"))
            , skrp_moar_linesTextStyle(FSkoarEditorStyle::Get().GetWidgetStyle<FTextBlockStyle>("SyntaxHighlight.Skoar.Noad.skrp_moar_lines"))
            , skrp_sigTextStyle(FSkoarEditorStyle::Get().GetWidgetStyle<FTextBlockStyle>("SyntaxHighlight.Skoar.Noad.skrp_sig"))
            , skrp_suffixTextStyle(FSkoarEditorStyle::Get().GetWidgetStyle<FTextBlockStyle>("SyntaxHighlight.Skoar.Noad.skrp_suffix"))
            , timesTextStyle(FSkoarEditorStyle::Get().GetWidgetStyle<FTextBlockStyle>("SyntaxHighlight.Skoar.Noad.times"))
        {
        }

		FSkoarSyntaxTextStyle(
            const FTextBlockStyle& InAlCodaTextStyle,
            const FTextBlockStyle& InAlFineTextStyle,
            const FTextBlockStyle& InAlSegnoTextStyle,
            const FTextBlockStyle& InArgSpecTextStyle,
            const FTextBlockStyle& InAssOpTextStyle,
            const FTextBlockStyle& InBarsTextStyle,
            const FTextBlockStyle& InBooleanOpTextStyle,
            const FTextBlockStyle& InCaesuraTextStyle,
            const FTextBlockStyle& InCarrotTextStyle,
            const FTextBlockStyle& InChoardTextStyle,
            const FTextBlockStyle& InCodaTextStyle,
            const FTextBlockStyle& InCommentTextStyle,
            const FTextBlockStyle& InCondETextStyle,
            const FTextBlockStyle& InCondIfTextStyle,
            const FTextBlockStyle& InCondSTextStyle,
            const FTextBlockStyle& InCrapTextStyle,
            const FTextBlockStyle& InCrotchetsTextStyle,
            const FTextBlockStyle& InDaCapoTextStyle,
            const FTextBlockStyle& InDalSegnoTextStyle,
            const FTextBlockStyle& InDerefTextStyle,
            const FTextBlockStyle& InDynFPTextStyle,
            const FTextBlockStyle& InDynForteTextStyle,
            const FTextBlockStyle& InDynPianoTextStyle,
            const FTextBlockStyle& InDynSFZTextStyle,
            const FTextBlockStyle& InEighthsTextStyle,
            const FTextBlockStyle& InFairyTextStyle,
            const FTextBlockStyle& InFalseTextStyle,
            const FTextBlockStyle& InFineTextStyle,
            const FTextBlockStyle& InFloatTextStyle,
            const FTextBlockStyle& InFreqTextStyle,
            const FTextBlockStyle& InHashLevelTextStyle,
            const FTextBlockStyle& InIntTextStyle,
            const FTextBlockStyle& InLWingTextStyle,
            const FTextBlockStyle& InListETextStyle,
            const FTextBlockStyle& InListSTextStyle,
            const FTextBlockStyle& InListSepTextStyle,
            const FTextBlockStyle& InLocoTextStyle,
            const FTextBlockStyle& InLoopETextStyle,
            const FTextBlockStyle& InLoopSTextStyle,
            const FTextBlockStyle& InLoopSepTextStyle,
            const FTextBlockStyle& InMathOpTextStyle,
            const FTextBlockStyle& InMeterTextStyle,
            const FTextBlockStyle& InMsgNameTextStyle,
            const FTextBlockStyle& InMsgNameWithArgsTextStyle,
            const FTextBlockStyle& InMsgOpTextStyle,
            const FTextBlockStyle& InNamedNoatTextStyle,
            const FTextBlockStyle& InNewlineTextStyle,
            const FTextBlockStyle& InNoseyTextStyle,
            const FTextBlockStyle& InOctaveShiftTextStyle,
            const FTextBlockStyle& InOttavaATextStyle,
            const FTextBlockStyle& InOttavaBTextStyle,
            const FTextBlockStyle& InPedalDownTextStyle,
            const FTextBlockStyle& InPedalUpTextStyle,
            const FTextBlockStyle& InPortamentoTextStyle,
            const FTextBlockStyle& InQuartersTextStyle,
            const FTextBlockStyle& InQuaversTextStyle,
            const FTextBlockStyle& InQuindicesimaATextStyle,
            const FTextBlockStyle& InQuindicesimaBTextStyle,
            const FTextBlockStyle& InRWingTextStyle,
            const FTextBlockStyle& InRepTextStyle,
            const FTextBlockStyle& InSegnoTextStyle,
            const FTextBlockStyle& InSemicolonTextStyle,
            const FTextBlockStyle& InSkoarpionEndTextStyle,
            const FTextBlockStyle& InSkoarpionSepTextStyle,
            const FTextBlockStyle& InSkoarpionStartTextStyle,
            const FTextBlockStyle& InSlashTextStyle,
            const FTextBlockStyle& InStringTextStyle,
            const FTextBlockStyle& InSymbolTextStyle,
            const FTextBlockStyle& InSymbolNameTextStyle,
            const FTextBlockStyle& InTimesTextStyle,
            const FTextBlockStyle& InTrueTextStyle,
            const FTextBlockStyle& InTupletTextStyle,
            const FTextBlockStyle& InVoiceTextStyle,
            const FTextBlockStyle& InVoltaTextStyle,
            const FTextBlockStyle& Inal_xTextStyle,
            const FTextBlockStyle& InassignmentTextStyle,
            const FTextBlockStyle& InbeatTextStyle,
            const FTextBlockStyle& InbooleanTextStyle,
            const FTextBlockStyle& InbranchTextStyle,
            const FTextBlockStyle& InbranchesTextStyle,
            const FTextBlockStyle& IncodaTextStyle,
            const FTextBlockStyle& Incond_elseTextStyle,
            const FTextBlockStyle& Incond_ifTextStyle,
            const FTextBlockStyle& Incond_ifsTextStyle,
            const FTextBlockStyle& Incond_ifs_suffixTextStyle,
            const FTextBlockStyle& InconditionalTextStyle,
            const FTextBlockStyle& IncthulhuTextStyle,
            const FTextBlockStyle& Incthulhu_primeTextStyle,
            const FTextBlockStyle& Indal_gotoTextStyle,
            const FTextBlockStyle& InderefTextStyle,
            const FTextBlockStyle& Inderef_primeTextStyle,
            const FTextBlockStyle& IndynamicTextStyle,
            const FTextBlockStyle& InexprTextStyle,
            const FTextBlockStyle& Inexpr_primeTextStyle,
            const FTextBlockStyle& Inif_bodyTextStyle,
            const FTextBlockStyle& InlistyTextStyle,
            const FTextBlockStyle& Inlisty_entriesTextStyle,
            const FTextBlockStyle& Inlisty_suffixTextStyle,
            const FTextBlockStyle& InloopTextStyle,
            const FTextBlockStyle& Inloop_bodyTextStyle,
            const FTextBlockStyle& Inloop_conditionTextStyle,
            const FTextBlockStyle& InmarkerTextStyle,
            const FTextBlockStyle& InmathTextStyle,
            const FTextBlockStyle& Inmoar_listy_entriesTextStyle,
            const FTextBlockStyle& InmsgTextStyle,
            const FTextBlockStyle& Inmsg_chain_nodeTextStyle,
            const FTextBlockStyle& InmsgableTextStyle,
            const FTextBlockStyle& Inmusical_keywordTextStyle,
            const FTextBlockStyle& Inmusical_keyword_miscTextStyle,
            const FTextBlockStyle& InnounyTextStyle,
            const FTextBlockStyle& Innouny_literalTextStyle,
            const FTextBlockStyle& Inopt_arg_specTextStyle,
            const FTextBlockStyle& Inoptional_al_codaTextStyle,
            const FTextBlockStyle& Inoptional_voiceTextStyle,
            const FTextBlockStyle& InottavasTextStyle,
            const FTextBlockStyle& InpedallyTextStyle,
            const FTextBlockStyle& InphrasesTextStyle,
            const FTextBlockStyle& InphraseyTextStyle,
            const FTextBlockStyle& InsettableTextStyle,
            const FTextBlockStyle& InskoarTextStyle,
            const FTextBlockStyle& InskoarpionTextStyle,
            const FTextBlockStyle& Inskrp_linesTextStyle,
            const FTextBlockStyle& Inskrp_moar_linesTextStyle,
            const FTextBlockStyle& Inskrp_sigTextStyle,
            const FTextBlockStyle& Inskrp_suffixTextStyle,
            const FTextBlockStyle& IntimesTextStyle)
            : AlCodaTextStyle(InAlCodaTextStyle)
            , AlFineTextStyle(InAlFineTextStyle)
            , AlSegnoTextStyle(InAlSegnoTextStyle)
            , ArgSpecTextStyle(InArgSpecTextStyle)
            , AssOpTextStyle(InAssOpTextStyle)
            , BarsTextStyle(InBarsTextStyle)
            , BooleanOpTextStyle(InBooleanOpTextStyle)
            , CaesuraTextStyle(InCaesuraTextStyle)
            , CarrotTextStyle(InCarrotTextStyle)
            , ChoardTextStyle(InChoardTextStyle)
            , CodaTextStyle(InCodaTextStyle)
            , CommentTextStyle(InCommentTextStyle)
            , CondETextStyle(InCondETextStyle)
            , CondIfTextStyle(InCondIfTextStyle)
            , CondSTextStyle(InCondSTextStyle)
            , CrapTextStyle(InCrapTextStyle)
            , CrotchetsTextStyle(InCrotchetsTextStyle)
            , DaCapoTextStyle(InDaCapoTextStyle)
            , DalSegnoTextStyle(InDalSegnoTextStyle)
            , DerefTextStyle(InDerefTextStyle)
            , DynFPTextStyle(InDynFPTextStyle)
            , DynForteTextStyle(InDynForteTextStyle)
            , DynPianoTextStyle(InDynPianoTextStyle)
            , DynSFZTextStyle(InDynSFZTextStyle)
            , EighthsTextStyle(InEighthsTextStyle)
            , FairyTextStyle(InFairyTextStyle)
            , FalseTextStyle(InFalseTextStyle)
            , FineTextStyle(InFineTextStyle)
            , FloatTextStyle(InFloatTextStyle)
            , FreqTextStyle(InFreqTextStyle)
            , HashLevelTextStyle(InHashLevelTextStyle)
            , IntTextStyle(InIntTextStyle)
            , LWingTextStyle(InLWingTextStyle)
            , ListETextStyle(InListETextStyle)
            , ListSTextStyle(InListSTextStyle)
            , ListSepTextStyle(InListSepTextStyle)
            , LocoTextStyle(InLocoTextStyle)
            , LoopETextStyle(InLoopETextStyle)
            , LoopSTextStyle(InLoopSTextStyle)
            , LoopSepTextStyle(InLoopSepTextStyle)
            , MathOpTextStyle(InMathOpTextStyle)
            , MeterTextStyle(InMeterTextStyle)
            , MsgNameTextStyle(InMsgNameTextStyle)
            , MsgNameWithArgsTextStyle(InMsgNameWithArgsTextStyle)
            , MsgOpTextStyle(InMsgOpTextStyle)
            , NamedNoatTextStyle(InNamedNoatTextStyle)
            , NewlineTextStyle(InNewlineTextStyle)
            , NoseyTextStyle(InNoseyTextStyle)
            , OctaveShiftTextStyle(InOctaveShiftTextStyle)
            , OttavaATextStyle(InOttavaATextStyle)
            , OttavaBTextStyle(InOttavaBTextStyle)
            , PedalDownTextStyle(InPedalDownTextStyle)
            , PedalUpTextStyle(InPedalUpTextStyle)
            , PortamentoTextStyle(InPortamentoTextStyle)
            , QuartersTextStyle(InQuartersTextStyle)
            , QuaversTextStyle(InQuaversTextStyle)
            , QuindicesimaATextStyle(InQuindicesimaATextStyle)
            , QuindicesimaBTextStyle(InQuindicesimaBTextStyle)
            , RWingTextStyle(InRWingTextStyle)
            , RepTextStyle(InRepTextStyle)
            , SegnoTextStyle(InSegnoTextStyle)
            , SemicolonTextStyle(InSemicolonTextStyle)
            , SkoarpionEndTextStyle(InSkoarpionEndTextStyle)
            , SkoarpionSepTextStyle(InSkoarpionSepTextStyle)
            , SkoarpionStartTextStyle(InSkoarpionStartTextStyle)
            , SlashTextStyle(InSlashTextStyle)
            , StringTextStyle(InStringTextStyle)
            , SymbolTextStyle(InSymbolTextStyle)
            , SymbolNameTextStyle(InSymbolNameTextStyle)
            , TimesTextStyle(InTimesTextStyle)
            , TrueTextStyle(InTrueTextStyle)
            , TupletTextStyle(InTupletTextStyle)
            , VoiceTextStyle(InVoiceTextStyle)
            , VoltaTextStyle(InVoltaTextStyle)
            , al_xTextStyle(Inal_xTextStyle)
            , assignmentTextStyle(InassignmentTextStyle)
            , beatTextStyle(InbeatTextStyle)
            , booleanTextStyle(InbooleanTextStyle)
            , branchTextStyle(InbranchTextStyle)
            , branchesTextStyle(InbranchesTextStyle)
            , codaTextStyle(IncodaTextStyle)
            , cond_elseTextStyle(Incond_elseTextStyle)
            , cond_ifTextStyle(Incond_ifTextStyle)
            , cond_ifsTextStyle(Incond_ifsTextStyle)
            , cond_ifs_suffixTextStyle(Incond_ifs_suffixTextStyle)
            , conditionalTextStyle(InconditionalTextStyle)
            , cthulhuTextStyle(IncthulhuTextStyle)
            , cthulhu_primeTextStyle(Incthulhu_primeTextStyle)
            , dal_gotoTextStyle(Indal_gotoTextStyle)
            , derefTextStyle(InderefTextStyle)
            , deref_primeTextStyle(Inderef_primeTextStyle)
            , dynamicTextStyle(IndynamicTextStyle)
            , exprTextStyle(InexprTextStyle)
            , expr_primeTextStyle(Inexpr_primeTextStyle)
            , if_bodyTextStyle(Inif_bodyTextStyle)
            , listyTextStyle(InlistyTextStyle)
            , listy_entriesTextStyle(Inlisty_entriesTextStyle)
            , listy_suffixTextStyle(Inlisty_suffixTextStyle)
            , loopTextStyle(InloopTextStyle)
            , loop_bodyTextStyle(Inloop_bodyTextStyle)
            , loop_conditionTextStyle(Inloop_conditionTextStyle)
            , markerTextStyle(InmarkerTextStyle)
            , mathTextStyle(InmathTextStyle)
            , moar_listy_entriesTextStyle(Inmoar_listy_entriesTextStyle)
            , msgTextStyle(InmsgTextStyle)
            , msg_chain_nodeTextStyle(Inmsg_chain_nodeTextStyle)
            , msgableTextStyle(InmsgableTextStyle)
            , musical_keywordTextStyle(Inmusical_keywordTextStyle)
            , musical_keyword_miscTextStyle(Inmusical_keyword_miscTextStyle)
            , nounyTextStyle(InnounyTextStyle)
            , nouny_literalTextStyle(Innouny_literalTextStyle)
            , opt_arg_specTextStyle(Inopt_arg_specTextStyle)
            , optional_al_codaTextStyle(Inoptional_al_codaTextStyle)
            , optional_voiceTextStyle(Inoptional_voiceTextStyle)
            , ottavasTextStyle(InottavasTextStyle)
            , pedallyTextStyle(InpedallyTextStyle)
            , phrasesTextStyle(InphrasesTextStyle)
            , phraseyTextStyle(InphraseyTextStyle)
            , settableTextStyle(InsettableTextStyle)
            , skoarTextStyle(InskoarTextStyle)
            , skoarpionTextStyle(InskoarpionTextStyle)
            , skrp_linesTextStyle(Inskrp_linesTextStyle)
            , skrp_moar_linesTextStyle(Inskrp_moar_linesTextStyle)
            , skrp_sigTextStyle(Inskrp_sigTextStyle)
            , skrp_suffixTextStyle(Inskrp_suffixTextStyle)
            , timesTextStyle(IntimesTextStyle)
       {
       }

        FTextBlockStyle AlCodaTextStyle;
        FTextBlockStyle AlFineTextStyle;
        FTextBlockStyle AlSegnoTextStyle;
        FTextBlockStyle ArgSpecTextStyle;
        FTextBlockStyle AssOpTextStyle;
        FTextBlockStyle BarsTextStyle;
        FTextBlockStyle BooleanOpTextStyle;
        FTextBlockStyle CaesuraTextStyle;
        FTextBlockStyle CarrotTextStyle;
        FTextBlockStyle ChoardTextStyle;
        FTextBlockStyle CodaTextStyle;
        FTextBlockStyle CommentTextStyle;
        FTextBlockStyle CondETextStyle;
        FTextBlockStyle CondIfTextStyle;
        FTextBlockStyle CondSTextStyle;
        FTextBlockStyle CrapTextStyle;
        FTextBlockStyle CrotchetsTextStyle;
        FTextBlockStyle DaCapoTextStyle;
        FTextBlockStyle DalSegnoTextStyle;
        FTextBlockStyle DerefTextStyle;
        FTextBlockStyle DynFPTextStyle;
        FTextBlockStyle DynForteTextStyle;
        FTextBlockStyle DynPianoTextStyle;
        FTextBlockStyle DynSFZTextStyle;
        FTextBlockStyle EighthsTextStyle;
        FTextBlockStyle FairyTextStyle;
        FTextBlockStyle FalseTextStyle;
        FTextBlockStyle FineTextStyle;
        FTextBlockStyle FloatTextStyle;
        FTextBlockStyle FreqTextStyle;
        FTextBlockStyle HashLevelTextStyle;
        FTextBlockStyle IntTextStyle;
        FTextBlockStyle LWingTextStyle;
        FTextBlockStyle ListETextStyle;
        FTextBlockStyle ListSTextStyle;
        FTextBlockStyle ListSepTextStyle;
        FTextBlockStyle LocoTextStyle;
        FTextBlockStyle LoopETextStyle;
        FTextBlockStyle LoopSTextStyle;
        FTextBlockStyle LoopSepTextStyle;
        FTextBlockStyle MathOpTextStyle;
        FTextBlockStyle MeterTextStyle;
        FTextBlockStyle MsgNameTextStyle;
        FTextBlockStyle MsgNameWithArgsTextStyle;
        FTextBlockStyle MsgOpTextStyle;
        FTextBlockStyle NamedNoatTextStyle;
        FTextBlockStyle NewlineTextStyle;
        FTextBlockStyle NoseyTextStyle;
        FTextBlockStyle OctaveShiftTextStyle;
        FTextBlockStyle OttavaATextStyle;
        FTextBlockStyle OttavaBTextStyle;
        FTextBlockStyle PedalDownTextStyle;
        FTextBlockStyle PedalUpTextStyle;
        FTextBlockStyle PortamentoTextStyle;
        FTextBlockStyle QuartersTextStyle;
        FTextBlockStyle QuaversTextStyle;
        FTextBlockStyle QuindicesimaATextStyle;
        FTextBlockStyle QuindicesimaBTextStyle;
        FTextBlockStyle RWingTextStyle;
        FTextBlockStyle RepTextStyle;
        FTextBlockStyle SegnoTextStyle;
        FTextBlockStyle SemicolonTextStyle;
        FTextBlockStyle SkoarpionEndTextStyle;
        FTextBlockStyle SkoarpionSepTextStyle;
        FTextBlockStyle SkoarpionStartTextStyle;
        FTextBlockStyle SlashTextStyle;
        FTextBlockStyle StringTextStyle;
        FTextBlockStyle SymbolTextStyle;
        FTextBlockStyle SymbolNameTextStyle;
        FTextBlockStyle TimesTextStyle;
        FTextBlockStyle TrueTextStyle;
        FTextBlockStyle TupletTextStyle;
        FTextBlockStyle VoiceTextStyle;
        FTextBlockStyle VoltaTextStyle;
        FTextBlockStyle al_xTextStyle;
        FTextBlockStyle assignmentTextStyle;
        FTextBlockStyle beatTextStyle;
        FTextBlockStyle booleanTextStyle;
        FTextBlockStyle branchTextStyle;
        FTextBlockStyle branchesTextStyle;
        FTextBlockStyle codaTextStyle;
        FTextBlockStyle cond_elseTextStyle;
        FTextBlockStyle cond_ifTextStyle;
        FTextBlockStyle cond_ifsTextStyle;
        FTextBlockStyle cond_ifs_suffixTextStyle;
        FTextBlockStyle conditionalTextStyle;
        FTextBlockStyle cthulhuTextStyle;
        FTextBlockStyle cthulhu_primeTextStyle;
        FTextBlockStyle dal_gotoTextStyle;
        FTextBlockStyle derefTextStyle;
        FTextBlockStyle deref_primeTextStyle;
        FTextBlockStyle dynamicTextStyle;
        FTextBlockStyle exprTextStyle;
        FTextBlockStyle expr_primeTextStyle;
        FTextBlockStyle if_bodyTextStyle;
        FTextBlockStyle listyTextStyle;
        FTextBlockStyle listy_entriesTextStyle;
        FTextBlockStyle listy_suffixTextStyle;
        FTextBlockStyle loopTextStyle;
        FTextBlockStyle loop_bodyTextStyle;
        FTextBlockStyle loop_conditionTextStyle;
        FTextBlockStyle markerTextStyle;
        FTextBlockStyle mathTextStyle;
        FTextBlockStyle moar_listy_entriesTextStyle;
        FTextBlockStyle msgTextStyle;
        FTextBlockStyle msg_chain_nodeTextStyle;
        FTextBlockStyle msgableTextStyle;
        FTextBlockStyle musical_keywordTextStyle;
        FTextBlockStyle musical_keyword_miscTextStyle;
        FTextBlockStyle nounyTextStyle;
        FTextBlockStyle nouny_literalTextStyle;
        FTextBlockStyle opt_arg_specTextStyle;
        FTextBlockStyle optional_al_codaTextStyle;
        FTextBlockStyle optional_voiceTextStyle;
        FTextBlockStyle ottavasTextStyle;
        FTextBlockStyle pedallyTextStyle;
        FTextBlockStyle phrasesTextStyle;
        FTextBlockStyle phraseyTextStyle;
        FTextBlockStyle settableTextStyle;
        FTextBlockStyle skoarTextStyle;
        FTextBlockStyle skoarpionTextStyle;
        FTextBlockStyle skrp_linesTextStyle;
        FTextBlockStyle skrp_moar_linesTextStyle;
        FTextBlockStyle skrp_sigTextStyle;
        FTextBlockStyle skrp_suffixTextStyle;
        FTextBlockStyle timesTextStyle;

	};
    */

    
class FSkoarStyle {
    
public:

    map<ESkoarToke::Kind, std::string> toke_to_id;
    map<ESkoarToke::Kind, FColor> toke_to_colour;
    map<ESkoarToke::Kind, FTextBlockStyle> toke_to_style;
    
    map<ESkoarNoad::Kind, std::string> noad_to_id;
    map<ESkoarNoad::Kind, FColor> noad_to_colour;
    map<ESkoarNoad::Kind, FTextBlockStyle> noad_to_style;


    
    explicit FSkoarStyle() {
        // --------
// Toke Ids
// --------
toke_to_id[ESkoarToke::AlCoda]          = "SyntaxHighlight.Skoar.Toke.AlCoda";
toke_to_id[ESkoarToke::AlFine]          = "SyntaxHighlight.Skoar.Toke.AlFine";
toke_to_id[ESkoarToke::AlSegno]         = "SyntaxHighlight.Skoar.Toke.AlSegno";
toke_to_id[ESkoarToke::ArgSpec]         = "SyntaxHighlight.Skoar.Toke.ArgSpec";
toke_to_id[ESkoarToke::AssOp]           = "SyntaxHighlight.Skoar.Toke.AssOp";
toke_to_id[ESkoarToke::Bars]            = "SyntaxHighlight.Skoar.Toke.Bars";
toke_to_id[ESkoarToke::BooleanOp]       = "SyntaxHighlight.Skoar.Toke.BooleanOp";
toke_to_id[ESkoarToke::Caesura]         = "SyntaxHighlight.Skoar.Toke.Caesura";
toke_to_id[ESkoarToke::Carrot]          = "SyntaxHighlight.Skoar.Toke.Carrot";
toke_to_id[ESkoarToke::Choard]          = "SyntaxHighlight.Skoar.Toke.Choard";
toke_to_id[ESkoarToke::Coda]            = "SyntaxHighlight.Skoar.Toke.Coda";
toke_to_id[ESkoarToke::Comment]         = "SyntaxHighlight.Skoar.Toke.Comment";
toke_to_id[ESkoarToke::CondE]           = "SyntaxHighlight.Skoar.Toke.CondE";
toke_to_id[ESkoarToke::CondIf]          = "SyntaxHighlight.Skoar.Toke.CondIf";
toke_to_id[ESkoarToke::CondS]           = "SyntaxHighlight.Skoar.Toke.CondS";
toke_to_id[ESkoarToke::Crap]            = "SyntaxHighlight.Skoar.Toke.Crap";
toke_to_id[ESkoarToke::Crotchets]       = "SyntaxHighlight.Skoar.Toke.Crotchets";
toke_to_id[ESkoarToke::DaCapo]          = "SyntaxHighlight.Skoar.Toke.DaCapo";
toke_to_id[ESkoarToke::DalSegno]        = "SyntaxHighlight.Skoar.Toke.DalSegno";
toke_to_id[ESkoarToke::Deref]           = "SyntaxHighlight.Skoar.Toke.Deref";
toke_to_id[ESkoarToke::DynFP]           = "SyntaxHighlight.Skoar.Toke.DynFP";
toke_to_id[ESkoarToke::DynForte]        = "SyntaxHighlight.Skoar.Toke.DynForte";
toke_to_id[ESkoarToke::DynPiano]        = "SyntaxHighlight.Skoar.Toke.DynPiano";
toke_to_id[ESkoarToke::DynSFZ]          = "SyntaxHighlight.Skoar.Toke.DynSFZ";
toke_to_id[ESkoarToke::Eighths]         = "SyntaxHighlight.Skoar.Toke.Eighths";
toke_to_id[ESkoarToke::Fairy]           = "SyntaxHighlight.Skoar.Toke.Fairy";
toke_to_id[ESkoarToke::False]           = "SyntaxHighlight.Skoar.Toke.False";
toke_to_id[ESkoarToke::Fine]            = "SyntaxHighlight.Skoar.Toke.Fine";
toke_to_id[ESkoarToke::Float]           = "SyntaxHighlight.Skoar.Toke.Float";
toke_to_id[ESkoarToke::Freq]            = "SyntaxHighlight.Skoar.Toke.Freq";
toke_to_id[ESkoarToke::HashLevel]       = "SyntaxHighlight.Skoar.Toke.HashLevel";
toke_to_id[ESkoarToke::Int]             = "SyntaxHighlight.Skoar.Toke.Int";
toke_to_id[ESkoarToke::LWing]           = "SyntaxHighlight.Skoar.Toke.LWing";
toke_to_id[ESkoarToke::ListE]           = "SyntaxHighlight.Skoar.Toke.ListE";
toke_to_id[ESkoarToke::ListS]           = "SyntaxHighlight.Skoar.Toke.ListS";
toke_to_id[ESkoarToke::ListSep]         = "SyntaxHighlight.Skoar.Toke.ListSep";
toke_to_id[ESkoarToke::Loco]            = "SyntaxHighlight.Skoar.Toke.Loco";
toke_to_id[ESkoarToke::LoopE]           = "SyntaxHighlight.Skoar.Toke.LoopE";
toke_to_id[ESkoarToke::LoopS]           = "SyntaxHighlight.Skoar.Toke.LoopS";
toke_to_id[ESkoarToke::LoopSep]         = "SyntaxHighlight.Skoar.Toke.LoopSep";
toke_to_id[ESkoarToke::MathOp]          = "SyntaxHighlight.Skoar.Toke.MathOp";
toke_to_id[ESkoarToke::Meter]           = "SyntaxHighlight.Skoar.Toke.Meter";
toke_to_id[ESkoarToke::MsgName]         = "SyntaxHighlight.Skoar.Toke.MsgName";
toke_to_id[ESkoarToke::MsgNameWithArgs] = "SyntaxHighlight.Skoar.Toke.MsgNameWithArgs";
toke_to_id[ESkoarToke::MsgOp]           = "SyntaxHighlight.Skoar.Toke.MsgOp";
toke_to_id[ESkoarToke::NamedNoat]       = "SyntaxHighlight.Skoar.Toke.NamedNoat";
toke_to_id[ESkoarToke::Newline]         = "SyntaxHighlight.Skoar.Toke.Newline";
toke_to_id[ESkoarToke::Nosey]           = "SyntaxHighlight.Skoar.Toke.Nosey";
toke_to_id[ESkoarToke::OctaveShift]     = "SyntaxHighlight.Skoar.Toke.OctaveShift";
toke_to_id[ESkoarToke::OttavaA]         = "SyntaxHighlight.Skoar.Toke.OttavaA";
toke_to_id[ESkoarToke::OttavaB]         = "SyntaxHighlight.Skoar.Toke.OttavaB";
toke_to_id[ESkoarToke::PedalDown]       = "SyntaxHighlight.Skoar.Toke.PedalDown";
toke_to_id[ESkoarToke::PedalUp]         = "SyntaxHighlight.Skoar.Toke.PedalUp";
toke_to_id[ESkoarToke::Portamento]      = "SyntaxHighlight.Skoar.Toke.Portamento";
toke_to_id[ESkoarToke::Quarters]        = "SyntaxHighlight.Skoar.Toke.Quarters";
toke_to_id[ESkoarToke::Quavers]         = "SyntaxHighlight.Skoar.Toke.Quavers";
toke_to_id[ESkoarToke::QuindicesimaA]   = "SyntaxHighlight.Skoar.Toke.QuindicesimaA";
toke_to_id[ESkoarToke::QuindicesimaB]   = "SyntaxHighlight.Skoar.Toke.QuindicesimaB";
toke_to_id[ESkoarToke::RWing]           = "SyntaxHighlight.Skoar.Toke.RWing";
toke_to_id[ESkoarToke::Rep]             = "SyntaxHighlight.Skoar.Toke.Rep";
toke_to_id[ESkoarToke::Segno]           = "SyntaxHighlight.Skoar.Toke.Segno";
toke_to_id[ESkoarToke::Semicolon]       = "SyntaxHighlight.Skoar.Toke.Semicolon";
toke_to_id[ESkoarToke::SkoarpionEnd]    = "SyntaxHighlight.Skoar.Toke.SkoarpionEnd";
toke_to_id[ESkoarToke::SkoarpionSep]    = "SyntaxHighlight.Skoar.Toke.SkoarpionSep";
toke_to_id[ESkoarToke::SkoarpionStart]  = "SyntaxHighlight.Skoar.Toke.SkoarpionStart";
toke_to_id[ESkoarToke::Slash]           = "SyntaxHighlight.Skoar.Toke.Slash";
toke_to_id[ESkoarToke::String]          = "SyntaxHighlight.Skoar.Toke.String";
toke_to_id[ESkoarToke::Symbol]          = "SyntaxHighlight.Skoar.Toke.Symbol";
toke_to_id[ESkoarToke::SymbolName]      = "SyntaxHighlight.Skoar.Toke.SymbolName";
toke_to_id[ESkoarToke::Times]           = "SyntaxHighlight.Skoar.Toke.Times";
toke_to_id[ESkoarToke::True]            = "SyntaxHighlight.Skoar.Toke.True";
toke_to_id[ESkoarToke::Tuplet]          = "SyntaxHighlight.Skoar.Toke.Tuplet";
toke_to_id[ESkoarToke::Voice]           = "SyntaxHighlight.Skoar.Toke.Voice";
toke_to_id[ESkoarToke::Volta]           = "SyntaxHighlight.Skoar.Toke.Volta";

// --------
// Noad Ids
// --------
noad_to_id[ESkoarNoad::al_x]                 = "SyntaxHighlight.Skoar.Noad.al_x";
noad_to_id[ESkoarNoad::assignment]           = "SyntaxHighlight.Skoar.Noad.assignment";
noad_to_id[ESkoarNoad::beat]                 = "SyntaxHighlight.Skoar.Noad.beat";
noad_to_id[ESkoarNoad::boolean]              = "SyntaxHighlight.Skoar.Noad.boolean";
noad_to_id[ESkoarNoad::branch]               = "SyntaxHighlight.Skoar.Noad.branch";
noad_to_id[ESkoarNoad::branches]             = "SyntaxHighlight.Skoar.Noad.branches";
noad_to_id[ESkoarNoad::coda]                 = "SyntaxHighlight.Skoar.Noad.coda";
noad_to_id[ESkoarNoad::cond_else]            = "SyntaxHighlight.Skoar.Noad.cond_else";
noad_to_id[ESkoarNoad::cond_if]              = "SyntaxHighlight.Skoar.Noad.cond_if";
noad_to_id[ESkoarNoad::cond_ifs]             = "SyntaxHighlight.Skoar.Noad.cond_ifs";
noad_to_id[ESkoarNoad::cond_ifs_suffix]      = "SyntaxHighlight.Skoar.Noad.cond_ifs_suffix";
noad_to_id[ESkoarNoad::conditional]          = "SyntaxHighlight.Skoar.Noad.conditional";
noad_to_id[ESkoarNoad::cthulhu]              = "SyntaxHighlight.Skoar.Noad.cthulhu";
noad_to_id[ESkoarNoad::cthulhu_prime]        = "SyntaxHighlight.Skoar.Noad.cthulhu_prime";
noad_to_id[ESkoarNoad::dal_goto]             = "SyntaxHighlight.Skoar.Noad.dal_goto";
noad_to_id[ESkoarNoad::deref]                = "SyntaxHighlight.Skoar.Noad.deref";
noad_to_id[ESkoarNoad::deref_prime]          = "SyntaxHighlight.Skoar.Noad.deref_prime";
noad_to_id[ESkoarNoad::dynamic]              = "SyntaxHighlight.Skoar.Noad.dynamic";
noad_to_id[ESkoarNoad::expr]                 = "SyntaxHighlight.Skoar.Noad.expr";
noad_to_id[ESkoarNoad::expr_prime]           = "SyntaxHighlight.Skoar.Noad.expr_prime";
noad_to_id[ESkoarNoad::if_body]              = "SyntaxHighlight.Skoar.Noad.if_body";
noad_to_id[ESkoarNoad::listy]                = "SyntaxHighlight.Skoar.Noad.listy";
noad_to_id[ESkoarNoad::listy_entries]        = "SyntaxHighlight.Skoar.Noad.listy_entries";
noad_to_id[ESkoarNoad::listy_suffix]         = "SyntaxHighlight.Skoar.Noad.listy_suffix";
noad_to_id[ESkoarNoad::loop]                 = "SyntaxHighlight.Skoar.Noad.loop";
noad_to_id[ESkoarNoad::loop_body]            = "SyntaxHighlight.Skoar.Noad.loop_body";
noad_to_id[ESkoarNoad::loop_condition]       = "SyntaxHighlight.Skoar.Noad.loop_condition";
noad_to_id[ESkoarNoad::marker]               = "SyntaxHighlight.Skoar.Noad.marker";
noad_to_id[ESkoarNoad::math]                 = "SyntaxHighlight.Skoar.Noad.math";
noad_to_id[ESkoarNoad::moar_listy_entries]   = "SyntaxHighlight.Skoar.Noad.moar_listy_entries";
noad_to_id[ESkoarNoad::msg]                  = "SyntaxHighlight.Skoar.Noad.msg";
noad_to_id[ESkoarNoad::msg_chain_node]       = "SyntaxHighlight.Skoar.Noad.msg_chain_node";
noad_to_id[ESkoarNoad::msgable]              = "SyntaxHighlight.Skoar.Noad.msgable";
noad_to_id[ESkoarNoad::musical_keyword]      = "SyntaxHighlight.Skoar.Noad.musical_keyword";
noad_to_id[ESkoarNoad::musical_keyword_misc] = "SyntaxHighlight.Skoar.Noad.musical_keyword_misc";
noad_to_id[ESkoarNoad::nouny]                = "SyntaxHighlight.Skoar.Noad.nouny";
noad_to_id[ESkoarNoad::nouny_literal]        = "SyntaxHighlight.Skoar.Noad.nouny_literal";
noad_to_id[ESkoarNoad::opt_arg_spec]         = "SyntaxHighlight.Skoar.Noad.opt_arg_spec";
noad_to_id[ESkoarNoad::optional_al_coda]     = "SyntaxHighlight.Skoar.Noad.optional_al_coda";
noad_to_id[ESkoarNoad::optional_voice]       = "SyntaxHighlight.Skoar.Noad.optional_voice";
noad_to_id[ESkoarNoad::ottavas]              = "SyntaxHighlight.Skoar.Noad.ottavas";
noad_to_id[ESkoarNoad::pedally]              = "SyntaxHighlight.Skoar.Noad.pedally";
noad_to_id[ESkoarNoad::phrases]              = "SyntaxHighlight.Skoar.Noad.phrases";
noad_to_id[ESkoarNoad::phrasey]              = "SyntaxHighlight.Skoar.Noad.phrasey";
noad_to_id[ESkoarNoad::settable]             = "SyntaxHighlight.Skoar.Noad.settable";
noad_to_id[ESkoarNoad::skoar]                = "SyntaxHighlight.Skoar.Noad.skoar";
noad_to_id[ESkoarNoad::skoarpion]            = "SyntaxHighlight.Skoar.Noad.skoarpion";
noad_to_id[ESkoarNoad::skrp_lines]           = "SyntaxHighlight.Skoar.Noad.skrp_lines";
noad_to_id[ESkoarNoad::skrp_moar_lines]      = "SyntaxHighlight.Skoar.Noad.skrp_moar_lines";
noad_to_id[ESkoarNoad::skrp_sig]             = "SyntaxHighlight.Skoar.Noad.skrp_sig";
noad_to_id[ESkoarNoad::skrp_suffix]          = "SyntaxHighlight.Skoar.Noad.skrp_suffix";
noad_to_id[ESkoarNoad::times]                = "SyntaxHighlight.Skoar.Noad.times";

// ------------
// Toke Colours
// ------------
toke_to_colour[ESkoarToke::AlCoda]          = FColor::FromHex(L"CCCCCCFF");
toke_to_colour[ESkoarToke::AlFine]          = FColor::FromHex(L"CCCCCCFF");
toke_to_colour[ESkoarToke::AlSegno]         = FColor::FromHex(L"CCCCCCFF");
toke_to_colour[ESkoarToke::ArgSpec]         = FColor::FromHex(L"CCCCCCFF");
toke_to_colour[ESkoarToke::AssOp]           = FColor::FromHex(L"CCCCCCFF");
toke_to_colour[ESkoarToke::Bars]            = FColor::FromHex(L"CCCCCCFF");
toke_to_colour[ESkoarToke::BooleanOp]       = FColor::FromHex(L"CCCCCCFF");
toke_to_colour[ESkoarToke::Caesura]         = FColor::FromHex(L"CCCCCCFF");
toke_to_colour[ESkoarToke::Carrot]          = FColor::FromHex(L"CCCCCCFF");
toke_to_colour[ESkoarToke::Choard]          = FColor::FromHex(L"CCCCCCFF");
toke_to_colour[ESkoarToke::Coda]            = FColor::FromHex(L"CCCCCCFF");
toke_to_colour[ESkoarToke::Comment]         = FColor::FromHex(L"CCCCCCFF");
toke_to_colour[ESkoarToke::CondE]           = FColor::FromHex(L"CCCCCCFF");
toke_to_colour[ESkoarToke::CondIf]          = FColor::FromHex(L"CCCCCCFF");
toke_to_colour[ESkoarToke::CondS]           = FColor::FromHex(L"CCCCCCFF");
toke_to_colour[ESkoarToke::Crap]            = FColor::FromHex(L"CCCCCCFF");
toke_to_colour[ESkoarToke::Crotchets]       = FColor::FromHex(L"CCCCCCFF");
toke_to_colour[ESkoarToke::DaCapo]          = FColor::FromHex(L"CCCCCCFF");
toke_to_colour[ESkoarToke::DalSegno]        = FColor::FromHex(L"CCCCCCFF");
toke_to_colour[ESkoarToke::Deref]           = FColor::FromHex(L"CCCCCCFF");
toke_to_colour[ESkoarToke::DynFP]           = FColor::FromHex(L"CCCCCCFF");
toke_to_colour[ESkoarToke::DynForte]        = FColor::FromHex(L"CCCCCCFF");
toke_to_colour[ESkoarToke::DynPiano]        = FColor::FromHex(L"CCCCCCFF");
toke_to_colour[ESkoarToke::DynSFZ]          = FColor::FromHex(L"CCCCCCFF");
toke_to_colour[ESkoarToke::Eighths]         = FColor::FromHex(L"CCCCCCFF");
toke_to_colour[ESkoarToke::Fairy]           = FColor::FromHex(L"CCCCCCFF");
toke_to_colour[ESkoarToke::False]           = FColor::FromHex(L"CCCCCCFF");
toke_to_colour[ESkoarToke::Fine]            = FColor::FromHex(L"CCCCCCFF");
toke_to_colour[ESkoarToke::Float]           = FColor::FromHex(L"CCCCCCFF");
toke_to_colour[ESkoarToke::Freq]            = FColor::FromHex(L"CCCCCCFF");
toke_to_colour[ESkoarToke::HashLevel]       = FColor::FromHex(L"CCCCCCFF");
toke_to_colour[ESkoarToke::Int]             = FColor::FromHex(L"CCCCCCFF");
toke_to_colour[ESkoarToke::LWing]           = FColor::FromHex(L"CCCCCCFF");
toke_to_colour[ESkoarToke::ListE]           = FColor::FromHex(L"CCCCCCFF");
toke_to_colour[ESkoarToke::ListS]           = FColor::FromHex(L"CCCCCCFF");
toke_to_colour[ESkoarToke::ListSep]         = FColor::FromHex(L"CCCCCCFF");
toke_to_colour[ESkoarToke::Loco]            = FColor::FromHex(L"CCCCCCFF");
toke_to_colour[ESkoarToke::LoopE]           = FColor::FromHex(L"CCCCCCFF");
toke_to_colour[ESkoarToke::LoopS]           = FColor::FromHex(L"CCCCCCFF");
toke_to_colour[ESkoarToke::LoopSep]         = FColor::FromHex(L"CCCCCCFF");
toke_to_colour[ESkoarToke::MathOp]          = FColor::FromHex(L"CCCCCCFF");
toke_to_colour[ESkoarToke::Meter]           = FColor::FromHex(L"CCCCCCFF");
toke_to_colour[ESkoarToke::MsgName]         = FColor::FromHex(L"CCCCCCFF");
toke_to_colour[ESkoarToke::MsgNameWithArgs] = FColor::FromHex(L"CCCCCCFF");
toke_to_colour[ESkoarToke::MsgOp]           = FColor::FromHex(L"CCCCCCFF");
toke_to_colour[ESkoarToke::NamedNoat]       = FColor::FromHex(L"CCCCCCFF");
toke_to_colour[ESkoarToke::Newline]         = FColor::FromHex(L"CCCCCCFF");
toke_to_colour[ESkoarToke::Nosey]           = FColor::FromHex(L"CCCCCCFF");
toke_to_colour[ESkoarToke::OctaveShift]     = FColor::FromHex(L"CCCCCCFF");
toke_to_colour[ESkoarToke::OttavaA]         = FColor::FromHex(L"CCCCCCFF");
toke_to_colour[ESkoarToke::OttavaB]         = FColor::FromHex(L"CCCCCCFF");
toke_to_colour[ESkoarToke::PedalDown]       = FColor::FromHex(L"CCCCCCFF");
toke_to_colour[ESkoarToke::PedalUp]         = FColor::FromHex(L"CCCCCCFF");
toke_to_colour[ESkoarToke::Portamento]      = FColor::FromHex(L"CCCCCCFF");
toke_to_colour[ESkoarToke::Quarters]        = FColor::FromHex(L"CCCCCCFF");
toke_to_colour[ESkoarToke::Quavers]         = FColor::FromHex(L"CCCCCCFF");
toke_to_colour[ESkoarToke::QuindicesimaA]   = FColor::FromHex(L"CCCCCCFF");
toke_to_colour[ESkoarToke::QuindicesimaB]   = FColor::FromHex(L"CCCCCCFF");
toke_to_colour[ESkoarToke::RWing]           = FColor::FromHex(L"CCCCCCFF");
toke_to_colour[ESkoarToke::Rep]             = FColor::FromHex(L"CCCCCCFF");
toke_to_colour[ESkoarToke::Segno]           = FColor::FromHex(L"CCCCCCFF");
toke_to_colour[ESkoarToke::Semicolon]       = FColor::FromHex(L"CCCCCCFF");
toke_to_colour[ESkoarToke::SkoarpionEnd]    = FColor::FromHex(L"CCCCCCFF");
toke_to_colour[ESkoarToke::SkoarpionSep]    = FColor::FromHex(L"CCCCCCFF");
toke_to_colour[ESkoarToke::SkoarpionStart]  = FColor::FromHex(L"CCCCCCFF");
toke_to_colour[ESkoarToke::Slash]           = FColor::FromHex(L"CCCCCCFF");
toke_to_colour[ESkoarToke::String]          = FColor::FromHex(L"CCCCCCFF");
toke_to_colour[ESkoarToke::Symbol]          = FColor::FromHex(L"CCCCCCFF");
toke_to_colour[ESkoarToke::SymbolName]      = FColor::FromHex(L"CCCCCCFF");
toke_to_colour[ESkoarToke::Times]           = FColor::FromHex(L"CCCCCCFF");
toke_to_colour[ESkoarToke::True]            = FColor::FromHex(L"CCCCCCFF");
toke_to_colour[ESkoarToke::Tuplet]          = FColor::FromHex(L"CCCCCCFF");
toke_to_colour[ESkoarToke::Voice]           = FColor::FromHex(L"CCCCCCFF");
toke_to_colour[ESkoarToke::Volta]           = FColor::FromHex(L"CCCCCCFF");

// ------------
// Noad Colours
// ------------
noad_to_colour[ESkoarNoad::al_x]                 = FColor::FromHex(L"CCCCCC05");
noad_to_colour[ESkoarNoad::assignment]           = FColor::FromHex(L"CCCCCC05");
noad_to_colour[ESkoarNoad::beat]                 = FColor::FromHex(L"CCCCCC05");
noad_to_colour[ESkoarNoad::boolean]              = FColor::FromHex(L"CCCCCC05");
noad_to_colour[ESkoarNoad::branch]               = FColor::FromHex(L"CCCCCC05");
noad_to_colour[ESkoarNoad::branches]             = FColor::FromHex(L"CCCCCC05");
noad_to_colour[ESkoarNoad::coda]                 = FColor::FromHex(L"CCCCCC05");
noad_to_colour[ESkoarNoad::cond_else]            = FColor::FromHex(L"CCCCCC05");
noad_to_colour[ESkoarNoad::cond_if]              = FColor::FromHex(L"CCCCCC05");
noad_to_colour[ESkoarNoad::cond_ifs]             = FColor::FromHex(L"CCCCCC05");
noad_to_colour[ESkoarNoad::cond_ifs_suffix]      = FColor::FromHex(L"CCCCCC05");
noad_to_colour[ESkoarNoad::conditional]          = FColor::FromHex(L"CCCCCC05");
noad_to_colour[ESkoarNoad::cthulhu]              = FColor::FromHex(L"CCCCCC05");
noad_to_colour[ESkoarNoad::cthulhu_prime]        = FColor::FromHex(L"CCCCCC05");
noad_to_colour[ESkoarNoad::dal_goto]             = FColor::FromHex(L"CCCCCC05");
noad_to_colour[ESkoarNoad::deref]                = FColor::FromHex(L"CCCCCC05");
noad_to_colour[ESkoarNoad::deref_prime]          = FColor::FromHex(L"CCCCCC05");
noad_to_colour[ESkoarNoad::dynamic]              = FColor::FromHex(L"CCCCCC05");
noad_to_colour[ESkoarNoad::expr]                 = FColor::FromHex(L"CCCCCC05");
noad_to_colour[ESkoarNoad::expr_prime]           = FColor::FromHex(L"CCCCCC05");
noad_to_colour[ESkoarNoad::if_body]              = FColor::FromHex(L"CCCCCC05");
noad_to_colour[ESkoarNoad::listy]                = FColor::FromHex(L"CCCCCC05");
noad_to_colour[ESkoarNoad::listy_entries]        = FColor::FromHex(L"CCCCCC05");
noad_to_colour[ESkoarNoad::listy_suffix]         = FColor::FromHex(L"CCCCCC05");
noad_to_colour[ESkoarNoad::loop]                 = FColor::FromHex(L"CCCCCC05");
noad_to_colour[ESkoarNoad::loop_body]            = FColor::FromHex(L"CCCCCC05");
noad_to_colour[ESkoarNoad::loop_condition]       = FColor::FromHex(L"CCCCCC05");
noad_to_colour[ESkoarNoad::marker]               = FColor::FromHex(L"CCCCCC05");
noad_to_colour[ESkoarNoad::math]                 = FColor::FromHex(L"CCCCCC05");
noad_to_colour[ESkoarNoad::moar_listy_entries]   = FColor::FromHex(L"CCCCCC05");
noad_to_colour[ESkoarNoad::msg]                  = FColor::FromHex(L"CCCCCC05");
noad_to_colour[ESkoarNoad::msg_chain_node]       = FColor::FromHex(L"CCCCCC05");
noad_to_colour[ESkoarNoad::msgable]              = FColor::FromHex(L"CCCCCC05");
noad_to_colour[ESkoarNoad::musical_keyword]      = FColor::FromHex(L"CCCCCC05");
noad_to_colour[ESkoarNoad::musical_keyword_misc] = FColor::FromHex(L"CCCCCC05");
noad_to_colour[ESkoarNoad::nouny]                = FColor::FromHex(L"CCCCCC05");
noad_to_colour[ESkoarNoad::nouny_literal]        = FColor::FromHex(L"CCCCCC05");
noad_to_colour[ESkoarNoad::opt_arg_spec]         = FColor::FromHex(L"CCCCCC05");
noad_to_colour[ESkoarNoad::optional_al_coda]     = FColor::FromHex(L"CCCCCC05");
noad_to_colour[ESkoarNoad::optional_voice]       = FColor::FromHex(L"CCCCCC05");
noad_to_colour[ESkoarNoad::ottavas]              = FColor::FromHex(L"CCCCCC05");
noad_to_colour[ESkoarNoad::pedally]              = FColor::FromHex(L"CCCCCC05");
noad_to_colour[ESkoarNoad::phrases]              = FColor::FromHex(L"CCCCCC05");
noad_to_colour[ESkoarNoad::phrasey]              = FColor::FromHex(L"CCCCCC05");
noad_to_colour[ESkoarNoad::settable]             = FColor::FromHex(L"CCCCCC05");
noad_to_colour[ESkoarNoad::skoar]                = FColor::FromHex(L"CCCCCC05");
noad_to_colour[ESkoarNoad::skoarpion]            = FColor::FromHex(L"CCCCCC05");
noad_to_colour[ESkoarNoad::skrp_lines]           = FColor::FromHex(L"CCCCCC05");
noad_to_colour[ESkoarNoad::skrp_moar_lines]      = FColor::FromHex(L"CCCCCC05");
noad_to_colour[ESkoarNoad::skrp_sig]             = FColor::FromHex(L"CCCCCC05");
noad_to_colour[ESkoarNoad::skrp_suffix]          = FColor::FromHex(L"CCCCCC05");
noad_to_colour[ESkoarNoad::times]                = FColor::FromHex(L"CCCCCC05");

    }

    void init_styles() {
    
// -----------
// Toke Styles
// -----------
toke_to_style[ESkoarToke::AlCoda]          = FSkoarEditorStyle::Get().GetWidgetStyle<FTextBlockStyle>("SyntaxHighlight.Skoar.Toke.AlCoda");
toke_to_style[ESkoarToke::AlFine]          = FSkoarEditorStyle::Get().GetWidgetStyle<FTextBlockStyle>("SyntaxHighlight.Skoar.Toke.AlFine");
toke_to_style[ESkoarToke::AlSegno]         = FSkoarEditorStyle::Get().GetWidgetStyle<FTextBlockStyle>("SyntaxHighlight.Skoar.Toke.AlSegno");
toke_to_style[ESkoarToke::ArgSpec]         = FSkoarEditorStyle::Get().GetWidgetStyle<FTextBlockStyle>("SyntaxHighlight.Skoar.Toke.ArgSpec");
toke_to_style[ESkoarToke::AssOp]           = FSkoarEditorStyle::Get().GetWidgetStyle<FTextBlockStyle>("SyntaxHighlight.Skoar.Toke.AssOp");
toke_to_style[ESkoarToke::Bars]            = FSkoarEditorStyle::Get().GetWidgetStyle<FTextBlockStyle>("SyntaxHighlight.Skoar.Toke.Bars");
toke_to_style[ESkoarToke::BooleanOp]       = FSkoarEditorStyle::Get().GetWidgetStyle<FTextBlockStyle>("SyntaxHighlight.Skoar.Toke.BooleanOp");
toke_to_style[ESkoarToke::Caesura]         = FSkoarEditorStyle::Get().GetWidgetStyle<FTextBlockStyle>("SyntaxHighlight.Skoar.Toke.Caesura");
toke_to_style[ESkoarToke::Carrot]          = FSkoarEditorStyle::Get().GetWidgetStyle<FTextBlockStyle>("SyntaxHighlight.Skoar.Toke.Carrot");
toke_to_style[ESkoarToke::Choard]          = FSkoarEditorStyle::Get().GetWidgetStyle<FTextBlockStyle>("SyntaxHighlight.Skoar.Toke.Choard");
toke_to_style[ESkoarToke::Coda]            = FSkoarEditorStyle::Get().GetWidgetStyle<FTextBlockStyle>("SyntaxHighlight.Skoar.Toke.Coda");
toke_to_style[ESkoarToke::Comment]         = FSkoarEditorStyle::Get().GetWidgetStyle<FTextBlockStyle>("SyntaxHighlight.Skoar.Toke.Comment");
toke_to_style[ESkoarToke::CondE]           = FSkoarEditorStyle::Get().GetWidgetStyle<FTextBlockStyle>("SyntaxHighlight.Skoar.Toke.CondE");
toke_to_style[ESkoarToke::CondIf]          = FSkoarEditorStyle::Get().GetWidgetStyle<FTextBlockStyle>("SyntaxHighlight.Skoar.Toke.CondIf");
toke_to_style[ESkoarToke::CondS]           = FSkoarEditorStyle::Get().GetWidgetStyle<FTextBlockStyle>("SyntaxHighlight.Skoar.Toke.CondS");
toke_to_style[ESkoarToke::Crap]            = FSkoarEditorStyle::Get().GetWidgetStyle<FTextBlockStyle>("SyntaxHighlight.Skoar.Toke.Crap");
toke_to_style[ESkoarToke::Crotchets]       = FSkoarEditorStyle::Get().GetWidgetStyle<FTextBlockStyle>("SyntaxHighlight.Skoar.Toke.Crotchets");
toke_to_style[ESkoarToke::DaCapo]          = FSkoarEditorStyle::Get().GetWidgetStyle<FTextBlockStyle>("SyntaxHighlight.Skoar.Toke.DaCapo");
toke_to_style[ESkoarToke::DalSegno]        = FSkoarEditorStyle::Get().GetWidgetStyle<FTextBlockStyle>("SyntaxHighlight.Skoar.Toke.DalSegno");
toke_to_style[ESkoarToke::Deref]           = FSkoarEditorStyle::Get().GetWidgetStyle<FTextBlockStyle>("SyntaxHighlight.Skoar.Toke.Deref");
toke_to_style[ESkoarToke::DynFP]           = FSkoarEditorStyle::Get().GetWidgetStyle<FTextBlockStyle>("SyntaxHighlight.Skoar.Toke.DynFP");
toke_to_style[ESkoarToke::DynForte]        = FSkoarEditorStyle::Get().GetWidgetStyle<FTextBlockStyle>("SyntaxHighlight.Skoar.Toke.DynForte");
toke_to_style[ESkoarToke::DynPiano]        = FSkoarEditorStyle::Get().GetWidgetStyle<FTextBlockStyle>("SyntaxHighlight.Skoar.Toke.DynPiano");
toke_to_style[ESkoarToke::DynSFZ]          = FSkoarEditorStyle::Get().GetWidgetStyle<FTextBlockStyle>("SyntaxHighlight.Skoar.Toke.DynSFZ");
toke_to_style[ESkoarToke::Eighths]         = FSkoarEditorStyle::Get().GetWidgetStyle<FTextBlockStyle>("SyntaxHighlight.Skoar.Toke.Eighths");
toke_to_style[ESkoarToke::Fairy]           = FSkoarEditorStyle::Get().GetWidgetStyle<FTextBlockStyle>("SyntaxHighlight.Skoar.Toke.Fairy");
toke_to_style[ESkoarToke::False]           = FSkoarEditorStyle::Get().GetWidgetStyle<FTextBlockStyle>("SyntaxHighlight.Skoar.Toke.False");
toke_to_style[ESkoarToke::Fine]            = FSkoarEditorStyle::Get().GetWidgetStyle<FTextBlockStyle>("SyntaxHighlight.Skoar.Toke.Fine");
toke_to_style[ESkoarToke::Float]           = FSkoarEditorStyle::Get().GetWidgetStyle<FTextBlockStyle>("SyntaxHighlight.Skoar.Toke.Float");
toke_to_style[ESkoarToke::Freq]            = FSkoarEditorStyle::Get().GetWidgetStyle<FTextBlockStyle>("SyntaxHighlight.Skoar.Toke.Freq");
toke_to_style[ESkoarToke::HashLevel]       = FSkoarEditorStyle::Get().GetWidgetStyle<FTextBlockStyle>("SyntaxHighlight.Skoar.Toke.HashLevel");
toke_to_style[ESkoarToke::Int]             = FSkoarEditorStyle::Get().GetWidgetStyle<FTextBlockStyle>("SyntaxHighlight.Skoar.Toke.Int");
toke_to_style[ESkoarToke::LWing]           = FSkoarEditorStyle::Get().GetWidgetStyle<FTextBlockStyle>("SyntaxHighlight.Skoar.Toke.LWing");
toke_to_style[ESkoarToke::ListE]           = FSkoarEditorStyle::Get().GetWidgetStyle<FTextBlockStyle>("SyntaxHighlight.Skoar.Toke.ListE");
toke_to_style[ESkoarToke::ListS]           = FSkoarEditorStyle::Get().GetWidgetStyle<FTextBlockStyle>("SyntaxHighlight.Skoar.Toke.ListS");
toke_to_style[ESkoarToke::ListSep]         = FSkoarEditorStyle::Get().GetWidgetStyle<FTextBlockStyle>("SyntaxHighlight.Skoar.Toke.ListSep");
toke_to_style[ESkoarToke::Loco]            = FSkoarEditorStyle::Get().GetWidgetStyle<FTextBlockStyle>("SyntaxHighlight.Skoar.Toke.Loco");
toke_to_style[ESkoarToke::LoopE]           = FSkoarEditorStyle::Get().GetWidgetStyle<FTextBlockStyle>("SyntaxHighlight.Skoar.Toke.LoopE");
toke_to_style[ESkoarToke::LoopS]           = FSkoarEditorStyle::Get().GetWidgetStyle<FTextBlockStyle>("SyntaxHighlight.Skoar.Toke.LoopS");
toke_to_style[ESkoarToke::LoopSep]         = FSkoarEditorStyle::Get().GetWidgetStyle<FTextBlockStyle>("SyntaxHighlight.Skoar.Toke.LoopSep");
toke_to_style[ESkoarToke::MathOp]          = FSkoarEditorStyle::Get().GetWidgetStyle<FTextBlockStyle>("SyntaxHighlight.Skoar.Toke.MathOp");
toke_to_style[ESkoarToke::Meter]           = FSkoarEditorStyle::Get().GetWidgetStyle<FTextBlockStyle>("SyntaxHighlight.Skoar.Toke.Meter");
toke_to_style[ESkoarToke::MsgName]         = FSkoarEditorStyle::Get().GetWidgetStyle<FTextBlockStyle>("SyntaxHighlight.Skoar.Toke.MsgName");
toke_to_style[ESkoarToke::MsgNameWithArgs] = FSkoarEditorStyle::Get().GetWidgetStyle<FTextBlockStyle>("SyntaxHighlight.Skoar.Toke.MsgNameWithArgs");
toke_to_style[ESkoarToke::MsgOp]           = FSkoarEditorStyle::Get().GetWidgetStyle<FTextBlockStyle>("SyntaxHighlight.Skoar.Toke.MsgOp");
toke_to_style[ESkoarToke::NamedNoat]       = FSkoarEditorStyle::Get().GetWidgetStyle<FTextBlockStyle>("SyntaxHighlight.Skoar.Toke.NamedNoat");
toke_to_style[ESkoarToke::Newline]         = FSkoarEditorStyle::Get().GetWidgetStyle<FTextBlockStyle>("SyntaxHighlight.Skoar.Toke.Newline");
toke_to_style[ESkoarToke::Nosey]           = FSkoarEditorStyle::Get().GetWidgetStyle<FTextBlockStyle>("SyntaxHighlight.Skoar.Toke.Nosey");
toke_to_style[ESkoarToke::OctaveShift]     = FSkoarEditorStyle::Get().GetWidgetStyle<FTextBlockStyle>("SyntaxHighlight.Skoar.Toke.OctaveShift");
toke_to_style[ESkoarToke::OttavaA]         = FSkoarEditorStyle::Get().GetWidgetStyle<FTextBlockStyle>("SyntaxHighlight.Skoar.Toke.OttavaA");
toke_to_style[ESkoarToke::OttavaB]         = FSkoarEditorStyle::Get().GetWidgetStyle<FTextBlockStyle>("SyntaxHighlight.Skoar.Toke.OttavaB");
toke_to_style[ESkoarToke::PedalDown]       = FSkoarEditorStyle::Get().GetWidgetStyle<FTextBlockStyle>("SyntaxHighlight.Skoar.Toke.PedalDown");
toke_to_style[ESkoarToke::PedalUp]         = FSkoarEditorStyle::Get().GetWidgetStyle<FTextBlockStyle>("SyntaxHighlight.Skoar.Toke.PedalUp");
toke_to_style[ESkoarToke::Portamento]      = FSkoarEditorStyle::Get().GetWidgetStyle<FTextBlockStyle>("SyntaxHighlight.Skoar.Toke.Portamento");
toke_to_style[ESkoarToke::Quarters]        = FSkoarEditorStyle::Get().GetWidgetStyle<FTextBlockStyle>("SyntaxHighlight.Skoar.Toke.Quarters");
toke_to_style[ESkoarToke::Quavers]         = FSkoarEditorStyle::Get().GetWidgetStyle<FTextBlockStyle>("SyntaxHighlight.Skoar.Toke.Quavers");
toke_to_style[ESkoarToke::QuindicesimaA]   = FSkoarEditorStyle::Get().GetWidgetStyle<FTextBlockStyle>("SyntaxHighlight.Skoar.Toke.QuindicesimaA");
toke_to_style[ESkoarToke::QuindicesimaB]   = FSkoarEditorStyle::Get().GetWidgetStyle<FTextBlockStyle>("SyntaxHighlight.Skoar.Toke.QuindicesimaB");
toke_to_style[ESkoarToke::RWing]           = FSkoarEditorStyle::Get().GetWidgetStyle<FTextBlockStyle>("SyntaxHighlight.Skoar.Toke.RWing");
toke_to_style[ESkoarToke::Rep]             = FSkoarEditorStyle::Get().GetWidgetStyle<FTextBlockStyle>("SyntaxHighlight.Skoar.Toke.Rep");
toke_to_style[ESkoarToke::Segno]           = FSkoarEditorStyle::Get().GetWidgetStyle<FTextBlockStyle>("SyntaxHighlight.Skoar.Toke.Segno");
toke_to_style[ESkoarToke::Semicolon]       = FSkoarEditorStyle::Get().GetWidgetStyle<FTextBlockStyle>("SyntaxHighlight.Skoar.Toke.Semicolon");
toke_to_style[ESkoarToke::SkoarpionEnd]    = FSkoarEditorStyle::Get().GetWidgetStyle<FTextBlockStyle>("SyntaxHighlight.Skoar.Toke.SkoarpionEnd");
toke_to_style[ESkoarToke::SkoarpionSep]    = FSkoarEditorStyle::Get().GetWidgetStyle<FTextBlockStyle>("SyntaxHighlight.Skoar.Toke.SkoarpionSep");
toke_to_style[ESkoarToke::SkoarpionStart]  = FSkoarEditorStyle::Get().GetWidgetStyle<FTextBlockStyle>("SyntaxHighlight.Skoar.Toke.SkoarpionStart");
toke_to_style[ESkoarToke::Slash]           = FSkoarEditorStyle::Get().GetWidgetStyle<FTextBlockStyle>("SyntaxHighlight.Skoar.Toke.Slash");
toke_to_style[ESkoarToke::String]          = FSkoarEditorStyle::Get().GetWidgetStyle<FTextBlockStyle>("SyntaxHighlight.Skoar.Toke.String");
toke_to_style[ESkoarToke::Symbol]          = FSkoarEditorStyle::Get().GetWidgetStyle<FTextBlockStyle>("SyntaxHighlight.Skoar.Toke.Symbol");
toke_to_style[ESkoarToke::SymbolName]      = FSkoarEditorStyle::Get().GetWidgetStyle<FTextBlockStyle>("SyntaxHighlight.Skoar.Toke.SymbolName");
toke_to_style[ESkoarToke::Times]           = FSkoarEditorStyle::Get().GetWidgetStyle<FTextBlockStyle>("SyntaxHighlight.Skoar.Toke.Times");
toke_to_style[ESkoarToke::True]            = FSkoarEditorStyle::Get().GetWidgetStyle<FTextBlockStyle>("SyntaxHighlight.Skoar.Toke.True");
toke_to_style[ESkoarToke::Tuplet]          = FSkoarEditorStyle::Get().GetWidgetStyle<FTextBlockStyle>("SyntaxHighlight.Skoar.Toke.Tuplet");
toke_to_style[ESkoarToke::Voice]           = FSkoarEditorStyle::Get().GetWidgetStyle<FTextBlockStyle>("SyntaxHighlight.Skoar.Toke.Voice");
toke_to_style[ESkoarToke::Volta]           = FSkoarEditorStyle::Get().GetWidgetStyle<FTextBlockStyle>("SyntaxHighlight.Skoar.Toke.Volta");

// -----------
// Noad Styles
// -----------
noad_to_style[ESkoarNoad::al_x]                 = FSkoarEditorStyle::Get().GetWidgetStyle<FTextBlockStyle>("SyntaxHighlight.Skoar.Noad.al_x");
noad_to_style[ESkoarNoad::assignment]           = FSkoarEditorStyle::Get().GetWidgetStyle<FTextBlockStyle>("SyntaxHighlight.Skoar.Noad.assignment");
noad_to_style[ESkoarNoad::beat]                 = FSkoarEditorStyle::Get().GetWidgetStyle<FTextBlockStyle>("SyntaxHighlight.Skoar.Noad.beat");
noad_to_style[ESkoarNoad::boolean]              = FSkoarEditorStyle::Get().GetWidgetStyle<FTextBlockStyle>("SyntaxHighlight.Skoar.Noad.boolean");
noad_to_style[ESkoarNoad::branch]               = FSkoarEditorStyle::Get().GetWidgetStyle<FTextBlockStyle>("SyntaxHighlight.Skoar.Noad.branch");
noad_to_style[ESkoarNoad::branches]             = FSkoarEditorStyle::Get().GetWidgetStyle<FTextBlockStyle>("SyntaxHighlight.Skoar.Noad.branches");
noad_to_style[ESkoarNoad::coda]                 = FSkoarEditorStyle::Get().GetWidgetStyle<FTextBlockStyle>("SyntaxHighlight.Skoar.Noad.coda");
noad_to_style[ESkoarNoad::cond_else]            = FSkoarEditorStyle::Get().GetWidgetStyle<FTextBlockStyle>("SyntaxHighlight.Skoar.Noad.cond_else");
noad_to_style[ESkoarNoad::cond_if]              = FSkoarEditorStyle::Get().GetWidgetStyle<FTextBlockStyle>("SyntaxHighlight.Skoar.Noad.cond_if");
noad_to_style[ESkoarNoad::cond_ifs]             = FSkoarEditorStyle::Get().GetWidgetStyle<FTextBlockStyle>("SyntaxHighlight.Skoar.Noad.cond_ifs");
noad_to_style[ESkoarNoad::cond_ifs_suffix]      = FSkoarEditorStyle::Get().GetWidgetStyle<FTextBlockStyle>("SyntaxHighlight.Skoar.Noad.cond_ifs_suffix");
noad_to_style[ESkoarNoad::conditional]          = FSkoarEditorStyle::Get().GetWidgetStyle<FTextBlockStyle>("SyntaxHighlight.Skoar.Noad.conditional");
noad_to_style[ESkoarNoad::cthulhu]              = FSkoarEditorStyle::Get().GetWidgetStyle<FTextBlockStyle>("SyntaxHighlight.Skoar.Noad.cthulhu");
noad_to_style[ESkoarNoad::cthulhu_prime]        = FSkoarEditorStyle::Get().GetWidgetStyle<FTextBlockStyle>("SyntaxHighlight.Skoar.Noad.cthulhu_prime");
noad_to_style[ESkoarNoad::dal_goto]             = FSkoarEditorStyle::Get().GetWidgetStyle<FTextBlockStyle>("SyntaxHighlight.Skoar.Noad.dal_goto");
noad_to_style[ESkoarNoad::deref]                = FSkoarEditorStyle::Get().GetWidgetStyle<FTextBlockStyle>("SyntaxHighlight.Skoar.Noad.deref");
noad_to_style[ESkoarNoad::deref_prime]          = FSkoarEditorStyle::Get().GetWidgetStyle<FTextBlockStyle>("SyntaxHighlight.Skoar.Noad.deref_prime");
noad_to_style[ESkoarNoad::dynamic]              = FSkoarEditorStyle::Get().GetWidgetStyle<FTextBlockStyle>("SyntaxHighlight.Skoar.Noad.dynamic");
noad_to_style[ESkoarNoad::expr]                 = FSkoarEditorStyle::Get().GetWidgetStyle<FTextBlockStyle>("SyntaxHighlight.Skoar.Noad.expr");
noad_to_style[ESkoarNoad::expr_prime]           = FSkoarEditorStyle::Get().GetWidgetStyle<FTextBlockStyle>("SyntaxHighlight.Skoar.Noad.expr_prime");
noad_to_style[ESkoarNoad::if_body]              = FSkoarEditorStyle::Get().GetWidgetStyle<FTextBlockStyle>("SyntaxHighlight.Skoar.Noad.if_body");
noad_to_style[ESkoarNoad::listy]                = FSkoarEditorStyle::Get().GetWidgetStyle<FTextBlockStyle>("SyntaxHighlight.Skoar.Noad.listy");
noad_to_style[ESkoarNoad::listy_entries]        = FSkoarEditorStyle::Get().GetWidgetStyle<FTextBlockStyle>("SyntaxHighlight.Skoar.Noad.listy_entries");
noad_to_style[ESkoarNoad::listy_suffix]         = FSkoarEditorStyle::Get().GetWidgetStyle<FTextBlockStyle>("SyntaxHighlight.Skoar.Noad.listy_suffix");
noad_to_style[ESkoarNoad::loop]                 = FSkoarEditorStyle::Get().GetWidgetStyle<FTextBlockStyle>("SyntaxHighlight.Skoar.Noad.loop");
noad_to_style[ESkoarNoad::loop_body]            = FSkoarEditorStyle::Get().GetWidgetStyle<FTextBlockStyle>("SyntaxHighlight.Skoar.Noad.loop_body");
noad_to_style[ESkoarNoad::loop_condition]       = FSkoarEditorStyle::Get().GetWidgetStyle<FTextBlockStyle>("SyntaxHighlight.Skoar.Noad.loop_condition");
noad_to_style[ESkoarNoad::marker]               = FSkoarEditorStyle::Get().GetWidgetStyle<FTextBlockStyle>("SyntaxHighlight.Skoar.Noad.marker");
noad_to_style[ESkoarNoad::math]                 = FSkoarEditorStyle::Get().GetWidgetStyle<FTextBlockStyle>("SyntaxHighlight.Skoar.Noad.math");
noad_to_style[ESkoarNoad::moar_listy_entries]   = FSkoarEditorStyle::Get().GetWidgetStyle<FTextBlockStyle>("SyntaxHighlight.Skoar.Noad.moar_listy_entries");
noad_to_style[ESkoarNoad::msg]                  = FSkoarEditorStyle::Get().GetWidgetStyle<FTextBlockStyle>("SyntaxHighlight.Skoar.Noad.msg");
noad_to_style[ESkoarNoad::msg_chain_node]       = FSkoarEditorStyle::Get().GetWidgetStyle<FTextBlockStyle>("SyntaxHighlight.Skoar.Noad.msg_chain_node");
noad_to_style[ESkoarNoad::msgable]              = FSkoarEditorStyle::Get().GetWidgetStyle<FTextBlockStyle>("SyntaxHighlight.Skoar.Noad.msgable");
noad_to_style[ESkoarNoad::musical_keyword]      = FSkoarEditorStyle::Get().GetWidgetStyle<FTextBlockStyle>("SyntaxHighlight.Skoar.Noad.musical_keyword");
noad_to_style[ESkoarNoad::musical_keyword_misc] = FSkoarEditorStyle::Get().GetWidgetStyle<FTextBlockStyle>("SyntaxHighlight.Skoar.Noad.musical_keyword_misc");
noad_to_style[ESkoarNoad::nouny]                = FSkoarEditorStyle::Get().GetWidgetStyle<FTextBlockStyle>("SyntaxHighlight.Skoar.Noad.nouny");
noad_to_style[ESkoarNoad::nouny_literal]        = FSkoarEditorStyle::Get().GetWidgetStyle<FTextBlockStyle>("SyntaxHighlight.Skoar.Noad.nouny_literal");
noad_to_style[ESkoarNoad::opt_arg_spec]         = FSkoarEditorStyle::Get().GetWidgetStyle<FTextBlockStyle>("SyntaxHighlight.Skoar.Noad.opt_arg_spec");
noad_to_style[ESkoarNoad::optional_al_coda]     = FSkoarEditorStyle::Get().GetWidgetStyle<FTextBlockStyle>("SyntaxHighlight.Skoar.Noad.optional_al_coda");
noad_to_style[ESkoarNoad::optional_voice]       = FSkoarEditorStyle::Get().GetWidgetStyle<FTextBlockStyle>("SyntaxHighlight.Skoar.Noad.optional_voice");
noad_to_style[ESkoarNoad::ottavas]              = FSkoarEditorStyle::Get().GetWidgetStyle<FTextBlockStyle>("SyntaxHighlight.Skoar.Noad.ottavas");
noad_to_style[ESkoarNoad::pedally]              = FSkoarEditorStyle::Get().GetWidgetStyle<FTextBlockStyle>("SyntaxHighlight.Skoar.Noad.pedally");
noad_to_style[ESkoarNoad::phrases]              = FSkoarEditorStyle::Get().GetWidgetStyle<FTextBlockStyle>("SyntaxHighlight.Skoar.Noad.phrases");
noad_to_style[ESkoarNoad::phrasey]              = FSkoarEditorStyle::Get().GetWidgetStyle<FTextBlockStyle>("SyntaxHighlight.Skoar.Noad.phrasey");
noad_to_style[ESkoarNoad::settable]             = FSkoarEditorStyle::Get().GetWidgetStyle<FTextBlockStyle>("SyntaxHighlight.Skoar.Noad.settable");
noad_to_style[ESkoarNoad::skoar]                = FSkoarEditorStyle::Get().GetWidgetStyle<FTextBlockStyle>("SyntaxHighlight.Skoar.Noad.skoar");
noad_to_style[ESkoarNoad::skoarpion]            = FSkoarEditorStyle::Get().GetWidgetStyle<FTextBlockStyle>("SyntaxHighlight.Skoar.Noad.skoarpion");
noad_to_style[ESkoarNoad::skrp_lines]           = FSkoarEditorStyle::Get().GetWidgetStyle<FTextBlockStyle>("SyntaxHighlight.Skoar.Noad.skrp_lines");
noad_to_style[ESkoarNoad::skrp_moar_lines]      = FSkoarEditorStyle::Get().GetWidgetStyle<FTextBlockStyle>("SyntaxHighlight.Skoar.Noad.skrp_moar_lines");
noad_to_style[ESkoarNoad::skrp_sig]             = FSkoarEditorStyle::Get().GetWidgetStyle<FTextBlockStyle>("SyntaxHighlight.Skoar.Noad.skrp_sig");
noad_to_style[ESkoarNoad::skrp_suffix]          = FSkoarEditorStyle::Get().GetWidgetStyle<FTextBlockStyle>("SyntaxHighlight.Skoar.Noad.skrp_suffix");
noad_to_style[ESkoarNoad::times]                = FSkoarEditorStyle::Get().GetWidgetStyle<FTextBlockStyle>("SyntaxHighlight.Skoar.Noad.times");

    }

    void each(StyleSpell spell) {
        each_toke(spell);        
        each_noad(spell);        
    }

    void each_toke(StyleSpell spell) {
        for (auto kv: toke_to_id) {
            auto eKind = kv.first;
            auto id = kv.second;
            auto colour = toke_to_colour[eKind];
            spell(id, colour);        
        }
    }
    
    void each_noad(StyleSpell spell) {
        for (auto kv: noad_to_id) {
            auto eKind = kv.first;
            auto id = kv.second;
            auto colour = noad_to_colour[eKind];
            spell(id, colour);        
        }
    }

};
        