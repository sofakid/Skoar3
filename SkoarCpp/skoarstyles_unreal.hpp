// =========================================================================================
// skoarstyles_unreal.hpp.cpp - Generated by Code_Cpp_Lexer on 2015-08-07 15:08:40 for C++14
// =========================================================================================
#pragma once
#include "skoar_public.hpp"
#include "CodeEditorStyle.h"

typedef function<void(std::string &, FColor &)> StyleSpell;

class FSkoarStyle {
    
public:

    map<ESkoarToke::Kind, std::string> toke_to_id;
    map<ESkoarToke::Kind, FColor> toke_to_colour;
    map<ESkoarToke::Kind, FTextBlockStyle> toke_to_style;
    
    map<ESkoarNoad::Kind, std::string> noad_to_id;
    map<ESkoarNoad::Kind, FColor> noad_to_colour;
    map<ESkoarNoad::Kind, FTextBlockStyle> noad_to_style;


    
    explicit FSkoarStyle() {
        // --------
// Toke Ids
// --------
toke_to_id[ESkoarToke::AlCoda]          = "SyntaxHighlight.Skoar.Toke.AlCoda";
toke_to_id[ESkoarToke::AlFine]          = "SyntaxHighlight.Skoar.Toke.AlFine";
toke_to_id[ESkoarToke::AlSegno]         = "SyntaxHighlight.Skoar.Toke.AlSegno";
toke_to_id[ESkoarToke::ArgSpec]         = "SyntaxHighlight.Skoar.Toke.ArgSpec";
toke_to_id[ESkoarToke::AssOp]           = "SyntaxHighlight.Skoar.Toke.AssOp";
toke_to_id[ESkoarToke::Bars]            = "SyntaxHighlight.Skoar.Toke.Bars";
toke_to_id[ESkoarToke::BooleanOp]       = "SyntaxHighlight.Skoar.Toke.BooleanOp";
toke_to_id[ESkoarToke::Caesura]         = "SyntaxHighlight.Skoar.Toke.Caesura";
toke_to_id[ESkoarToke::Carrot]          = "SyntaxHighlight.Skoar.Toke.Carrot";
toke_to_id[ESkoarToke::Choard]          = "SyntaxHighlight.Skoar.Toke.Choard";
toke_to_id[ESkoarToke::Coda]            = "SyntaxHighlight.Skoar.Toke.Coda";
toke_to_id[ESkoarToke::Comment]         = "SyntaxHighlight.Skoar.Toke.Comment";
toke_to_id[ESkoarToke::CondE]           = "SyntaxHighlight.Skoar.Toke.CondE";
toke_to_id[ESkoarToke::CondIf]          = "SyntaxHighlight.Skoar.Toke.CondIf";
toke_to_id[ESkoarToke::CondS]           = "SyntaxHighlight.Skoar.Toke.CondS";
toke_to_id[ESkoarToke::Crap]            = "SyntaxHighlight.Skoar.Toke.Crap";
toke_to_id[ESkoarToke::Crotchets]       = "SyntaxHighlight.Skoar.Toke.Crotchets";
toke_to_id[ESkoarToke::DaCapo]          = "SyntaxHighlight.Skoar.Toke.DaCapo";
toke_to_id[ESkoarToke::DalSegno]        = "SyntaxHighlight.Skoar.Toke.DalSegno";
toke_to_id[ESkoarToke::Deref]           = "SyntaxHighlight.Skoar.Toke.Deref";
toke_to_id[ESkoarToke::DynFP]           = "SyntaxHighlight.Skoar.Toke.DynFP";
toke_to_id[ESkoarToke::DynForte]        = "SyntaxHighlight.Skoar.Toke.DynForte";
toke_to_id[ESkoarToke::DynPiano]        = "SyntaxHighlight.Skoar.Toke.DynPiano";
toke_to_id[ESkoarToke::DynSFZ]          = "SyntaxHighlight.Skoar.Toke.DynSFZ";
toke_to_id[ESkoarToke::Eighths]         = "SyntaxHighlight.Skoar.Toke.Eighths";
toke_to_id[ESkoarToke::Fairy]           = "SyntaxHighlight.Skoar.Toke.Fairy";
toke_to_id[ESkoarToke::False]           = "SyntaxHighlight.Skoar.Toke.False";
toke_to_id[ESkoarToke::Fine]            = "SyntaxHighlight.Skoar.Toke.Fine";
toke_to_id[ESkoarToke::Float]           = "SyntaxHighlight.Skoar.Toke.Float";
toke_to_id[ESkoarToke::Freq]            = "SyntaxHighlight.Skoar.Toke.Freq";
toke_to_id[ESkoarToke::HashLevel]       = "SyntaxHighlight.Skoar.Toke.HashLevel";
toke_to_id[ESkoarToke::Int]             = "SyntaxHighlight.Skoar.Toke.Int";
toke_to_id[ESkoarToke::LWing]           = "SyntaxHighlight.Skoar.Toke.LWing";
toke_to_id[ESkoarToke::ListE]           = "SyntaxHighlight.Skoar.Toke.ListE";
toke_to_id[ESkoarToke::ListS]           = "SyntaxHighlight.Skoar.Toke.ListS";
toke_to_id[ESkoarToke::ListSep]         = "SyntaxHighlight.Skoar.Toke.ListSep";
toke_to_id[ESkoarToke::Loco]            = "SyntaxHighlight.Skoar.Toke.Loco";
toke_to_id[ESkoarToke::LoopE]           = "SyntaxHighlight.Skoar.Toke.LoopE";
toke_to_id[ESkoarToke::LoopS]           = "SyntaxHighlight.Skoar.Toke.LoopS";
toke_to_id[ESkoarToke::LoopSep]         = "SyntaxHighlight.Skoar.Toke.LoopSep";
toke_to_id[ESkoarToke::MathOp]          = "SyntaxHighlight.Skoar.Toke.MathOp";
toke_to_id[ESkoarToke::Meter]           = "SyntaxHighlight.Skoar.Toke.Meter";
toke_to_id[ESkoarToke::MsgName]         = "SyntaxHighlight.Skoar.Toke.MsgName";
toke_to_id[ESkoarToke::MsgNameWithArgs] = "SyntaxHighlight.Skoar.Toke.MsgNameWithArgs";
toke_to_id[ESkoarToke::MsgOp]           = "SyntaxHighlight.Skoar.Toke.MsgOp";
toke_to_id[ESkoarToke::NamedNoat]       = "SyntaxHighlight.Skoar.Toke.NamedNoat";
toke_to_id[ESkoarToke::Newline]         = "SyntaxHighlight.Skoar.Toke.Newline";
toke_to_id[ESkoarToke::Nosey]           = "SyntaxHighlight.Skoar.Toke.Nosey";
toke_to_id[ESkoarToke::OctaveShift]     = "SyntaxHighlight.Skoar.Toke.OctaveShift";
toke_to_id[ESkoarToke::OttavaA]         = "SyntaxHighlight.Skoar.Toke.OttavaA";
toke_to_id[ESkoarToke::OttavaB]         = "SyntaxHighlight.Skoar.Toke.OttavaB";
toke_to_id[ESkoarToke::PedalDown]       = "SyntaxHighlight.Skoar.Toke.PedalDown";
toke_to_id[ESkoarToke::PedalUp]         = "SyntaxHighlight.Skoar.Toke.PedalUp";
toke_to_id[ESkoarToke::Portamento]      = "SyntaxHighlight.Skoar.Toke.Portamento";
toke_to_id[ESkoarToke::Quarters]        = "SyntaxHighlight.Skoar.Toke.Quarters";
toke_to_id[ESkoarToke::Quavers]         = "SyntaxHighlight.Skoar.Toke.Quavers";
toke_to_id[ESkoarToke::QuindicesimaA]   = "SyntaxHighlight.Skoar.Toke.QuindicesimaA";
toke_to_id[ESkoarToke::QuindicesimaB]   = "SyntaxHighlight.Skoar.Toke.QuindicesimaB";
toke_to_id[ESkoarToke::RWing]           = "SyntaxHighlight.Skoar.Toke.RWing";
toke_to_id[ESkoarToke::Rep]             = "SyntaxHighlight.Skoar.Toke.Rep";
toke_to_id[ESkoarToke::Segno]           = "SyntaxHighlight.Skoar.Toke.Segno";
toke_to_id[ESkoarToke::Semicolon]       = "SyntaxHighlight.Skoar.Toke.Semicolon";
toke_to_id[ESkoarToke::SkoarpionEnd]    = "SyntaxHighlight.Skoar.Toke.SkoarpionEnd";
toke_to_id[ESkoarToke::SkoarpionSep]    = "SyntaxHighlight.Skoar.Toke.SkoarpionSep";
toke_to_id[ESkoarToke::SkoarpionStart]  = "SyntaxHighlight.Skoar.Toke.SkoarpionStart";
toke_to_id[ESkoarToke::Slash]           = "SyntaxHighlight.Skoar.Toke.Slash";
toke_to_id[ESkoarToke::String]          = "SyntaxHighlight.Skoar.Toke.String";
toke_to_id[ESkoarToke::Symbol]          = "SyntaxHighlight.Skoar.Toke.Symbol";
toke_to_id[ESkoarToke::SymbolName]      = "SyntaxHighlight.Skoar.Toke.SymbolName";
toke_to_id[ESkoarToke::Times]           = "SyntaxHighlight.Skoar.Toke.Times";
toke_to_id[ESkoarToke::True]            = "SyntaxHighlight.Skoar.Toke.True";
toke_to_id[ESkoarToke::Tuplet]          = "SyntaxHighlight.Skoar.Toke.Tuplet";
toke_to_id[ESkoarToke::Voice]           = "SyntaxHighlight.Skoar.Toke.Voice";
toke_to_id[ESkoarToke::Volta]           = "SyntaxHighlight.Skoar.Toke.Volta";

// --------
// Noad Ids
// --------
noad_to_id[ESkoarNoad::al_x]                 = "SyntaxHighlight.Skoar.Noad.al_x";
noad_to_id[ESkoarNoad::assignment]           = "SyntaxHighlight.Skoar.Noad.assignment";
noad_to_id[ESkoarNoad::beat]                 = "SyntaxHighlight.Skoar.Noad.beat";
noad_to_id[ESkoarNoad::boolean]              = "SyntaxHighlight.Skoar.Noad.boolean";
noad_to_id[ESkoarNoad::branch]               = "SyntaxHighlight.Skoar.Noad.branch";
noad_to_id[ESkoarNoad::branches]             = "SyntaxHighlight.Skoar.Noad.branches";
noad_to_id[ESkoarNoad::coda]                 = "SyntaxHighlight.Skoar.Noad.coda";
noad_to_id[ESkoarNoad::cond_else]            = "SyntaxHighlight.Skoar.Noad.cond_else";
noad_to_id[ESkoarNoad::cond_if]              = "SyntaxHighlight.Skoar.Noad.cond_if";
noad_to_id[ESkoarNoad::cond_ifs]             = "SyntaxHighlight.Skoar.Noad.cond_ifs";
noad_to_id[ESkoarNoad::cond_ifs_suffix]      = "SyntaxHighlight.Skoar.Noad.cond_ifs_suffix";
noad_to_id[ESkoarNoad::conditional]          = "SyntaxHighlight.Skoar.Noad.conditional";
noad_to_id[ESkoarNoad::cthulhu]              = "SyntaxHighlight.Skoar.Noad.cthulhu";
noad_to_id[ESkoarNoad::cthulhu_prime]        = "SyntaxHighlight.Skoar.Noad.cthulhu_prime";
noad_to_id[ESkoarNoad::dal_goto]             = "SyntaxHighlight.Skoar.Noad.dal_goto";
noad_to_id[ESkoarNoad::deref]                = "SyntaxHighlight.Skoar.Noad.deref";
noad_to_id[ESkoarNoad::deref_prime]          = "SyntaxHighlight.Skoar.Noad.deref_prime";
noad_to_id[ESkoarNoad::dynamic]              = "SyntaxHighlight.Skoar.Noad.dynamic";
noad_to_id[ESkoarNoad::expr]                 = "SyntaxHighlight.Skoar.Noad.expr";
noad_to_id[ESkoarNoad::expr_prime]           = "SyntaxHighlight.Skoar.Noad.expr_prime";
noad_to_id[ESkoarNoad::if_body]              = "SyntaxHighlight.Skoar.Noad.if_body";
noad_to_id[ESkoarNoad::listy]                = "SyntaxHighlight.Skoar.Noad.listy";
noad_to_id[ESkoarNoad::listy_entries]        = "SyntaxHighlight.Skoar.Noad.listy_entries";
noad_to_id[ESkoarNoad::listy_suffix]         = "SyntaxHighlight.Skoar.Noad.listy_suffix";
noad_to_id[ESkoarNoad::loop]                 = "SyntaxHighlight.Skoar.Noad.loop";
noad_to_id[ESkoarNoad::loop_body]            = "SyntaxHighlight.Skoar.Noad.loop_body";
noad_to_id[ESkoarNoad::loop_condition]       = "SyntaxHighlight.Skoar.Noad.loop_condition";
noad_to_id[ESkoarNoad::marker]               = "SyntaxHighlight.Skoar.Noad.marker";
noad_to_id[ESkoarNoad::math]                 = "SyntaxHighlight.Skoar.Noad.math";
noad_to_id[ESkoarNoad::moar_listy_entries]   = "SyntaxHighlight.Skoar.Noad.moar_listy_entries";
noad_to_id[ESkoarNoad::msg]                  = "SyntaxHighlight.Skoar.Noad.msg";
noad_to_id[ESkoarNoad::msg_chain_node]       = "SyntaxHighlight.Skoar.Noad.msg_chain_node";
noad_to_id[ESkoarNoad::msgable]              = "SyntaxHighlight.Skoar.Noad.msgable";
noad_to_id[ESkoarNoad::musical_keyword]      = "SyntaxHighlight.Skoar.Noad.musical_keyword";
noad_to_id[ESkoarNoad::musical_keyword_misc] = "SyntaxHighlight.Skoar.Noad.musical_keyword_misc";
noad_to_id[ESkoarNoad::nouny]                = "SyntaxHighlight.Skoar.Noad.nouny";
noad_to_id[ESkoarNoad::nouny_literal]        = "SyntaxHighlight.Skoar.Noad.nouny_literal";
noad_to_id[ESkoarNoad::opt_arg_spec]         = "SyntaxHighlight.Skoar.Noad.opt_arg_spec";
noad_to_id[ESkoarNoad::optional_al_coda]     = "SyntaxHighlight.Skoar.Noad.optional_al_coda";
noad_to_id[ESkoarNoad::optional_voice]       = "SyntaxHighlight.Skoar.Noad.optional_voice";
noad_to_id[ESkoarNoad::ottavas]              = "SyntaxHighlight.Skoar.Noad.ottavas";
noad_to_id[ESkoarNoad::pedally]              = "SyntaxHighlight.Skoar.Noad.pedally";
noad_to_id[ESkoarNoad::phrases]              = "SyntaxHighlight.Skoar.Noad.phrases";
noad_to_id[ESkoarNoad::phrasey]              = "SyntaxHighlight.Skoar.Noad.phrasey";
noad_to_id[ESkoarNoad::settable]             = "SyntaxHighlight.Skoar.Noad.settable";
noad_to_id[ESkoarNoad::skoar]                = "SyntaxHighlight.Skoar.Noad.skoar";
noad_to_id[ESkoarNoad::skoarpion]            = "SyntaxHighlight.Skoar.Noad.skoarpion";
noad_to_id[ESkoarNoad::skrp_lines]           = "SyntaxHighlight.Skoar.Noad.skrp_lines";
noad_to_id[ESkoarNoad::skrp_moar_lines]      = "SyntaxHighlight.Skoar.Noad.skrp_moar_lines";
noad_to_id[ESkoarNoad::skrp_sig]             = "SyntaxHighlight.Skoar.Noad.skrp_sig";
noad_to_id[ESkoarNoad::skrp_suffix]          = "SyntaxHighlight.Skoar.Noad.skrp_suffix";
noad_to_id[ESkoarNoad::times]                = "SyntaxHighlight.Skoar.Noad.times";

// ------------
// Toke Colours
// ------------
toke_to_colour[ESkoarToke::AlCoda]          = FColor::FromHex(L"CCDDFFFF");
toke_to_colour[ESkoarToke::AlFine]          = FColor::FromHex(L"CCDDFFFF");
toke_to_colour[ESkoarToke::AlSegno]         = FColor::FromHex(L"CCDDFFFF");
toke_to_colour[ESkoarToke::Coda] = FColor::FromHex(L"CCDDFFFF");
toke_to_colour[ESkoarToke::Segno] = FColor::FromHex(L"CCDDFFFF");
toke_to_colour[ESkoarToke::DaCapo] = FColor::FromHex(L"CCDDFFFF");
toke_to_colour[ESkoarToke::DalSegno] = FColor::FromHex(L"CCDDFFFF");
toke_to_colour[ESkoarToke::Fine] = FColor::FromHex(L"CCDDFFFF");

toke_to_colour[ESkoarToke::ArgSpec]         = FColor::FromHex(L"#0e9e0e");

toke_to_colour[ESkoarToke::Bars] = FColor::FromHex(L"9DB562FF");

toke_to_colour[ESkoarToke::AssOp]           = FColor::FromHex(L"B340B1FF");

toke_to_colour[ESkoarToke::BooleanOp]       = FColor::FromHex(L"B340B1FF");
toke_to_colour[ESkoarToke::Caesura]         = FColor::FromHex(L"B340B1FF");
toke_to_colour[ESkoarToke::Carrot]          = FColor::FromHex(L"B340B1FF");

toke_to_colour[ESkoarToke::Comment]         = FColor::FromHex(L"5E5B55FF");

toke_to_colour[ESkoarToke::CondE]           = FColor::FromHex(L"B59D62FF");
toke_to_colour[ESkoarToke::CondIf]          = FColor::FromHex(L"B59D62FF");
toke_to_colour[ESkoarToke::CondS]           = FColor::FromHex(L"B59D62FF");


toke_to_colour[ESkoarToke::Crotchets]       = FColor::FromHex(L"1EB1FAFF");
toke_to_colour[ESkoarToke::Eighths] = FColor::FromHex(L"1EB1FAFF");
toke_to_colour[ESkoarToke::Quarters] = FColor::FromHex(L"1EB1FAFF");
toke_to_colour[ESkoarToke::Quavers] = FColor::FromHex(L"1EB1FAFF");

toke_to_colour[ESkoarToke::Deref]           = FColor::FromHex(L"B340B1FF");

toke_to_colour[ESkoarToke::DynFP]           = FColor::FromHex(L"998877FF");
toke_to_colour[ESkoarToke::DynForte]        = FColor::FromHex(L"998877FF");
toke_to_colour[ESkoarToke::DynPiano]        = FColor::FromHex(L"998877FF");
toke_to_colour[ESkoarToke::DynSFZ]          = FColor::FromHex(L"998877FF");

toke_to_colour[ESkoarToke::Fairy]           = FColor::FromHex(L"FF99FFFF");

toke_to_colour[ESkoarToke::True] = FColor::FromHex(L"FFF82EFF");
toke_to_colour[ESkoarToke::Crap] = FColor::FromHex(L"FFF82EFF");
toke_to_colour[ESkoarToke::False]           = FColor::FromHex(L"FFF82EFF");
toke_to_colour[ESkoarToke::Int] = FColor::FromHex(L"FFF82EFF");
toke_to_colour[ESkoarToke::Float] = FColor::FromHex(L"FFF82EFF");
toke_to_colour[ESkoarToke::Freq]            = FColor::FromHex(L"FFF82EFF");
toke_to_colour[ESkoarToke::HashLevel]       = FColor::FromHex(L"FFF82EFF");


toke_to_colour[ESkoarToke::ListE]           = FColor::FromHex(L"6699EEFF");
toke_to_colour[ESkoarToke::ListS]           = FColor::FromHex(L"6699EEFF");
toke_to_colour[ESkoarToke::ListSep]         = FColor::FromHex(L"6699EEFF");

toke_to_colour[ESkoarToke::LoopE]           = FColor::FromHex(L"77EE77FF");
toke_to_colour[ESkoarToke::LoopS]           = FColor::FromHex(L"77EE77FF");
toke_to_colour[ESkoarToke::LoopSep]         = FColor::FromHex(L"77EE77FF");
toke_to_colour[ESkoarToke::Times]			= FColor::FromHex(L"FFF82EFF");

toke_to_colour[ESkoarToke::MathOp]          = FColor::FromHex(L"B340B1FF");


toke_to_colour[ESkoarToke::Meter]           = FColor::FromHex(L"CCCCCCFF");

toke_to_colour[ESkoarToke::MsgName]         = FColor::FromHex(L"888888FF");
toke_to_colour[ESkoarToke::MsgNameWithArgs] = FColor::FromHex(L"888888FF");

toke_to_colour[ESkoarToke::MsgOp]           = FColor::FromHex(L"888888FF");

toke_to_colour[ESkoarToke::NamedNoat]       = FColor::FromHex(L"1EFA67FF");
toke_to_colour[ESkoarToke::Choard] = FColor::FromHex(L"1EFA67FF");

toke_to_colour[ESkoarToke::Newline]         = FColor::FromHex(L"CCCCCCFF");

toke_to_colour[ESkoarToke::OctaveShift]     = FColor::FromHex(L"999999FF");
toke_to_colour[ESkoarToke::OttavaA]         = FColor::FromHex(L"999999FF");
toke_to_colour[ESkoarToke::OttavaB]         = FColor::FromHex(L"999999FF");
toke_to_colour[ESkoarToke::QuindicesimaA] = FColor::FromHex(L"999999FF");
toke_to_colour[ESkoarToke::QuindicesimaB] = FColor::FromHex(L"999999FF");
toke_to_colour[ESkoarToke::Loco] = FColor::FromHex(L"999999FF");

toke_to_colour[ESkoarToke::PedalDown]       = FColor::FromHex(L"CCCCCCFF");
toke_to_colour[ESkoarToke::PedalUp]         = FColor::FromHex(L"CCCCCCFF");

toke_to_colour[ESkoarToke::Portamento]      = FColor::FromHex(L"CCCCCCFF");

toke_to_colour[ESkoarToke::LWing] = FColor::FromHex(L"FF2E2EFF");
toke_to_colour[ESkoarToke::Nosey] = FColor::FromHex(L"FF2E2EFF");
toke_to_colour[ESkoarToke::Semicolon] = FColor::FromHex(L"FF2E2EFF");
toke_to_colour[ESkoarToke::RWing] = FColor::FromHex(L"FF2E2EFF");

toke_to_colour[ESkoarToke::Rep]             = FColor::FromHex(L"CCCCCCFF");

toke_to_colour[ESkoarToke::SkoarpionEnd]    = FColor::FromHex(L"9DB562FF");
toke_to_colour[ESkoarToke::SkoarpionSep]    = FColor::FromHex(L"9DB562FF");
toke_to_colour[ESkoarToke::SkoarpionStart]  = FColor::FromHex(L"9DB562FF");

toke_to_colour[ESkoarToke::Slash]           = FColor::FromHex(L"CCCCCCFF");

toke_to_colour[ESkoarToke::String]          = FColor::FromHex(L"B58962FF");

toke_to_colour[ESkoarToke::Symbol]          = FColor::FromHex(L"EEEECCFF");
toke_to_colour[ESkoarToke::SymbolName]      = FColor::FromHex(L"EEEECCFF");

toke_to_colour[ESkoarToke::Tuplet]          = FColor::FromHex(L"CCCCCCFF");

toke_to_colour[ESkoarToke::Voice]           = FColor::FromHex(L"0B6BD9FF");

toke_to_colour[ESkoarToke::Volta]           = FColor::FromHex(L"CCCCCCFF");

// ------------
// Noad Colours
// ------------
noad_to_colour[ESkoarNoad::al_x]                 = FColor::FromHex(L"CCCCCC05");
noad_to_colour[ESkoarNoad::assignment]           = FColor::FromHex(L"CCCCCC05");
noad_to_colour[ESkoarNoad::beat]                 = FColor::FromHex(L"CCCCCC05");
noad_to_colour[ESkoarNoad::boolean]              = FColor::FromHex(L"CCCCCC05");
noad_to_colour[ESkoarNoad::branch]               = FColor::FromHex(L"CCCCCC05");
noad_to_colour[ESkoarNoad::branches]             = FColor::FromHex(L"CCCCCC05");
noad_to_colour[ESkoarNoad::coda]                 = FColor::FromHex(L"CCCCCC05");
noad_to_colour[ESkoarNoad::cond_else]            = FColor::FromHex(L"CCCCCC05");
noad_to_colour[ESkoarNoad::cond_if]              = FColor::FromHex(L"CCCCCC05");
noad_to_colour[ESkoarNoad::cond_ifs]             = FColor::FromHex(L"CCCCCC05");
noad_to_colour[ESkoarNoad::cond_ifs_suffix]      = FColor::FromHex(L"CCCCCC05");
noad_to_colour[ESkoarNoad::conditional]          = FColor::FromHex(L"CCCCCC05");
noad_to_colour[ESkoarNoad::cthulhu]              = FColor::FromHex(L"CCCCCC05");
noad_to_colour[ESkoarNoad::cthulhu_prime]        = FColor::FromHex(L"CCCCCC05");
noad_to_colour[ESkoarNoad::dal_goto]             = FColor::FromHex(L"CCCCCC05");
noad_to_colour[ESkoarNoad::deref]                = FColor::FromHex(L"CCCCCC05");
noad_to_colour[ESkoarNoad::deref_prime]          = FColor::FromHex(L"CCCCCC05");
noad_to_colour[ESkoarNoad::dynamic]              = FColor::FromHex(L"CCCCCC05");
noad_to_colour[ESkoarNoad::expr]                 = FColor::FromHex(L"CCCCCC05");
noad_to_colour[ESkoarNoad::expr_prime]           = FColor::FromHex(L"CCCCCC05");
noad_to_colour[ESkoarNoad::if_body]              = FColor::FromHex(L"CCCCCC05");
noad_to_colour[ESkoarNoad::listy]                = FColor::FromHex(L"CCCCCC05");
noad_to_colour[ESkoarNoad::listy_entries]        = FColor::FromHex(L"CCCCCC05");
noad_to_colour[ESkoarNoad::listy_suffix]         = FColor::FromHex(L"CCCCCC05");
noad_to_colour[ESkoarNoad::loop]                 = FColor::FromHex(L"CCCCCC05");
noad_to_colour[ESkoarNoad::loop_body]            = FColor::FromHex(L"CCCCCC05");
noad_to_colour[ESkoarNoad::loop_condition]       = FColor::FromHex(L"CCCCCC05");
noad_to_colour[ESkoarNoad::marker]               = FColor::FromHex(L"CCCCCC05");
noad_to_colour[ESkoarNoad::math]                 = FColor::FromHex(L"CCCCCC05");
noad_to_colour[ESkoarNoad::moar_listy_entries]   = FColor::FromHex(L"CCCCCC05");
noad_to_colour[ESkoarNoad::msg]                  = FColor::FromHex(L"CCCCCC05");
noad_to_colour[ESkoarNoad::msg_chain_node]       = FColor::FromHex(L"CCCCCC05");
noad_to_colour[ESkoarNoad::msgable]              = FColor::FromHex(L"CCCCCC05");
noad_to_colour[ESkoarNoad::musical_keyword]      = FColor::FromHex(L"CCCCCC05");
noad_to_colour[ESkoarNoad::musical_keyword_misc] = FColor::FromHex(L"CCCCCC05");
noad_to_colour[ESkoarNoad::nouny]                = FColor::FromHex(L"CCCCCC05");
noad_to_colour[ESkoarNoad::nouny_literal]        = FColor::FromHex(L"CCCCCC05");
noad_to_colour[ESkoarNoad::opt_arg_spec]         = FColor::FromHex(L"CCCCCC05");
noad_to_colour[ESkoarNoad::optional_al_coda]     = FColor::FromHex(L"CCCCCC05");
noad_to_colour[ESkoarNoad::optional_voice]       = FColor::FromHex(L"CCCCCC05");
noad_to_colour[ESkoarNoad::ottavas]              = FColor::FromHex(L"CCCCCC05");
noad_to_colour[ESkoarNoad::pedally]              = FColor::FromHex(L"CCCCCC05");
noad_to_colour[ESkoarNoad::phrases]              = FColor::FromHex(L"CCCCCC05");
noad_to_colour[ESkoarNoad::phrasey]              = FColor::FromHex(L"CCCCCC05");
noad_to_colour[ESkoarNoad::settable]             = FColor::FromHex(L"CCCCCC05");
noad_to_colour[ESkoarNoad::skoar]                = FColor::FromHex(L"CCCCCC05");
noad_to_colour[ESkoarNoad::skoarpion]            = FColor::FromHex(L"CCCCCC05");
noad_to_colour[ESkoarNoad::skrp_lines]           = FColor::FromHex(L"CCCCCC05");
noad_to_colour[ESkoarNoad::skrp_moar_lines]      = FColor::FromHex(L"CCCCCC05");
noad_to_colour[ESkoarNoad::skrp_sig]             = FColor::FromHex(L"CCCCCC05");
noad_to_colour[ESkoarNoad::skrp_suffix]          = FColor::FromHex(L"CCCCCC05");
noad_to_colour[ESkoarNoad::times]                = FColor::FromHex(L"CCCCCC05");

    }

    void init_styles() {
    
// -----------
// Toke Styles
// -----------
toke_to_style[ESkoarToke::AlCoda]          = FSkoarEditorStyle::Get().GetWidgetStyle<FTextBlockStyle>("SyntaxHighlight.Skoar.Toke.AlCoda");
toke_to_style[ESkoarToke::AlFine]          = FSkoarEditorStyle::Get().GetWidgetStyle<FTextBlockStyle>("SyntaxHighlight.Skoar.Toke.AlFine");
toke_to_style[ESkoarToke::AlSegno]         = FSkoarEditorStyle::Get().GetWidgetStyle<FTextBlockStyle>("SyntaxHighlight.Skoar.Toke.AlSegno");
toke_to_style[ESkoarToke::ArgSpec]         = FSkoarEditorStyle::Get().GetWidgetStyle<FTextBlockStyle>("SyntaxHighlight.Skoar.Toke.ArgSpec");
toke_to_style[ESkoarToke::AssOp]           = FSkoarEditorStyle::Get().GetWidgetStyle<FTextBlockStyle>("SyntaxHighlight.Skoar.Toke.AssOp");
toke_to_style[ESkoarToke::Bars]            = FSkoarEditorStyle::Get().GetWidgetStyle<FTextBlockStyle>("SyntaxHighlight.Skoar.Toke.Bars");
toke_to_style[ESkoarToke::BooleanOp]       = FSkoarEditorStyle::Get().GetWidgetStyle<FTextBlockStyle>("SyntaxHighlight.Skoar.Toke.BooleanOp");
toke_to_style[ESkoarToke::Caesura]         = FSkoarEditorStyle::Get().GetWidgetStyle<FTextBlockStyle>("SyntaxHighlight.Skoar.Toke.Caesura");
toke_to_style[ESkoarToke::Carrot]          = FSkoarEditorStyle::Get().GetWidgetStyle<FTextBlockStyle>("SyntaxHighlight.Skoar.Toke.Carrot");
toke_to_style[ESkoarToke::Choard]          = FSkoarEditorStyle::Get().GetWidgetStyle<FTextBlockStyle>("SyntaxHighlight.Skoar.Toke.Choard");
toke_to_style[ESkoarToke::Coda]            = FSkoarEditorStyle::Get().GetWidgetStyle<FTextBlockStyle>("SyntaxHighlight.Skoar.Toke.Coda");
toke_to_style[ESkoarToke::Comment]         = FSkoarEditorStyle::Get().GetWidgetStyle<FTextBlockStyle>("SyntaxHighlight.Skoar.Toke.Comment");
toke_to_style[ESkoarToke::CondE]           = FSkoarEditorStyle::Get().GetWidgetStyle<FTextBlockStyle>("SyntaxHighlight.Skoar.Toke.CondE");
toke_to_style[ESkoarToke::CondIf]          = FSkoarEditorStyle::Get().GetWidgetStyle<FTextBlockStyle>("SyntaxHighlight.Skoar.Toke.CondIf");
toke_to_style[ESkoarToke::CondS]           = FSkoarEditorStyle::Get().GetWidgetStyle<FTextBlockStyle>("SyntaxHighlight.Skoar.Toke.CondS");
toke_to_style[ESkoarToke::Crap]            = FSkoarEditorStyle::Get().GetWidgetStyle<FTextBlockStyle>("SyntaxHighlight.Skoar.Toke.Crap");
toke_to_style[ESkoarToke::Crotchets]       = FSkoarEditorStyle::Get().GetWidgetStyle<FTextBlockStyle>("SyntaxHighlight.Skoar.Toke.Crotchets");
toke_to_style[ESkoarToke::DaCapo]          = FSkoarEditorStyle::Get().GetWidgetStyle<FTextBlockStyle>("SyntaxHighlight.Skoar.Toke.DaCapo");
toke_to_style[ESkoarToke::DalSegno]        = FSkoarEditorStyle::Get().GetWidgetStyle<FTextBlockStyle>("SyntaxHighlight.Skoar.Toke.DalSegno");
toke_to_style[ESkoarToke::Deref]           = FSkoarEditorStyle::Get().GetWidgetStyle<FTextBlockStyle>("SyntaxHighlight.Skoar.Toke.Deref");
toke_to_style[ESkoarToke::DynFP]           = FSkoarEditorStyle::Get().GetWidgetStyle<FTextBlockStyle>("SyntaxHighlight.Skoar.Toke.DynFP");
toke_to_style[ESkoarToke::DynForte]        = FSkoarEditorStyle::Get().GetWidgetStyle<FTextBlockStyle>("SyntaxHighlight.Skoar.Toke.DynForte");
toke_to_style[ESkoarToke::DynPiano]        = FSkoarEditorStyle::Get().GetWidgetStyle<FTextBlockStyle>("SyntaxHighlight.Skoar.Toke.DynPiano");
toke_to_style[ESkoarToke::DynSFZ]          = FSkoarEditorStyle::Get().GetWidgetStyle<FTextBlockStyle>("SyntaxHighlight.Skoar.Toke.DynSFZ");
toke_to_style[ESkoarToke::Eighths]         = FSkoarEditorStyle::Get().GetWidgetStyle<FTextBlockStyle>("SyntaxHighlight.Skoar.Toke.Eighths");
toke_to_style[ESkoarToke::Fairy]           = FSkoarEditorStyle::Get().GetWidgetStyle<FTextBlockStyle>("SyntaxHighlight.Skoar.Toke.Fairy");
toke_to_style[ESkoarToke::False]           = FSkoarEditorStyle::Get().GetWidgetStyle<FTextBlockStyle>("SyntaxHighlight.Skoar.Toke.False");
toke_to_style[ESkoarToke::Fine]            = FSkoarEditorStyle::Get().GetWidgetStyle<FTextBlockStyle>("SyntaxHighlight.Skoar.Toke.Fine");
toke_to_style[ESkoarToke::Float]           = FSkoarEditorStyle::Get().GetWidgetStyle<FTextBlockStyle>("SyntaxHighlight.Skoar.Toke.Float");
toke_to_style[ESkoarToke::Freq]            = FSkoarEditorStyle::Get().GetWidgetStyle<FTextBlockStyle>("SyntaxHighlight.Skoar.Toke.Freq");
toke_to_style[ESkoarToke::HashLevel]       = FSkoarEditorStyle::Get().GetWidgetStyle<FTextBlockStyle>("SyntaxHighlight.Skoar.Toke.HashLevel");
toke_to_style[ESkoarToke::Int]             = FSkoarEditorStyle::Get().GetWidgetStyle<FTextBlockStyle>("SyntaxHighlight.Skoar.Toke.Int");
toke_to_style[ESkoarToke::LWing]           = FSkoarEditorStyle::Get().GetWidgetStyle<FTextBlockStyle>("SyntaxHighlight.Skoar.Toke.LWing");
toke_to_style[ESkoarToke::ListE]           = FSkoarEditorStyle::Get().GetWidgetStyle<FTextBlockStyle>("SyntaxHighlight.Skoar.Toke.ListE");
toke_to_style[ESkoarToke::ListS]           = FSkoarEditorStyle::Get().GetWidgetStyle<FTextBlockStyle>("SyntaxHighlight.Skoar.Toke.ListS");
toke_to_style[ESkoarToke::ListSep]         = FSkoarEditorStyle::Get().GetWidgetStyle<FTextBlockStyle>("SyntaxHighlight.Skoar.Toke.ListSep");
toke_to_style[ESkoarToke::Loco]            = FSkoarEditorStyle::Get().GetWidgetStyle<FTextBlockStyle>("SyntaxHighlight.Skoar.Toke.Loco");
toke_to_style[ESkoarToke::LoopE]           = FSkoarEditorStyle::Get().GetWidgetStyle<FTextBlockStyle>("SyntaxHighlight.Skoar.Toke.LoopE");
toke_to_style[ESkoarToke::LoopS]           = FSkoarEditorStyle::Get().GetWidgetStyle<FTextBlockStyle>("SyntaxHighlight.Skoar.Toke.LoopS");
toke_to_style[ESkoarToke::LoopSep]         = FSkoarEditorStyle::Get().GetWidgetStyle<FTextBlockStyle>("SyntaxHighlight.Skoar.Toke.LoopSep");
toke_to_style[ESkoarToke::MathOp]          = FSkoarEditorStyle::Get().GetWidgetStyle<FTextBlockStyle>("SyntaxHighlight.Skoar.Toke.MathOp");
toke_to_style[ESkoarToke::Meter]           = FSkoarEditorStyle::Get().GetWidgetStyle<FTextBlockStyle>("SyntaxHighlight.Skoar.Toke.Meter");
toke_to_style[ESkoarToke::MsgName]         = FSkoarEditorStyle::Get().GetWidgetStyle<FTextBlockStyle>("SyntaxHighlight.Skoar.Toke.MsgName");
toke_to_style[ESkoarToke::MsgNameWithArgs] = FSkoarEditorStyle::Get().GetWidgetStyle<FTextBlockStyle>("SyntaxHighlight.Skoar.Toke.MsgNameWithArgs");
toke_to_style[ESkoarToke::MsgOp]           = FSkoarEditorStyle::Get().GetWidgetStyle<FTextBlockStyle>("SyntaxHighlight.Skoar.Toke.MsgOp");
toke_to_style[ESkoarToke::NamedNoat]       = FSkoarEditorStyle::Get().GetWidgetStyle<FTextBlockStyle>("SyntaxHighlight.Skoar.Toke.NamedNoat");
toke_to_style[ESkoarToke::Newline]         = FSkoarEditorStyle::Get().GetWidgetStyle<FTextBlockStyle>("SyntaxHighlight.Skoar.Toke.Newline");
toke_to_style[ESkoarToke::Nosey]           = FSkoarEditorStyle::Get().GetWidgetStyle<FTextBlockStyle>("SyntaxHighlight.Skoar.Toke.Nosey");
toke_to_style[ESkoarToke::OctaveShift]     = FSkoarEditorStyle::Get().GetWidgetStyle<FTextBlockStyle>("SyntaxHighlight.Skoar.Toke.OctaveShift");
toke_to_style[ESkoarToke::OttavaA]         = FSkoarEditorStyle::Get().GetWidgetStyle<FTextBlockStyle>("SyntaxHighlight.Skoar.Toke.OttavaA");
toke_to_style[ESkoarToke::OttavaB]         = FSkoarEditorStyle::Get().GetWidgetStyle<FTextBlockStyle>("SyntaxHighlight.Skoar.Toke.OttavaB");
toke_to_style[ESkoarToke::PedalDown]       = FSkoarEditorStyle::Get().GetWidgetStyle<FTextBlockStyle>("SyntaxHighlight.Skoar.Toke.PedalDown");
toke_to_style[ESkoarToke::PedalUp]         = FSkoarEditorStyle::Get().GetWidgetStyle<FTextBlockStyle>("SyntaxHighlight.Skoar.Toke.PedalUp");
toke_to_style[ESkoarToke::Portamento]      = FSkoarEditorStyle::Get().GetWidgetStyle<FTextBlockStyle>("SyntaxHighlight.Skoar.Toke.Portamento");
toke_to_style[ESkoarToke::Quarters]        = FSkoarEditorStyle::Get().GetWidgetStyle<FTextBlockStyle>("SyntaxHighlight.Skoar.Toke.Quarters");
toke_to_style[ESkoarToke::Quavers]         = FSkoarEditorStyle::Get().GetWidgetStyle<FTextBlockStyle>("SyntaxHighlight.Skoar.Toke.Quavers");
toke_to_style[ESkoarToke::QuindicesimaA]   = FSkoarEditorStyle::Get().GetWidgetStyle<FTextBlockStyle>("SyntaxHighlight.Skoar.Toke.QuindicesimaA");
toke_to_style[ESkoarToke::QuindicesimaB]   = FSkoarEditorStyle::Get().GetWidgetStyle<FTextBlockStyle>("SyntaxHighlight.Skoar.Toke.QuindicesimaB");
toke_to_style[ESkoarToke::RWing]           = FSkoarEditorStyle::Get().GetWidgetStyle<FTextBlockStyle>("SyntaxHighlight.Skoar.Toke.RWing");
toke_to_style[ESkoarToke::Rep]             = FSkoarEditorStyle::Get().GetWidgetStyle<FTextBlockStyle>("SyntaxHighlight.Skoar.Toke.Rep");
toke_to_style[ESkoarToke::Segno]           = FSkoarEditorStyle::Get().GetWidgetStyle<FTextBlockStyle>("SyntaxHighlight.Skoar.Toke.Segno");
toke_to_style[ESkoarToke::Semicolon]       = FSkoarEditorStyle::Get().GetWidgetStyle<FTextBlockStyle>("SyntaxHighlight.Skoar.Toke.Semicolon");
toke_to_style[ESkoarToke::SkoarpionEnd]    = FSkoarEditorStyle::Get().GetWidgetStyle<FTextBlockStyle>("SyntaxHighlight.Skoar.Toke.SkoarpionEnd");
toke_to_style[ESkoarToke::SkoarpionSep]    = FSkoarEditorStyle::Get().GetWidgetStyle<FTextBlockStyle>("SyntaxHighlight.Skoar.Toke.SkoarpionSep");
toke_to_style[ESkoarToke::SkoarpionStart]  = FSkoarEditorStyle::Get().GetWidgetStyle<FTextBlockStyle>("SyntaxHighlight.Skoar.Toke.SkoarpionStart");
toke_to_style[ESkoarToke::Slash]           = FSkoarEditorStyle::Get().GetWidgetStyle<FTextBlockStyle>("SyntaxHighlight.Skoar.Toke.Slash");
toke_to_style[ESkoarToke::String]          = FSkoarEditorStyle::Get().GetWidgetStyle<FTextBlockStyle>("SyntaxHighlight.Skoar.Toke.String");
toke_to_style[ESkoarToke::Symbol]          = FSkoarEditorStyle::Get().GetWidgetStyle<FTextBlockStyle>("SyntaxHighlight.Skoar.Toke.Symbol");
toke_to_style[ESkoarToke::SymbolName]      = FSkoarEditorStyle::Get().GetWidgetStyle<FTextBlockStyle>("SyntaxHighlight.Skoar.Toke.SymbolName");
toke_to_style[ESkoarToke::Times]           = FSkoarEditorStyle::Get().GetWidgetStyle<FTextBlockStyle>("SyntaxHighlight.Skoar.Toke.Times");
toke_to_style[ESkoarToke::True]            = FSkoarEditorStyle::Get().GetWidgetStyle<FTextBlockStyle>("SyntaxHighlight.Skoar.Toke.True");
toke_to_style[ESkoarToke::Tuplet]          = FSkoarEditorStyle::Get().GetWidgetStyle<FTextBlockStyle>("SyntaxHighlight.Skoar.Toke.Tuplet");
toke_to_style[ESkoarToke::Voice]           = FSkoarEditorStyle::Get().GetWidgetStyle<FTextBlockStyle>("SyntaxHighlight.Skoar.Toke.Voice");
toke_to_style[ESkoarToke::Volta]           = FSkoarEditorStyle::Get().GetWidgetStyle<FTextBlockStyle>("SyntaxHighlight.Skoar.Toke.Volta");

// -----------
// Noad Styles
// -----------
noad_to_style[ESkoarNoad::al_x]                 = FSkoarEditorStyle::Get().GetWidgetStyle<FTextBlockStyle>("SyntaxHighlight.Skoar.Noad.al_x");
noad_to_style[ESkoarNoad::assignment]           = FSkoarEditorStyle::Get().GetWidgetStyle<FTextBlockStyle>("SyntaxHighlight.Skoar.Noad.assignment");
noad_to_style[ESkoarNoad::beat]                 = FSkoarEditorStyle::Get().GetWidgetStyle<FTextBlockStyle>("SyntaxHighlight.Skoar.Noad.beat");
noad_to_style[ESkoarNoad::boolean]              = FSkoarEditorStyle::Get().GetWidgetStyle<FTextBlockStyle>("SyntaxHighlight.Skoar.Noad.boolean");
noad_to_style[ESkoarNoad::branch]               = FSkoarEditorStyle::Get().GetWidgetStyle<FTextBlockStyle>("SyntaxHighlight.Skoar.Noad.branch");
noad_to_style[ESkoarNoad::branches]             = FSkoarEditorStyle::Get().GetWidgetStyle<FTextBlockStyle>("SyntaxHighlight.Skoar.Noad.branches");
noad_to_style[ESkoarNoad::coda]                 = FSkoarEditorStyle::Get().GetWidgetStyle<FTextBlockStyle>("SyntaxHighlight.Skoar.Noad.coda");
noad_to_style[ESkoarNoad::cond_else]            = FSkoarEditorStyle::Get().GetWidgetStyle<FTextBlockStyle>("SyntaxHighlight.Skoar.Noad.cond_else");
noad_to_style[ESkoarNoad::cond_if]              = FSkoarEditorStyle::Get().GetWidgetStyle<FTextBlockStyle>("SyntaxHighlight.Skoar.Noad.cond_if");
noad_to_style[ESkoarNoad::cond_ifs]             = FSkoarEditorStyle::Get().GetWidgetStyle<FTextBlockStyle>("SyntaxHighlight.Skoar.Noad.cond_ifs");
noad_to_style[ESkoarNoad::cond_ifs_suffix]      = FSkoarEditorStyle::Get().GetWidgetStyle<FTextBlockStyle>("SyntaxHighlight.Skoar.Noad.cond_ifs_suffix");
noad_to_style[ESkoarNoad::conditional]          = FSkoarEditorStyle::Get().GetWidgetStyle<FTextBlockStyle>("SyntaxHighlight.Skoar.Noad.conditional");
noad_to_style[ESkoarNoad::cthulhu]              = FSkoarEditorStyle::Get().GetWidgetStyle<FTextBlockStyle>("SyntaxHighlight.Skoar.Noad.cthulhu");
noad_to_style[ESkoarNoad::cthulhu_prime]        = FSkoarEditorStyle::Get().GetWidgetStyle<FTextBlockStyle>("SyntaxHighlight.Skoar.Noad.cthulhu_prime");
noad_to_style[ESkoarNoad::dal_goto]             = FSkoarEditorStyle::Get().GetWidgetStyle<FTextBlockStyle>("SyntaxHighlight.Skoar.Noad.dal_goto");
noad_to_style[ESkoarNoad::deref]                = FSkoarEditorStyle::Get().GetWidgetStyle<FTextBlockStyle>("SyntaxHighlight.Skoar.Noad.deref");
noad_to_style[ESkoarNoad::deref_prime]          = FSkoarEditorStyle::Get().GetWidgetStyle<FTextBlockStyle>("SyntaxHighlight.Skoar.Noad.deref_prime");
noad_to_style[ESkoarNoad::dynamic]              = FSkoarEditorStyle::Get().GetWidgetStyle<FTextBlockStyle>("SyntaxHighlight.Skoar.Noad.dynamic");
noad_to_style[ESkoarNoad::expr]                 = FSkoarEditorStyle::Get().GetWidgetStyle<FTextBlockStyle>("SyntaxHighlight.Skoar.Noad.expr");
noad_to_style[ESkoarNoad::expr_prime]           = FSkoarEditorStyle::Get().GetWidgetStyle<FTextBlockStyle>("SyntaxHighlight.Skoar.Noad.expr_prime");
noad_to_style[ESkoarNoad::if_body]              = FSkoarEditorStyle::Get().GetWidgetStyle<FTextBlockStyle>("SyntaxHighlight.Skoar.Noad.if_body");
noad_to_style[ESkoarNoad::listy]                = FSkoarEditorStyle::Get().GetWidgetStyle<FTextBlockStyle>("SyntaxHighlight.Skoar.Noad.listy");
noad_to_style[ESkoarNoad::listy_entries]        = FSkoarEditorStyle::Get().GetWidgetStyle<FTextBlockStyle>("SyntaxHighlight.Skoar.Noad.listy_entries");
noad_to_style[ESkoarNoad::listy_suffix]         = FSkoarEditorStyle::Get().GetWidgetStyle<FTextBlockStyle>("SyntaxHighlight.Skoar.Noad.listy_suffix");
noad_to_style[ESkoarNoad::loop]                 = FSkoarEditorStyle::Get().GetWidgetStyle<FTextBlockStyle>("SyntaxHighlight.Skoar.Noad.loop");
noad_to_style[ESkoarNoad::loop_body]            = FSkoarEditorStyle::Get().GetWidgetStyle<FTextBlockStyle>("SyntaxHighlight.Skoar.Noad.loop_body");
noad_to_style[ESkoarNoad::loop_condition]       = FSkoarEditorStyle::Get().GetWidgetStyle<FTextBlockStyle>("SyntaxHighlight.Skoar.Noad.loop_condition");
noad_to_style[ESkoarNoad::marker]               = FSkoarEditorStyle::Get().GetWidgetStyle<FTextBlockStyle>("SyntaxHighlight.Skoar.Noad.marker");
noad_to_style[ESkoarNoad::math]                 = FSkoarEditorStyle::Get().GetWidgetStyle<FTextBlockStyle>("SyntaxHighlight.Skoar.Noad.math");
noad_to_style[ESkoarNoad::moar_listy_entries]   = FSkoarEditorStyle::Get().GetWidgetStyle<FTextBlockStyle>("SyntaxHighlight.Skoar.Noad.moar_listy_entries");
noad_to_style[ESkoarNoad::msg]                  = FSkoarEditorStyle::Get().GetWidgetStyle<FTextBlockStyle>("SyntaxHighlight.Skoar.Noad.msg");
noad_to_style[ESkoarNoad::msg_chain_node]       = FSkoarEditorStyle::Get().GetWidgetStyle<FTextBlockStyle>("SyntaxHighlight.Skoar.Noad.msg_chain_node");
noad_to_style[ESkoarNoad::msgable]              = FSkoarEditorStyle::Get().GetWidgetStyle<FTextBlockStyle>("SyntaxHighlight.Skoar.Noad.msgable");
noad_to_style[ESkoarNoad::musical_keyword]      = FSkoarEditorStyle::Get().GetWidgetStyle<FTextBlockStyle>("SyntaxHighlight.Skoar.Noad.musical_keyword");
noad_to_style[ESkoarNoad::musical_keyword_misc] = FSkoarEditorStyle::Get().GetWidgetStyle<FTextBlockStyle>("SyntaxHighlight.Skoar.Noad.musical_keyword_misc");
noad_to_style[ESkoarNoad::nouny]                = FSkoarEditorStyle::Get().GetWidgetStyle<FTextBlockStyle>("SyntaxHighlight.Skoar.Noad.nouny");
noad_to_style[ESkoarNoad::nouny_literal]        = FSkoarEditorStyle::Get().GetWidgetStyle<FTextBlockStyle>("SyntaxHighlight.Skoar.Noad.nouny_literal");
noad_to_style[ESkoarNoad::opt_arg_spec]         = FSkoarEditorStyle::Get().GetWidgetStyle<FTextBlockStyle>("SyntaxHighlight.Skoar.Noad.opt_arg_spec");
noad_to_style[ESkoarNoad::optional_al_coda]     = FSkoarEditorStyle::Get().GetWidgetStyle<FTextBlockStyle>("SyntaxHighlight.Skoar.Noad.optional_al_coda");
noad_to_style[ESkoarNoad::optional_voice]       = FSkoarEditorStyle::Get().GetWidgetStyle<FTextBlockStyle>("SyntaxHighlight.Skoar.Noad.optional_voice");
noad_to_style[ESkoarNoad::ottavas]              = FSkoarEditorStyle::Get().GetWidgetStyle<FTextBlockStyle>("SyntaxHighlight.Skoar.Noad.ottavas");
noad_to_style[ESkoarNoad::pedally]              = FSkoarEditorStyle::Get().GetWidgetStyle<FTextBlockStyle>("SyntaxHighlight.Skoar.Noad.pedally");
noad_to_style[ESkoarNoad::phrases]              = FSkoarEditorStyle::Get().GetWidgetStyle<FTextBlockStyle>("SyntaxHighlight.Skoar.Noad.phrases");
noad_to_style[ESkoarNoad::phrasey]              = FSkoarEditorStyle::Get().GetWidgetStyle<FTextBlockStyle>("SyntaxHighlight.Skoar.Noad.phrasey");
noad_to_style[ESkoarNoad::settable]             = FSkoarEditorStyle::Get().GetWidgetStyle<FTextBlockStyle>("SyntaxHighlight.Skoar.Noad.settable");
noad_to_style[ESkoarNoad::skoar]                = FSkoarEditorStyle::Get().GetWidgetStyle<FTextBlockStyle>("SyntaxHighlight.Skoar.Noad.skoar");
noad_to_style[ESkoarNoad::skoarpion]            = FSkoarEditorStyle::Get().GetWidgetStyle<FTextBlockStyle>("SyntaxHighlight.Skoar.Noad.skoarpion");
noad_to_style[ESkoarNoad::skrp_lines]           = FSkoarEditorStyle::Get().GetWidgetStyle<FTextBlockStyle>("SyntaxHighlight.Skoar.Noad.skrp_lines");
noad_to_style[ESkoarNoad::skrp_moar_lines]      = FSkoarEditorStyle::Get().GetWidgetStyle<FTextBlockStyle>("SyntaxHighlight.Skoar.Noad.skrp_moar_lines");
noad_to_style[ESkoarNoad::skrp_sig]             = FSkoarEditorStyle::Get().GetWidgetStyle<FTextBlockStyle>("SyntaxHighlight.Skoar.Noad.skrp_sig");
noad_to_style[ESkoarNoad::skrp_suffix]          = FSkoarEditorStyle::Get().GetWidgetStyle<FTextBlockStyle>("SyntaxHighlight.Skoar.Noad.skrp_suffix");
noad_to_style[ESkoarNoad::times]                = FSkoarEditorStyle::Get().GetWidgetStyle<FTextBlockStyle>("SyntaxHighlight.Skoar.Noad.times");

    }

    void each(StyleSpell spell) {
        each_toke(spell);        
        each_noad(spell);        
    }

    void each_toke(StyleSpell spell) {
        for (auto kv: toke_to_id) {
            auto eKind = kv.first;
            auto id = kv.second;
            auto colour = toke_to_colour[eKind];
            spell(id, colour);        
        }
    }
    
    void each_noad(StyleSpell spell) {
        for (auto kv: noad_to_id) {
            auto eKind = kv.first;
            auto id = kv.second;
            auto colour = noad_to_colour[eKind];
            spell(id, colour);        
        }
    }

};
        