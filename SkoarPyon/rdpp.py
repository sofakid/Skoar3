# ==================================================================================================================
# rdpp.py - Generated by PyRDPP - Create Recursive Descent Predictive Parser on 2015-08-06 00:08:53 for Python 3.3.2
# ==================================================================================================================
from Skoarcery.SkoarPyon.apparatus import SkoarNoad
from Skoarcery.SkoarPyon.lex import Toke_Segno, Toke_Int, Toke_CondE, Toke_Caesura, Toke_ListS, \
    Toke_Comment, Toke_Newline, Toke_OctaveShift, Toke_PedalUp, Toke_Quarters, \
    Toke_LoopS, Toke_QuindicesimaA, Toke_MsgOp, Toke_Float, Toke_Fine, \
    Toke_PedalDown, Toke_Whitespace, Toke_AssOp, Toke_MsgNameWithArgs, Toke_DynFP, \
    Toke_ListE, Toke_Coda, Toke_CondIf, Toke_True, Toke_SkoarpionStart, \
    Toke_False, Toke_String, Toke_LoopSep, Toke_MsgName, Toke_Deref, \
    Toke_ArgSpec, Toke_Symbol, Toke_SymbolName, Toke_Crotchets, Toke_OttavaB, \
    Toke_QuindicesimaB, Toke_Fairy, Toke_DalSegno, Toke_LoopE, Toke_Bars, \
    Toke_NamedNoat, Toke_Eighths, Toke_Rep, Toke_OttavaA, Toke_LWing, \
    Toke_Semicolon, Toke_BooleanOp, Toke_DaCapo, Toke_Voice, Toke_AlCoda, \
    Toke_DynPiano, Toke_DynSFZ, Toke_Crap, Toke_Loco, Toke_Carrot, \
    Toke_Eof, Toke_Nosey, Toke_Portamento, Toke_Quavers, Toke_ListSep, \
    Toke_MathOp, Toke_HashLevel, Toke_Slash, Toke_Tuplet, Toke_AlFine, \
    Toke_Times, Toke_Choard, Toke_CondS, Toke_SkoarpionSep, Toke_Meter, \
    Toke_Freq, Toke_DynForte, Toke_AlSegno, Toke_Volta, Toke_SkoarpionEnd, \
    Toke_RWing


class SkoarParseException(Exception):
    pass


class SkoarParser:

    def __init__(self, runtime):
        self.runtime = runtime
        self.toker = runtime.toker
        self.tab = 0
        self.desirables = dict()
        self.init_desirables()

    def fail(self):
        self.toker.dump()
        raise SkoarParseException

    @property
    def tabby(self):
        if self.tab == 0:
            return ""

        return ("{:>" + str(self.tab * 2) + "}").format(" ")

    def print(self, line, end):
        print(self.tabby + line, end=end)


